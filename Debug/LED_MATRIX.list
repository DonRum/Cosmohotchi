
LED_MATRIX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003768  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000048dc  08003918  08003918  00013918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081f4  080081f4  000200e8  2**0
                  CONTENTS
  4 .ARM          00000008  080081f4  080081f4  000181f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081fc  080081fc  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081fc  080081fc  000181fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008200  08008200  00018200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08008204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e8  2**0
                  CONTENTS
 10 .bss          000004c4  200000e8  200000e8  000200e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005ac  200005ac  000200e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f92  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023ae  00000000  00000000  000310aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00007767  00000000  00000000  00033458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000928  00000000  00000000  0003abc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000958  00000000  00000000  0003b4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002426f  00000000  00000000  0003be40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f01f  00000000  00000000  000600af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d4140  00000000  00000000  0006f0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0014320e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000022fc  00000000  00000000  00143264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000e8 	.word	0x200000e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003900 	.word	0x08003900

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000ec 	.word	0x200000ec
 80001ec:	08003900 	.word	0x08003900

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800058c:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	2400      	movs	r4, #0
 8000590:	9409      	str	r4, [sp, #36]	; 0x24
 8000592:	940a      	str	r4, [sp, #40]	; 0x28
 8000594:	940b      	str	r4, [sp, #44]	; 0x2c
 8000596:	940c      	str	r4, [sp, #48]	; 0x30
 8000598:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	9401      	str	r4, [sp, #4]
 800059c:	4b5a      	ldr	r3, [pc, #360]	; (8000708 <MX_GPIO_Init+0x180>)
 800059e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005a0:	f042 0204 	orr.w	r2, r2, #4
 80005a4:	631a      	str	r2, [r3, #48]	; 0x30
 80005a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005a8:	f002 0204 	and.w	r2, r2, #4
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b0:	9402      	str	r4, [sp, #8]
 80005b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005b8:	631a      	str	r2, [r3, #48]	; 0x30
 80005ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005bc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80005c0:	9202      	str	r2, [sp, #8]
 80005c2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005c4:	9403      	str	r4, [sp, #12]
 80005c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c8:	f042 0220 	orr.w	r2, r2, #32
 80005cc:	631a      	str	r2, [r3, #48]	; 0x30
 80005ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d0:	f002 0220 	and.w	r2, r2, #32
 80005d4:	9203      	str	r2, [sp, #12]
 80005d6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005d8:	9404      	str	r4, [sp, #16]
 80005da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005dc:	f042 0210 	orr.w	r2, r2, #16
 80005e0:	631a      	str	r2, [r3, #48]	; 0x30
 80005e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e4:	f002 0210 	and.w	r2, r2, #16
 80005e8:	9204      	str	r2, [sp, #16]
 80005ea:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ec:	9405      	str	r4, [sp, #20]
 80005ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f0:	f042 0202 	orr.w	r2, r2, #2
 80005f4:	631a      	str	r2, [r3, #48]	; 0x30
 80005f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f8:	f002 0202 	and.w	r2, r2, #2
 80005fc:	9205      	str	r2, [sp, #20]
 80005fe:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000600:	9406      	str	r4, [sp, #24]
 8000602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000604:	f042 0208 	orr.w	r2, r2, #8
 8000608:	631a      	str	r2, [r3, #48]	; 0x30
 800060a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800060c:	f002 0208 	and.w	r2, r2, #8
 8000610:	9206      	str	r2, [sp, #24]
 8000612:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000614:	9407      	str	r4, [sp, #28]
 8000616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000618:	f042 0201 	orr.w	r2, r2, #1
 800061c:	631a      	str	r2, [r3, #48]	; 0x30
 800061e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000620:	f002 0201 	and.w	r2, r2, #1
 8000624:	9207      	str	r2, [sp, #28]
 8000626:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000628:	9408      	str	r4, [sp, #32]
 800062a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800062c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000630:	631a      	str	r2, [r3, #48]	; 0x30
 8000632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000638:	9308      	str	r3, [sp, #32]
 800063a:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED7_Pin|LED8_Pin|LED6_Pin|LED5_Pin
 800063c:	4f33      	ldr	r7, [pc, #204]	; (800070c <MX_GPIO_Init+0x184>)
 800063e:	4622      	mov	r2, r4
 8000640:	f24d 5181 	movw	r1, #54657	; 0xd581
 8000644:	4638      	mov	r0, r7
 8000646:	f001 f962 	bl	800190e <HAL_GPIO_WritePin>
                          |LED4_Pin|LED3_Pin|LED10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800064a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8000720 <MX_GPIO_Init+0x198>
 800064e:	4622      	mov	r2, r4
 8000650:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000654:	4640      	mov	r0, r8
 8000656:	f001 f95a 	bl	800190e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, GPIO_PIN_RESET);
 800065a:	4e2d      	ldr	r6, [pc, #180]	; (8000710 <MX_GPIO_Init+0x188>)
 800065c:	4622      	mov	r2, r4
 800065e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000662:	4630      	mov	r0, r6
 8000664:	f001 f953 	bl	800190e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000672:	a909      	add	r1, sp, #36	; 0x24
 8000674:	4827      	ldr	r0, [pc, #156]	; (8000714 <MX_GPIO_Init+0x18c>)
 8000676:	f001 f84b 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT8_Pin BUT7_Pin BUT4_Pin BUT2_Pin */
  GPIO_InitStruct.Pin = BUT8_Pin|BUT7_Pin|BUT4_Pin|BUT2_Pin;
 800067a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800067e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000680:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000682:	2501      	movs	r5, #1
 8000684:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000686:	a909      	add	r1, sp, #36	; 0x24
 8000688:	4823      	ldr	r0, [pc, #140]	; (8000718 <MX_GPIO_Init+0x190>)
 800068a:	f001 f841 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_Pin LED8_Pin LED6_Pin LED5_Pin
                           LED4_Pin LED3_Pin LED10_Pin */
  GPIO_InitStruct.Pin = LED7_Pin|LED8_Pin|LED6_Pin|LED5_Pin
 800068e:	f24d 5381 	movw	r3, #54657	; 0xd581
 8000692:	9309      	str	r3, [sp, #36]	; 0x24
                          |LED4_Pin|LED3_Pin|LED10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800069a:	a909      	add	r1, sp, #36	; 0x24
 800069c:	4638      	mov	r0, r7
 800069e:	f001 f837 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT6_Pin BUT5_Pin BUT3_Pin */
  GPIO_InitStruct.Pin = BUT6_Pin|BUT5_Pin|BUT3_Pin;
 80006a2:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 80006a6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006aa:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006ac:	a909      	add	r1, sp, #36	; 0x24
 80006ae:	4638      	mov	r0, r7
 80006b0:	f001 f82e 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 80006b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006b8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c0:	a909      	add	r1, sp, #36	; 0x24
 80006c2:	4640      	mov	r0, r8
 80006c4:	f001 f824 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT9_Pin */
  GPIO_InitStruct.Pin = BUT9_Pin;
 80006c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006cc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ce:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d0:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(BUT9_GPIO_Port, &GPIO_InitStruct);
 80006d2:	a909      	add	r1, sp, #36	; 0x24
 80006d4:	4811      	ldr	r0, [pc, #68]	; (800071c <MX_GPIO_Init+0x194>)
 80006d6:	f001 f81b 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED9_Pin */
  GPIO_InitStruct.Pin = LED9_Pin;
 80006da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006de:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LED9_GPIO_Port, &GPIO_InitStruct);
 80006e6:	a909      	add	r1, sp, #36	; 0x24
 80006e8:	4630      	mov	r0, r6
 80006ea:	f001 f811 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT1_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 80006ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006f2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f6:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 80006f8:	a909      	add	r1, sp, #36	; 0x24
 80006fa:	4630      	mov	r0, r6
 80006fc:	f001 f808 	bl	8001710 <HAL_GPIO_Init>

}
 8000700:	b00e      	add	sp, #56	; 0x38
 8000702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40021000 	.word	0x40021000
 8000710:	40021800 	.word	0x40021800
 8000714:	40020800 	.word	0x40020800
 8000718:	40021400 	.word	0x40021400
 800071c:	40020c00 	.word	0x40020c00
 8000720:	40020400 	.word	0x40020400

08000724 <rand_comb>:
{
 8000724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000728:	4606      	mov	r6, r0
 800072a:	460f      	mov	r7, r1
	HAL_RNG_GenerateRandomNumber(&hrng, &rand_num);
 800072c:	4c1b      	ldr	r4, [pc, #108]	; (800079c <rand_comb+0x78>)
 800072e:	4621      	mov	r1, r4
 8000730:	481b      	ldr	r0, [pc, #108]	; (80007a0 <rand_comb+0x7c>)
 8000732:	f002 f81a 	bl	800276a <HAL_RNG_GenerateRandomNumber>
	srand(rand_num);
 8000736:	6820      	ldr	r0, [r4, #0]
 8000738:	f002 f964 	bl	8002a04 <srand>
	for (uint8_t i = 0; i < round; i++)
 800073c:	2500      	movs	r5, #0
 800073e:	42b5      	cmp	r5, r6
 8000740:	d229      	bcs.n	8000796 <rand_comb+0x72>
		uint8_t x = rand()%9;
 8000742:	f002 f98d 	bl	8002a60 <rand>
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <rand_comb+0x80>)
 8000748:	fb83 2300 	smull	r2, r3, r3, r0
 800074c:	17c4      	asrs	r4, r0, #31
 800074e:	ebc4 0463 	rsb	r4, r4, r3, asr #1
 8000752:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8000756:	1b04      	subs	r4, r0, r4
 8000758:	b2e4      	uxtb	r4, r4
		combination[i] = x;
 800075a:	557c      	strb	r4, [r7, r5]
		HAL_GPIO_WritePin(arr_led_port[x], arr_led_pin[x], 1);
 800075c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80007a8 <rand_comb+0x84>
 8000760:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80007ac <rand_comb+0x88>
 8000764:	2201      	movs	r2, #1
 8000766:	f839 1014 	ldrh.w	r1, [r9, r4, lsl #1]
 800076a:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 800076e:	f001 f8ce 	bl	800190e <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000772:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000776:	f000 ff4d 	bl	8001614 <HAL_Delay>
		HAL_GPIO_WritePin(arr_led_port[x], arr_led_pin[x], 0);
 800077a:	2200      	movs	r2, #0
 800077c:	f839 1014 	ldrh.w	r1, [r9, r4, lsl #1]
 8000780:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8000784:	f001 f8c3 	bl	800190e <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000788:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800078c:	f000 ff42 	bl	8001614 <HAL_Delay>
	for (uint8_t i = 0; i < round; i++)
 8000790:	3501      	adds	r5, #1
 8000792:	b2ed      	uxtb	r5, r5
 8000794:	e7d3      	b.n	800073e <rand_comb+0x1a>
}
 8000796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800079a:	bf00      	nop
 800079c:	20000530 	.word	0x20000530
 80007a0:	20000588 	.word	0x20000588
 80007a4:	38e38e39 	.word	0x38e38e39
 80007a8:	20000040 	.word	0x20000040
 80007ac:	20000054 	.word	0x20000054

080007b0 <conv_dec_to_char>:
	for(int i = N - 1; (i > 0) && (value != 0); i--)
 80007b0:	3a01      	subs	r2, #1
 80007b2:	2a00      	cmp	r2, #0
 80007b4:	dd17      	ble.n	80007e6 <conv_dec_to_char+0x36>
 80007b6:	b1a8      	cbz	r0, 80007e4 <conv_dec_to_char+0x34>
{
 80007b8:	b410      	push	{r4}
 80007ba:	e000      	b.n	80007be <conv_dec_to_char+0xe>
	for(int i = N - 1; (i > 0) && (value != 0); i--)
 80007bc:	b178      	cbz	r0, 80007de <conv_dec_to_char+0x2e>
		digits_array[i] = value % 10;
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <conv_dec_to_char+0x38>)
 80007c0:	fba3 4300 	umull	r4, r3, r3, r0
 80007c4:	08db      	lsrs	r3, r3, #3
 80007c6:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 80007ca:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
 80007ce:	b2c4      	uxtb	r4, r0
		value = value / 10;
 80007d0:	b2d8      	uxtb	r0, r3
		chars[i] = '0' + digits_array[i];
 80007d2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80007d6:	548b      	strb	r3, [r1, r2]
	for(int i = N - 1; (i > 0) && (value != 0); i--)
 80007d8:	3a01      	subs	r2, #1
 80007da:	2a00      	cmp	r2, #0
 80007dc:	dcee      	bgt.n	80007bc <conv_dec_to_char+0xc>
}
 80007de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	4770      	bx	lr
 80007e6:	4770      	bx	lr
 80007e8:	cccccccd 	.word	0xcccccccd

080007ec <rep_comb>:
{
 80007ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007f0:	4606      	mov	r6, r0
 80007f2:	460f      	mov	r7, r1
		for (uint8_t x = 0; x < 9; x++)
 80007f4:	2400      	movs	r4, #0
	uint8_t num_press = 0;
 80007f6:	4625      	mov	r5, r4
		for (uint8_t x = 0; x < 9; x++)
 80007f8:	e00e      	b.n	8000818 <rep_comb+0x2c>
				HAL_GPIO_WritePin(arr_led_port[x], arr_led_pin[x], 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <rep_comb+0x84>)
 80007fe:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <rep_comb+0x88>)
 8000804:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8000808:	f001 f881 	bl	800190e <HAL_GPIO_WritePin>
			if(x == 8)
 800080c:	2c08      	cmp	r4, #8
 800080e:	d029      	beq.n	8000864 <rep_comb+0x78>
			if(num_press == round)
 8000810:	42b5      	cmp	r5, r6
 8000812:	d029      	beq.n	8000868 <rep_comb+0x7c>
		for (uint8_t x = 0; x < 9; x++)
 8000814:	3401      	adds	r4, #1
 8000816:	b2e4      	uxtb	r4, r4
 8000818:	2c08      	cmp	r4, #8
 800081a:	d827      	bhi.n	800086c <rep_comb+0x80>
			if(HAL_GPIO_ReadPin(arr_but_port[x], arr_but_pin[x]) == 0)
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <rep_comb+0x8c>)
 800081e:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <rep_comb+0x90>)
 8000824:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8000828:	f001 f86a 	bl	8001900 <HAL_GPIO_ReadPin>
 800082c:	2800      	cmp	r0, #0
 800082e:	d1e4      	bne.n	80007fa <rep_comb+0xe>
				HAL_GPIO_WritePin(arr_led_port[x], arr_led_pin[x], 1);
 8000830:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8000870 <rep_comb+0x84>
 8000834:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8000874 <rep_comb+0x88>
 8000838:	2201      	movs	r2, #1
 800083a:	f839 1014 	ldrh.w	r1, [r9, r4, lsl #1]
 800083e:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8000842:	f001 f864 	bl	800190e <HAL_GPIO_WritePin>
				my_combination[num_press] = x ;
 8000846:	557c      	strb	r4, [r7, r5]
				num_press ++;
 8000848:	3501      	adds	r5, #1
 800084a:	b2ed      	uxtb	r5, r5
				HAL_Delay(500);
 800084c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000850:	f000 fee0 	bl	8001614 <HAL_Delay>
				HAL_GPIO_WritePin(arr_led_port[x], arr_led_pin[x], 0);
 8000854:	2200      	movs	r2, #0
 8000856:	f839 1014 	ldrh.w	r1, [r9, r4, lsl #1]
 800085a:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 800085e:	f001 f856 	bl	800190e <HAL_GPIO_WritePin>
 8000862:	e7d3      	b.n	800080c <rep_comb+0x20>
				x = 255;
 8000864:	24ff      	movs	r4, #255	; 0xff
 8000866:	e7d3      	b.n	8000810 <rep_comb+0x24>
				x = 9;
 8000868:	2409      	movs	r4, #9
 800086a:	e7d3      	b.n	8000814 <rep_comb+0x28>
}
 800086c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000870:	20000040 	.word	0x20000040
 8000874:	20000054 	.word	0x20000054
 8000878:	20000008 	.word	0x20000008
 800087c:	2000001c 	.word	0x2000001c

08000880 <examination>:
{
 8000880:	b430      	push	{r4, r5}
 8000882:	4604      	mov	r4, r0
	for (uint8_t i = 0; i < round; i++)
 8000884:	2300      	movs	r3, #0
	uint8_t result = 0;
 8000886:	4618      	mov	r0, r3
	for (uint8_t i = 0; i < round; i++)
 8000888:	e002      	b.n	8000890 <examination+0x10>
			result = 1;
 800088a:	2001      	movs	r0, #1
	for (uint8_t i = 0; i < round; i++)
 800088c:	3301      	adds	r3, #1
 800088e:	b2db      	uxtb	r3, r3
 8000890:	42a3      	cmp	r3, r4
 8000892:	d206      	bcs.n	80008a2 <examination+0x22>
		if(combination[i] != my_combination[i])
 8000894:	5ccd      	ldrb	r5, [r1, r3]
 8000896:	5cd0      	ldrb	r0, [r2, r3]
 8000898:	4285      	cmp	r5, r0
 800089a:	d0f6      	beq.n	800088a <examination+0xa>
			i = round;
 800089c:	4623      	mov	r3, r4
			result = 0;
 800089e:	2000      	movs	r0, #0
 80008a0:	e7f4      	b.n	800088c <examination+0xc>
}
 80008a2:	bc30      	pop	{r4, r5}
 80008a4:	4770      	bx	lr
	...

080008a8 <lose>:
{
 80008a8:	b570      	push	{r4, r5, r6, lr}
	for(uint8_t x = 0; x < 9; x++)
 80008aa:	2400      	movs	r4, #0
 80008ac:	e00a      	b.n	80008c4 <lose+0x1c>
		HAL_GPIO_WritePin(arr_led_port[x], arr_led_pin[x], 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <lose+0x54>)
 80008b2:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
 80008b6:	4b12      	ldr	r3, [pc, #72]	; (8000900 <lose+0x58>)
 80008b8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80008bc:	f001 f827 	bl	800190e <HAL_GPIO_WritePin>
	for(uint8_t x = 0; x < 9; x++)
 80008c0:	3401      	adds	r4, #1
 80008c2:	b2e4      	uxtb	r4, r4
 80008c4:	2c08      	cmp	r4, #8
 80008c6:	d9f2      	bls.n	80008ae <lose+0x6>
	for(uint8_t x = 0; x < 9; x++)
 80008c8:	2400      	movs	r4, #0
 80008ca:	e014      	b.n	80008f6 <lose+0x4e>
		HAL_GPIO_WritePin(arr_led_port[x], arr_led_pin[x], 1);
 80008cc:	4e0b      	ldr	r6, [pc, #44]	; (80008fc <lose+0x54>)
 80008ce:	4d0c      	ldr	r5, [pc, #48]	; (8000900 <lose+0x58>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 80008d6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80008da:	f001 f818 	bl	800190e <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80008de:	20c8      	movs	r0, #200	; 0xc8
 80008e0:	f000 fe98 	bl	8001614 <HAL_Delay>
		HAL_GPIO_WritePin(arr_led_port[x], arr_led_pin[x], 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 80008ea:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80008ee:	f001 f80e 	bl	800190e <HAL_GPIO_WritePin>
	for(uint8_t x = 0; x < 9; x++)
 80008f2:	3401      	adds	r4, #1
 80008f4:	b2e4      	uxtb	r4, r4
 80008f6:	2c08      	cmp	r4, #8
 80008f8:	d9e8      	bls.n	80008cc <lose+0x24>
}
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	20000040 	.word	0x20000040
 8000900:	20000054 	.word	0x20000054

08000904 <clear_screen>:
{
 8000904:	b500      	push	{lr}
 8000906:	b083      	sub	sp, #12
	SSD1306_DrawFilledRectangle(0, 0, 128, 64, 0);
 8000908:	2000      	movs	r0, #0
 800090a:	9000      	str	r0, [sp, #0]
 800090c:	2340      	movs	r3, #64	; 0x40
 800090e:	2280      	movs	r2, #128	; 0x80
 8000910:	4601      	mov	r1, r0
 8000912:	f000 fbd7 	bl	80010c4 <SSD1306_DrawFilledRectangle>
}
 8000916:	b003      	add	sp, #12
 8000918:	f85d fb04 	ldr.w	pc, [sp], #4

0800091c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800091e:	e7fe      	b.n	800091e <Error_Handler+0x2>

08000920 <MX_RNG_Init>:
{
 8000920:	b508      	push	{r3, lr}
  hrng.Instance = RNG;
 8000922:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_RNG_Init+0x14>)
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <MX_RNG_Init+0x18>)
 8000926:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000928:	f001 ff08 	bl	800273c <HAL_RNG_Init>
 800092c:	b900      	cbnz	r0, 8000930 <MX_RNG_Init+0x10>
}
 800092e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000930:	f7ff fff4 	bl	800091c <Error_Handler>
 8000934:	20000588 	.word	0x20000588
 8000938:	50060800 	.word	0x50060800

0800093c <MX_I2C1_Init>:
{
 800093c:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800093e:	4811      	ldr	r0, [pc, #68]	; (8000984 <MX_I2C1_Init+0x48>)
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_I2C1_Init+0x4c>)
 8000942:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_I2C1_Init+0x50>)
 8000946:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000948:	2300      	movs	r3, #0
 800094a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800094c:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800094e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000952:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000954:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000956:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000958:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800095c:	f001 f934 	bl	8001bc8 <HAL_I2C_Init>
 8000960:	b950      	cbnz	r0, 8000978 <MX_I2C1_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000962:	2100      	movs	r1, #0
 8000964:	4807      	ldr	r0, [pc, #28]	; (8000984 <MX_I2C1_Init+0x48>)
 8000966:	f001 fb93 	bl	8002090 <HAL_I2CEx_ConfigAnalogFilter>
 800096a:	b938      	cbnz	r0, 800097c <MX_I2C1_Init+0x40>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800096c:	2100      	movs	r1, #0
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_I2C1_Init+0x48>)
 8000970:	f001 fbb0 	bl	80020d4 <HAL_I2CEx_ConfigDigitalFilter>
 8000974:	b920      	cbnz	r0, 8000980 <MX_I2C1_Init+0x44>
}
 8000976:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000978:	f7ff ffd0 	bl	800091c <Error_Handler>
    Error_Handler();
 800097c:	f7ff ffce 	bl	800091c <Error_Handler>
    Error_Handler();
 8000980:	f7ff ffcc 	bl	800091c <Error_Handler>
 8000984:	20000534 	.word	0x20000534
 8000988:	40005400 	.word	0x40005400
 800098c:	00061a80 	.word	0x00061a80

08000990 <SystemClock_Config>:
{
 8000990:	b500      	push	{lr}
 8000992:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000994:	2230      	movs	r2, #48	; 0x30
 8000996:	2100      	movs	r1, #0
 8000998:	a808      	add	r0, sp, #32
 800099a:	f001 ff81 	bl	80028a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099e:	2300      	movs	r3, #0
 80009a0:	9303      	str	r3, [sp, #12]
 80009a2:	9304      	str	r3, [sp, #16]
 80009a4:	9305      	str	r3, [sp, #20]
 80009a6:	9306      	str	r3, [sp, #24]
 80009a8:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	9301      	str	r3, [sp, #4]
 80009ac:	4a1f      	ldr	r2, [pc, #124]	; (8000a2c <SystemClock_Config+0x9c>)
 80009ae:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80009b0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80009b4:	6411      	str	r1, [r2, #64]	; 0x40
 80009b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80009b8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80009bc:	9201      	str	r2, [sp, #4]
 80009be:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009c0:	9302      	str	r3, [sp, #8]
 80009c2:	491b      	ldr	r1, [pc, #108]	; (8000a30 <SystemClock_Config+0xa0>)
 80009c4:	680a      	ldr	r2, [r1, #0]
 80009c6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80009ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80009ce:	600a      	str	r2, [r1, #0]
 80009d0:	680a      	ldr	r2, [r1, #0]
 80009d2:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80009d6:	9202      	str	r2, [sp, #8]
 80009d8:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009da:	2202      	movs	r2, #2
 80009dc:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009de:	2101      	movs	r1, #1
 80009e0:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e2:	2110      	movs	r1, #16
 80009e4:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e6:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009ea:	2308      	movs	r3, #8
 80009ec:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80009ee:	2348      	movs	r3, #72	; 0x48
 80009f0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f2:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80009f4:	2303      	movs	r3, #3
 80009f6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f8:	a808      	add	r0, sp, #32
 80009fa:	f001 fb8d 	bl	8002118 <HAL_RCC_OscConfig>
 80009fe:	b980      	cbnz	r0, 8000a22 <SystemClock_Config+0x92>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a00:	230f      	movs	r3, #15
 8000a02:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a04:	2102      	movs	r1, #2
 8000a06:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a10:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a12:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a14:	a803      	add	r0, sp, #12
 8000a16:	f001 fdcb 	bl	80025b0 <HAL_RCC_ClockConfig>
 8000a1a:	b920      	cbnz	r0, 8000a26 <SystemClock_Config+0x96>
}
 8000a1c:	b015      	add	sp, #84	; 0x54
 8000a1e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000a22:	f7ff ff7b 	bl	800091c <Error_Handler>
    Error_Handler();
 8000a26:	f7ff ff79 	bl	800091c <Error_Handler>
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40007000 	.word	0x40007000

08000a34 <main>:
{
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 8000a3a:	f000 fdbf 	bl	80015bc <HAL_Init>
  SystemClock_Config();
 8000a3e:	f7ff ffa7 	bl	8000990 <SystemClock_Config>
  MX_GPIO_Init();
 8000a42:	f7ff fda1 	bl	8000588 <MX_GPIO_Init>
  MX_RNG_Init();
 8000a46:	f7ff ff6b 	bl	8000920 <MX_RNG_Init>
  MX_I2C1_Init();
 8000a4a:	f7ff ff77 	bl	800093c <MX_I2C1_Init>
  	  SSD1306_Init();
 8000a4e:	f000 fbbf 	bl	80011d0 <SSD1306_Init>
  	clear_screen();
 8000a52:	f7ff ff57 	bl	8000904 <clear_screen>
	SSD1306_DrawFilledRectangle(0, 0, 128, 64, 0);
 8000a56:	2500      	movs	r5, #0
 8000a58:	9500      	str	r5, [sp, #0]
 8000a5a:	2340      	movs	r3, #64	; 0x40
 8000a5c:	2280      	movs	r2, #128	; 0x80
 8000a5e:	4629      	mov	r1, r5
 8000a60:	4628      	mov	r0, r5
 8000a62:	f000 fb2f 	bl	80010c4 <SSD1306_DrawFilledRectangle>
	SSD1306_DrawBitmap(0, 0, logo_nasa, 128, 64, 1);
 8000a66:	2701      	movs	r7, #1
 8000a68:	9701      	str	r7, [sp, #4]
 8000a6a:	2340      	movs	r3, #64	; 0x40
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	4ac3      	ldr	r2, [pc, #780]	; (8000d80 <main+0x34c>)
 8000a72:	4629      	mov	r1, r5
 8000a74:	4628      	mov	r0, r5
 8000a76:	f000 f9d7 	bl	8000e28 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 8000a7a:	f000 fb85 	bl	8001188 <SSD1306_UpdateScreen>
	HAL_Delay(2000);
 8000a7e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a82:	f000 fdc7 	bl	8001614 <HAL_Delay>
	uint8_t combination[20]    = {0};
 8000a86:	9509      	str	r5, [sp, #36]	; 0x24
 8000a88:	950a      	str	r5, [sp, #40]	; 0x28
 8000a8a:	950b      	str	r5, [sp, #44]	; 0x2c
 8000a8c:	950c      	str	r5, [sp, #48]	; 0x30
 8000a8e:	950d      	str	r5, [sp, #52]	; 0x34
	uint8_t my_combination[20] = {0};
 8000a90:	9504      	str	r5, [sp, #16]
 8000a92:	9505      	str	r5, [sp, #20]
 8000a94:	9506      	str	r5, [sp, #24]
 8000a96:	9507      	str	r5, [sp, #28]
 8000a98:	9508      	str	r5, [sp, #32]
	skill_c = (char *) malloc(2);
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	f001 fef8 	bl	8002890 <malloc>
 8000aa0:	4604      	mov	r4, r0
 8000aa2:	f8df 8310 	ldr.w	r8, [pc, #784]	; 8000db4 <main+0x380>
 8000aa6:	f8c8 0000 	str.w	r0, [r8]
	force_c = (char *) malloc(2);
 8000aaa:	2002      	movs	r0, #2
 8000aac:	f001 fef0 	bl	8002890 <malloc>
 8000ab0:	4eb4      	ldr	r6, [pc, #720]	; (8000d84 <main+0x350>)
 8000ab2:	6030      	str	r0, [r6, #0]
	mind_c =  (char *) malloc(2);
 8000ab4:	2002      	movs	r0, #2
 8000ab6:	f001 feeb 	bl	8002890 <malloc>
 8000aba:	4ab3      	ldr	r2, [pc, #716]	; (8000d88 <main+0x354>)
 8000abc:	6010      	str	r0, [r2, #0]
	skill_c[0] = '0';
 8000abe:	2330      	movs	r3, #48	; 0x30
 8000ac0:	7023      	strb	r3, [r4, #0]
	skill_c[1] = '0';
 8000ac2:	f8d8 1000 	ldr.w	r1, [r8]
 8000ac6:	704b      	strb	r3, [r1, #1]
	force_c[0] = '0';
 8000ac8:	6831      	ldr	r1, [r6, #0]
 8000aca:	700b      	strb	r3, [r1, #0]
	force_c[1] = '0';
 8000acc:	6831      	ldr	r1, [r6, #0]
 8000ace:	704b      	strb	r3, [r1, #1]
	mind_c[0] = '0';
 8000ad0:	6811      	ldr	r1, [r2, #0]
 8000ad2:	700b      	strb	r3, [r1, #0]
	mind_c[1] = '0';
 8000ad4:	6812      	ldr	r2, [r2, #0]
 8000ad6:	7053      	strb	r3, [r2, #1]
 8000ad8:	e145      	b.n	8000d66 <main+0x332>
		if(pos_cosm == 10) is_up = 0;
 8000ada:	2700      	movs	r7, #0
 8000adc:	e146      	b.n	8000d6c <main+0x338>
		if(pos_cosm == 0) is_up = 1;
 8000ade:	2701      	movs	r7, #1
		if(is_up == 1) pos_cosm++;
 8000ae0:	3501      	adds	r5, #1
 8000ae2:	b2ed      	uxtb	r5, r5
		SSD1306_DrawFilledRectangle(0, 0, 128, 64, 0);
 8000ae4:	2400      	movs	r4, #0
 8000ae6:	9400      	str	r4, [sp, #0]
 8000ae8:	2340      	movs	r3, #64	; 0x40
 8000aea:	2280      	movs	r2, #128	; 0x80
 8000aec:	4621      	mov	r1, r4
 8000aee:	4620      	mov	r0, r4
 8000af0:	f000 fae8 	bl	80010c4 <SSD1306_DrawFilledRectangle>
		SSD1306_DrawBitmap(0, 0, move_cosmo[pos_cosm], 128, 64, 1);
 8000af4:	4ea5      	ldr	r6, [pc, #660]	; (8000d8c <main+0x358>)
 8000af6:	eb06 2685 	add.w	r6, r6, r5, lsl #10
 8000afa:	2301      	movs	r3, #1
 8000afc:	9301      	str	r3, [sp, #4]
 8000afe:	2340      	movs	r3, #64	; 0x40
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	4632      	mov	r2, r6
 8000b06:	4621      	mov	r1, r4
 8000b08:	4620      	mov	r0, r4
 8000b0a:	f000 f98d 	bl	8000e28 <SSD1306_DrawBitmap>
		if(HAL_GPIO_ReadPin(GPIOC,  GPIO_PIN_13) == 1)
 8000b0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b12:	489f      	ldr	r0, [pc, #636]	; (8000d90 <main+0x35c>)
 8000b14:	f000 fef4 	bl	8001900 <HAL_GPIO_ReadPin>
 8000b18:	4604      	mov	r4, r0
 8000b1a:	2801      	cmp	r0, #1
 8000b1c:	f040 80e0 	bne.w	8000ce0 <main+0x2ac>
			char score_now_c [2] = {'0', '0'};
 8000b20:	f243 0330 	movw	r3, #12336	; 0x3030
 8000b24:	f8ad 300c 	strh.w	r3, [sp, #12]
			uint8_t score_now = 0;
 8000b28:	f04f 0800 	mov.w	r8, #0
			while(round!=0)
 8000b2c:	e076      	b.n	8000c1c <main+0x1e8>
					SSD1306_DrawFilledRectangle(0, 0, 128, 64, 0);
 8000b2e:	f04f 0900 	mov.w	r9, #0
 8000b32:	f8cd 9000 	str.w	r9, [sp]
 8000b36:	2340      	movs	r3, #64	; 0x40
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	4649      	mov	r1, r9
 8000b3c:	4648      	mov	r0, r9
 8000b3e:	f000 fac1 	bl	80010c4 <SSD1306_DrawFilledRectangle>
					SSD1306_DrawBitmap(0, 0, lamp[0], 128, 64, 1);
 8000b42:	f04f 0a01 	mov.w	sl, #1
 8000b46:	f8cd a004 	str.w	sl, [sp, #4]
 8000b4a:	2340      	movs	r3, #64	; 0x40
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	2380      	movs	r3, #128	; 0x80
 8000b50:	4a90      	ldr	r2, [pc, #576]	; (8000d94 <main+0x360>)
 8000b52:	4649      	mov	r1, r9
 8000b54:	4648      	mov	r0, r9
 8000b56:	f000 f967 	bl	8000e28 <SSD1306_DrawBitmap>
					SSD1306_GotoXY(110, 14);
 8000b5a:	210e      	movs	r1, #14
 8000b5c:	206e      	movs	r0, #110	; 0x6e
 8000b5e:	f000 f9ad 	bl	8000ebc <SSD1306_GotoXY>
					SSD1306_Puts(score_now_c, &Font_7x10, 1);
 8000b62:	4652      	mov	r2, sl
 8000b64:	498c      	ldr	r1, [pc, #560]	; (8000d98 <main+0x364>)
 8000b66:	a803      	add	r0, sp, #12
 8000b68:	f000 f9fc 	bl	8000f64 <SSD1306_Puts>
					SSD1306_UpdateScreen();
 8000b6c:	f000 fb0c 	bl	8001188 <SSD1306_UpdateScreen>
 8000b70:	e075      	b.n	8000c5e <main+0x22a>
					SSD1306_DrawFilledRectangle(0, 0, 128, 64, 0);
 8000b72:	f04f 0900 	mov.w	r9, #0
 8000b76:	f8cd 9000 	str.w	r9, [sp]
 8000b7a:	2340      	movs	r3, #64	; 0x40
 8000b7c:	2280      	movs	r2, #128	; 0x80
 8000b7e:	4649      	mov	r1, r9
 8000b80:	4648      	mov	r0, r9
 8000b82:	f000 fa9f 	bl	80010c4 <SSD1306_DrawFilledRectangle>
					SSD1306_DrawBitmap(0, 0, lamp[1], 128, 64, 1);
 8000b86:	f04f 0a01 	mov.w	sl, #1
 8000b8a:	f8cd a004 	str.w	sl, [sp, #4]
 8000b8e:	2340      	movs	r3, #64	; 0x40
 8000b90:	9300      	str	r3, [sp, #0]
 8000b92:	2380      	movs	r3, #128	; 0x80
 8000b94:	4a81      	ldr	r2, [pc, #516]	; (8000d9c <main+0x368>)
 8000b96:	4649      	mov	r1, r9
 8000b98:	4648      	mov	r0, r9
 8000b9a:	f000 f945 	bl	8000e28 <SSD1306_DrawBitmap>
					SSD1306_GotoXY(110, 14);
 8000b9e:	210e      	movs	r1, #14
 8000ba0:	206e      	movs	r0, #110	; 0x6e
 8000ba2:	f000 f98b 	bl	8000ebc <SSD1306_GotoXY>
					SSD1306_Puts(score_now_c, &Font_7x10, 1);
 8000ba6:	4652      	mov	r2, sl
 8000ba8:	497b      	ldr	r1, [pc, #492]	; (8000d98 <main+0x364>)
 8000baa:	a803      	add	r0, sp, #12
 8000bac:	f000 f9da 	bl	8000f64 <SSD1306_Puts>
					SSD1306_UpdateScreen();
 8000bb0:	f000 faea 	bl	8001188 <SSD1306_UpdateScreen>
 8000bb4:	e055      	b.n	8000c62 <main+0x22e>
					SSD1306_DrawFilledRectangle(0, 0, 128, 64, 0);
 8000bb6:	f04f 0900 	mov.w	r9, #0
 8000bba:	f8cd 9000 	str.w	r9, [sp]
 8000bbe:	2340      	movs	r3, #64	; 0x40
 8000bc0:	2280      	movs	r2, #128	; 0x80
 8000bc2:	4649      	mov	r1, r9
 8000bc4:	4648      	mov	r0, r9
 8000bc6:	f000 fa7d 	bl	80010c4 <SSD1306_DrawFilledRectangle>
					SSD1306_DrawBitmap(0, 0, lamp[2], 128, 64, 1);
 8000bca:	f04f 0a01 	mov.w	sl, #1
 8000bce:	f8cd a004 	str.w	sl, [sp, #4]
 8000bd2:	2340      	movs	r3, #64	; 0x40
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	4a71      	ldr	r2, [pc, #452]	; (8000da0 <main+0x36c>)
 8000bda:	4649      	mov	r1, r9
 8000bdc:	4648      	mov	r0, r9
 8000bde:	f000 f923 	bl	8000e28 <SSD1306_DrawBitmap>
					SSD1306_GotoXY(110, 14);
 8000be2:	210e      	movs	r1, #14
 8000be4:	206e      	movs	r0, #110	; 0x6e
 8000be6:	f000 f969 	bl	8000ebc <SSD1306_GotoXY>
					SSD1306_Puts(score_now_c, &Font_7x10, 1);
 8000bea:	4652      	mov	r2, sl
 8000bec:	496a      	ldr	r1, [pc, #424]	; (8000d98 <main+0x364>)
 8000bee:	a803      	add	r0, sp, #12
 8000bf0:	f000 f9b8 	bl	8000f64 <SSD1306_Puts>
					SSD1306_UpdateScreen();
 8000bf4:	f000 fac8 	bl	8001188 <SSD1306_UpdateScreen>
				rand_comb(round, combination);
 8000bf8:	a909      	add	r1, sp, #36	; 0x24
 8000bfa:	4620      	mov	r0, r4
 8000bfc:	f7ff fd92 	bl	8000724 <rand_comb>
				rep_comb(round,  my_combination);
 8000c00:	a904      	add	r1, sp, #16
 8000c02:	4620      	mov	r0, r4
 8000c04:	f7ff fdf2 	bl	80007ec <rep_comb>
				result = examination(round, combination, my_combination);
 8000c08:	aa04      	add	r2, sp, #16
 8000c0a:	a909      	add	r1, sp, #36	; 0x24
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	f7ff fe37 	bl	8000880 <examination>
				if(result == 0)
 8000c12:	f010 0fff 	tst.w	r0, #255	; 0xff
 8000c16:	d027      	beq.n	8000c68 <main+0x234>
				else round ++;
 8000c18:	3401      	adds	r4, #1
 8000c1a:	b2e4      	uxtb	r4, r4
			while(round!=0)
 8000c1c:	2c00      	cmp	r4, #0
 8000c1e:	d04b      	beq.n	8000cb8 <main+0x284>
				conv_dec_to_char(score_now, score_now_c, 2);
 8000c20:	2202      	movs	r2, #2
 8000c22:	a903      	add	r1, sp, #12
 8000c24:	4640      	mov	r0, r8
 8000c26:	f7ff fdc3 	bl	80007b0 <conv_dec_to_char>
				SSD1306_DrawFilledRectangle(110, 14, 18, 13, 0);
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	230d      	movs	r3, #13
 8000c30:	2212      	movs	r2, #18
 8000c32:	210e      	movs	r1, #14
 8000c34:	206e      	movs	r0, #110	; 0x6e
 8000c36:	f000 fa45 	bl	80010c4 <SSD1306_DrawFilledRectangle>
				SSD1306_GotoXY(110, 14);
 8000c3a:	210e      	movs	r1, #14
 8000c3c:	206e      	movs	r0, #110	; 0x6e
 8000c3e:	f000 f93d 	bl	8000ebc <SSD1306_GotoXY>
				SSD1306_Puts(score_now_c, &Font_7x10, 1);
 8000c42:	2201      	movs	r2, #1
 8000c44:	4954      	ldr	r1, [pc, #336]	; (8000d98 <main+0x364>)
 8000c46:	a803      	add	r0, sp, #12
 8000c48:	f000 f98c 	bl	8000f64 <SSD1306_Puts>
				SSD1306_UpdateScreen();
 8000c4c:	f000 fa9c 	bl	8001188 <SSD1306_UpdateScreen>
				score_now++;
 8000c50:	f108 0001 	add.w	r0, r8, #1
 8000c54:	fa5f f880 	uxtb.w	r8, r0
				if(round == 1)
 8000c58:	2c01      	cmp	r4, #1
 8000c5a:	f43f af68 	beq.w	8000b2e <main+0xfa>
				if(round == 2)
 8000c5e:	2c02      	cmp	r4, #2
 8000c60:	d087      	beq.n	8000b72 <main+0x13e>
				if(round == 4)
 8000c62:	2c04      	cmp	r4, #4
 8000c64:	d1c8      	bne.n	8000bf8 <main+0x1c4>
 8000c66:	e7a6      	b.n	8000bb6 <main+0x182>
					SSD1306_DrawFilledRectangle(0, 0, 128, 64, 0);
 8000c68:	f04f 0800 	mov.w	r8, #0
 8000c6c:	f8cd 8000 	str.w	r8, [sp]
 8000c70:	2340      	movs	r3, #64	; 0x40
 8000c72:	2280      	movs	r2, #128	; 0x80
 8000c74:	4641      	mov	r1, r8
 8000c76:	4640      	mov	r0, r8
 8000c78:	f000 fa24 	bl	80010c4 <SSD1306_DrawFilledRectangle>
					SSD1306_DrawBitmap(0, 0, damage_lamp, 128, 64, 1);
 8000c7c:	f04f 0901 	mov.w	r9, #1
 8000c80:	f8cd 9004 	str.w	r9, [sp, #4]
 8000c84:	2340      	movs	r3, #64	; 0x40
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	4a46      	ldr	r2, [pc, #280]	; (8000da4 <main+0x370>)
 8000c8c:	4641      	mov	r1, r8
 8000c8e:	4640      	mov	r0, r8
 8000c90:	f000 f8ca 	bl	8000e28 <SSD1306_DrawBitmap>
					SSD1306_GotoXY(110, 14);
 8000c94:	210e      	movs	r1, #14
 8000c96:	206e      	movs	r0, #110	; 0x6e
 8000c98:	f000 f910 	bl	8000ebc <SSD1306_GotoXY>
					SSD1306_Puts(score_now_c, &Font_7x10, 1);
 8000c9c:	464a      	mov	r2, r9
 8000c9e:	493e      	ldr	r1, [pc, #248]	; (8000d98 <main+0x364>)
 8000ca0:	a803      	add	r0, sp, #12
 8000ca2:	f000 f95f 	bl	8000f64 <SSD1306_Puts>
					SSD1306_UpdateScreen();
 8000ca6:	f000 fa6f 	bl	8001188 <SSD1306_UpdateScreen>
					mind+=round-1;
 8000caa:	4b3f      	ldr	r3, [pc, #252]	; (8000da8 <main+0x374>)
 8000cac:	781a      	ldrb	r2, [r3, #0]
 8000cae:	4414      	add	r4, r2
 8000cb0:	3c01      	subs	r4, #1
 8000cb2:	701c      	strb	r4, [r3, #0]
					lose();
 8000cb4:	f7ff fdf8 	bl	80008a8 <lose>
			SSD1306_DrawFilledRectangle(0, 0, 128, 64, 0);
 8000cb8:	2400      	movs	r4, #0
 8000cba:	9400      	str	r4, [sp, #0]
 8000cbc:	2340      	movs	r3, #64	; 0x40
 8000cbe:	2280      	movs	r2, #128	; 0x80
 8000cc0:	4621      	mov	r1, r4
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	f000 f9fe 	bl	80010c4 <SSD1306_DrawFilledRectangle>
			SSD1306_DrawBitmap(0, 0, move_cosmo[pos_cosm], 128, 64, 1);
 8000cc8:	2301      	movs	r3, #1
 8000cca:	9301      	str	r3, [sp, #4]
 8000ccc:	2340      	movs	r3, #64	; 0x40
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	4632      	mov	r2, r6
 8000cd4:	4621      	mov	r1, r4
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	f000 f8a6 	bl	8000e28 <SSD1306_DrawBitmap>
			SSD1306_UpdateScreen();
 8000cdc:	f000 fa54 	bl	8001188 <SSD1306_UpdateScreen>
		SSD1306_DrawFilledRectangle(108, 0, 20, 38, 0);
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	9100      	str	r1, [sp, #0]
 8000ce4:	2326      	movs	r3, #38	; 0x26
 8000ce6:	2214      	movs	r2, #20
 8000ce8:	206c      	movs	r0, #108	; 0x6c
 8000cea:	f000 f9eb 	bl	80010c4 <SSD1306_DrawFilledRectangle>
		conv_dec_to_char(force,  force_c, 2);
 8000cee:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8000d84 <main+0x350>
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	f8d9 1000 	ldr.w	r1, [r9]
 8000cf8:	4b2c      	ldr	r3, [pc, #176]	; (8000dac <main+0x378>)
 8000cfa:	7818      	ldrb	r0, [r3, #0]
 8000cfc:	f7ff fd58 	bl	80007b0 <conv_dec_to_char>
		conv_dec_to_char(skill,  skill_c, 2);
 8000d00:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8000db4 <main+0x380>
 8000d04:	2202      	movs	r2, #2
 8000d06:	f8d8 1000 	ldr.w	r1, [r8]
 8000d0a:	4b29      	ldr	r3, [pc, #164]	; (8000db0 <main+0x37c>)
 8000d0c:	7818      	ldrb	r0, [r3, #0]
 8000d0e:	f7ff fd4f 	bl	80007b0 <conv_dec_to_char>
		conv_dec_to_char(mind,  mind_c, 2);
 8000d12:	4e1d      	ldr	r6, [pc, #116]	; (8000d88 <main+0x354>)
 8000d14:	2202      	movs	r2, #2
 8000d16:	6831      	ldr	r1, [r6, #0]
 8000d18:	4b23      	ldr	r3, [pc, #140]	; (8000da8 <main+0x374>)
 8000d1a:	7818      	ldrb	r0, [r3, #0]
 8000d1c:	f7ff fd48 	bl	80007b0 <conv_dec_to_char>
		SSD1306_GotoXY(110, 2);
 8000d20:	2102      	movs	r1, #2
 8000d22:	206e      	movs	r0, #110	; 0x6e
 8000d24:	f000 f8ca 	bl	8000ebc <SSD1306_GotoXY>
		SSD1306_Puts(force_c, &Font_7x10, 1);
 8000d28:	4c1b      	ldr	r4, [pc, #108]	; (8000d98 <main+0x364>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4621      	mov	r1, r4
 8000d2e:	f8d9 0000 	ldr.w	r0, [r9]
 8000d32:	f000 f917 	bl	8000f64 <SSD1306_Puts>
		SSD1306_GotoXY(110, 14);
 8000d36:	210e      	movs	r1, #14
 8000d38:	206e      	movs	r0, #110	; 0x6e
 8000d3a:	f000 f8bf 	bl	8000ebc <SSD1306_GotoXY>
		SSD1306_Puts(skill_c, &Font_7x10, 1);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4621      	mov	r1, r4
 8000d42:	f8d8 0000 	ldr.w	r0, [r8]
 8000d46:	f000 f90d 	bl	8000f64 <SSD1306_Puts>
		SSD1306_GotoXY(110, 26);
 8000d4a:	211a      	movs	r1, #26
 8000d4c:	206e      	movs	r0, #110	; 0x6e
 8000d4e:	f000 f8b5 	bl	8000ebc <SSD1306_GotoXY>
		SSD1306_Puts(mind_c, &Font_7x10, 1);
 8000d52:	2201      	movs	r2, #1
 8000d54:	4621      	mov	r1, r4
 8000d56:	6830      	ldr	r0, [r6, #0]
 8000d58:	f000 f904 	bl	8000f64 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000d5c:	f000 fa14 	bl	8001188 <SSD1306_UpdateScreen>
		HAL_Delay(100);
 8000d60:	2064      	movs	r0, #100	; 0x64
 8000d62:	f000 fc57 	bl	8001614 <HAL_Delay>
		if(pos_cosm == 10) is_up = 0;
 8000d66:	2d0a      	cmp	r5, #10
 8000d68:	f43f aeb7 	beq.w	8000ada <main+0xa6>
		if(pos_cosm == 0) is_up = 1;
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	f43f aeb6 	beq.w	8000ade <main+0xaa>
		if(is_up == 1) pos_cosm++;
 8000d72:	2f00      	cmp	r7, #0
 8000d74:	f47f aeb4 	bne.w	8000ae0 <main+0xac>
			else pos_cosm--;
 8000d78:	3d01      	subs	r5, #1
 8000d7a:	b2ed      	uxtb	r5, r5
 8000d7c:	e6b2      	b.n	8000ae4 <main+0xb0>
 8000d7e:	bf00      	nop
 8000d80:	08005090 	.word	0x08005090
 8000d84:	20000108 	.word	0x20000108
 8000d88:	20000110 	.word	0x20000110
 8000d8c:	08005490 	.word	0x08005490
 8000d90:	40020800 	.word	0x40020800
 8000d94:	08004484 	.word	0x08004484
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	08004888 	.word	0x08004888
 8000da0:	08004c8c 	.word	0x08004c8c
 8000da4:	08004084 	.word	0x08004084
 8000da8:	2000010c 	.word	0x2000010c
 8000dac:	20000104 	.word	0x20000104
 8000db0:	20000114 	.word	0x20000114
 8000db4:	20000118 	.word	0x20000118

08000db8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000db8:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000dba:	b930      	cbnz	r0, 8000dca <SSD1306_Fill+0x12>
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dc2:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <SSD1306_Fill+0x18>)
 8000dc4:	f001 fd6c 	bl	80028a0 <memset>
}
 8000dc8:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000dca:	21ff      	movs	r1, #255	; 0xff
 8000dcc:	e7f7      	b.n	8000dbe <SSD1306_Fill+0x6>
 8000dce:	bf00      	nop
 8000dd0:	20000124 	.word	0x20000124

08000dd4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 8000dd4:	287f      	cmp	r0, #127	; 0x7f
 8000dd6:	d815      	bhi.n	8000e04 <SSD1306_DrawPixel+0x30>
		x >= SSD1306_WIDTH ||
 8000dd8:	293f      	cmp	r1, #63	; 0x3f
 8000dda:	d813      	bhi.n	8000e04 <SSD1306_DrawPixel+0x30>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000ddc:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <SSD1306_DrawPixel+0x4c>)
 8000dde:	791b      	ldrb	r3, [r3, #4]
 8000de0:	b113      	cbz	r3, 8000de8 <SSD1306_DrawPixel+0x14>
		color = (SSD1306_COLOR_t)!color;
 8000de2:	fab2 f282 	clz	r2, r2
 8000de6:	0952      	lsrs	r2, r2, #5
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000de8:	2a01      	cmp	r2, #1
 8000dea:	d00c      	beq.n	8000e06 <SSD1306_DrawPixel+0x32>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000dec:	08cb      	lsrs	r3, r1, #3
 8000dee:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8000df2:	f001 0107 	and.w	r1, r1, #7
 8000df6:	2301      	movs	r3, #1
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <SSD1306_DrawPixel+0x50>)
 8000dfc:	5c11      	ldrb	r1, [r2, r0]
 8000dfe:	ea21 0103 	bic.w	r1, r1, r3
 8000e02:	5411      	strb	r1, [r2, r0]
	}
}
 8000e04:	4770      	bx	lr
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e06:	08cb      	lsrs	r3, r1, #3
 8000e08:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8000e0c:	f001 0107 	and.w	r1, r1, #7
 8000e10:	2301      	movs	r3, #1
 8000e12:	408b      	lsls	r3, r1
 8000e14:	4a03      	ldr	r2, [pc, #12]	; (8000e24 <SSD1306_DrawPixel+0x50>)
 8000e16:	5c11      	ldrb	r1, [r2, r0]
 8000e18:	4319      	orrs	r1, r3
 8000e1a:	5411      	strb	r1, [r2, r0]
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	2000011c 	.word	0x2000011c
 8000e24:	20000124 	.word	0x20000124

08000e28 <SSD1306_DrawBitmap>:
{
 8000e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	4683      	mov	fp, r0
 8000e30:	4688      	mov	r8, r1
 8000e32:	4692      	mov	sl, r2
 8000e34:	461e      	mov	r6, r3
 8000e36:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8000e3a:	9301      	str	r3, [sp, #4]
 8000e3c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8000e40:	9300      	str	r3, [sp, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000e42:	f116 0907 	adds.w	r9, r6, #7
 8000e46:	d404      	bmi.n	8000e52 <SSD1306_DrawBitmap+0x2a>
 8000e48:	ea4f 09e9 	mov.w	r9, r9, asr #3
    for(int16_t j=0; j<h; j++, y++)
 8000e4c:	2700      	movs	r7, #0
    uint8_t byte = 0;
 8000e4e:	463d      	mov	r5, r7
    for(int16_t j=0; j<h; j++, y++)
 8000e50:	e02c      	b.n	8000eac <SSD1306_DrawBitmap+0x84>
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000e52:	f109 0907 	add.w	r9, r9, #7
 8000e56:	e7f7      	b.n	8000e48 <SSD1306_DrawBitmap+0x20>
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000e58:	fb09 f107 	mul.w	r1, r9, r7
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	db12      	blt.n	8000e88 <SSD1306_DrawBitmap+0x60>
 8000e62:	f342 02cf 	sbfx	r2, r2, #3, #16
 8000e66:	440a      	add	r2, r1
 8000e68:	f81a 5002 	ldrb.w	r5, [sl, r2]
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000e6c:	f015 0f80 	tst.w	r5, #128	; 0x80
 8000e70:	d10c      	bne.n	8000e8c <SSD1306_DrawBitmap+0x64>
        for(int16_t i=0; i<w; i++)
 8000e72:	3401      	adds	r4, #1
 8000e74:	b223      	sxth	r3, r4
 8000e76:	42b3      	cmp	r3, r6
 8000e78:	da12      	bge.n	8000ea0 <SSD1306_DrawBitmap+0x78>
            if(i & 7)
 8000e7a:	b29c      	uxth	r4, r3
 8000e7c:	f013 0f07 	tst.w	r3, #7
 8000e80:	d0ea      	beq.n	8000e58 <SSD1306_DrawBitmap+0x30>
               byte <<= 1;
 8000e82:	006d      	lsls	r5, r5, #1
 8000e84:	b2ed      	uxtb	r5, r5
 8000e86:	e7f1      	b.n	8000e6c <SSD1306_DrawBitmap+0x44>
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000e88:	1dda      	adds	r2, r3, #7
 8000e8a:	e7ea      	b.n	8000e62 <SSD1306_DrawBitmap+0x3a>
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000e8c:	eb04 000b 	add.w	r0, r4, fp
 8000e90:	f89d 2000 	ldrb.w	r2, [sp]
 8000e94:	fa1f f188 	uxth.w	r1, r8
 8000e98:	b280      	uxth	r0, r0
 8000e9a:	f7ff ff9b 	bl	8000dd4 <SSD1306_DrawPixel>
 8000e9e:	e7e8      	b.n	8000e72 <SSD1306_DrawBitmap+0x4a>
    for(int16_t j=0; j<h; j++, y++)
 8000ea0:	3701      	adds	r7, #1
 8000ea2:	b23f      	sxth	r7, r7
 8000ea4:	f108 0801 	add.w	r8, r8, #1
 8000ea8:	fa0f f888 	sxth.w	r8, r8
 8000eac:	9b01      	ldr	r3, [sp, #4]
 8000eae:	429f      	cmp	r7, r3
 8000eb0:	da01      	bge.n	8000eb6 <SSD1306_DrawBitmap+0x8e>
        for(int16_t i=0; i<w; i++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e7df      	b.n	8000e76 <SSD1306_DrawBitmap+0x4e>
}
 8000eb6:	b003      	add	sp, #12
 8000eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000ebc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000ebc:	4b01      	ldr	r3, [pc, #4]	; (8000ec4 <SSD1306_GotoXY+0x8>)
 8000ebe:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8000ec0:	8059      	strh	r1, [r3, #2]
}
 8000ec2:	4770      	bx	lr
 8000ec4:	2000011c 	.word	0x2000011c

08000ec8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ecc:	4690      	mov	r8, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ece:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <SSD1306_Putc+0x98>)
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	780a      	ldrb	r2, [r1, #0]
 8000ed4:	4413      	add	r3, r2
	if (
 8000ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ed8:	dc3e      	bgt.n	8000f58 <SSD1306_Putc+0x90>
 8000eda:	4681      	mov	r9, r0
 8000edc:	460d      	mov	r5, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <SSD1306_Putc+0x98>)
 8000ee0:	885b      	ldrh	r3, [r3, #2]
 8000ee2:	784a      	ldrb	r2, [r1, #1]
 8000ee4:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ee6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ee8:	dc38      	bgt.n	8000f5c <SSD1306_Putc+0x94>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000eea:	2600      	movs	r6, #0
 8000eec:	e020      	b.n	8000f30 <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000eee:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <SSD1306_Putc+0x98>)
 8000ef0:	8818      	ldrh	r0, [r3, #0]
 8000ef2:	8859      	ldrh	r1, [r3, #2]
 8000ef4:	4431      	add	r1, r6
 8000ef6:	4420      	add	r0, r4
 8000ef8:	fab8 f288 	clz	r2, r8
 8000efc:	0952      	lsrs	r2, r2, #5
 8000efe:	b289      	uxth	r1, r1
 8000f00:	b280      	uxth	r0, r0
 8000f02:	f7ff ff67 	bl	8000dd4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000f06:	3401      	adds	r4, #1
 8000f08:	782b      	ldrb	r3, [r5, #0]
 8000f0a:	42a3      	cmp	r3, r4
 8000f0c:	d90f      	bls.n	8000f2e <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 8000f0e:	fa07 f304 	lsl.w	r3, r7, r4
 8000f12:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000f16:	d0ea      	beq.n	8000eee <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <SSD1306_Putc+0x98>)
 8000f1a:	8818      	ldrh	r0, [r3, #0]
 8000f1c:	8859      	ldrh	r1, [r3, #2]
 8000f1e:	4431      	add	r1, r6
 8000f20:	4420      	add	r0, r4
 8000f22:	4642      	mov	r2, r8
 8000f24:	b289      	uxth	r1, r1
 8000f26:	b280      	uxth	r0, r0
 8000f28:	f7ff ff54 	bl	8000dd4 <SSD1306_DrawPixel>
 8000f2c:	e7eb      	b.n	8000f06 <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000f2e:	3601      	adds	r6, #1
 8000f30:	786a      	ldrb	r2, [r5, #1]
 8000f32:	42b2      	cmp	r2, r6
 8000f34:	d908      	bls.n	8000f48 <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000f36:	6869      	ldr	r1, [r5, #4]
 8000f38:	f1a9 0320 	sub.w	r3, r9, #32
 8000f3c:	fb02 6303 	mla	r3, r2, r3, r6
 8000f40:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8000f44:	2400      	movs	r4, #0
 8000f46:	e7df      	b.n	8000f08 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000f48:	782b      	ldrb	r3, [r5, #0]
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <SSD1306_Putc+0x98>)
 8000f4c:	8811      	ldrh	r1, [r2, #0]
 8000f4e:	440b      	add	r3, r1
 8000f50:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 8000f52:	4648      	mov	r0, r9
}
 8000f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 8000f58:	2000      	movs	r0, #0
 8000f5a:	e7fb      	b.n	8000f54 <SSD1306_Putc+0x8c>
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	e7f9      	b.n	8000f54 <SSD1306_Putc+0x8c>
 8000f60:	2000011c 	.word	0x2000011c

08000f64 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f64:	b570      	push	{r4, r5, r6, lr}
 8000f66:	4604      	mov	r4, r0
 8000f68:	460e      	mov	r6, r1
 8000f6a:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 8000f6c:	7820      	ldrb	r0, [r4, #0]
 8000f6e:	b148      	cbz	r0, 8000f84 <SSD1306_Puts+0x20>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000f70:	462a      	mov	r2, r5
 8000f72:	4631      	mov	r1, r6
 8000f74:	f7ff ffa8 	bl	8000ec8 <SSD1306_Putc>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	7820      	ldrb	r0, [r4, #0]
 8000f7c:	4283      	cmp	r3, r0
 8000f7e:	d101      	bne.n	8000f84 <SSD1306_Puts+0x20>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 8000f80:	3401      	adds	r4, #1
 8000f82:	e7f3      	b.n	8000f6c <SSD1306_Puts+0x8>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8000f84:	bd70      	pop	{r4, r5, r6, pc}

08000f86 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000f86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	4604      	mov	r4, r0
 8000f8e:	460e      	mov	r6, r1
 8000f90:	4617      	mov	r7, r2
 8000f92:	4698      	mov	r8, r3
 8000f94:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8000f98:	287f      	cmp	r0, #127	; 0x7f
 8000f9a:	d900      	bls.n	8000f9e <SSD1306_DrawLine+0x18>
		x0 = SSD1306_WIDTH - 1;
 8000f9c:	247f      	movs	r4, #127	; 0x7f
	}
	if (x1 >= SSD1306_WIDTH) {
 8000f9e:	2f7f      	cmp	r7, #127	; 0x7f
 8000fa0:	d900      	bls.n	8000fa4 <SSD1306_DrawLine+0x1e>
		x1 = SSD1306_WIDTH - 1;
 8000fa2:	277f      	movs	r7, #127	; 0x7f
	}
	if (y0 >= SSD1306_HEIGHT) {
 8000fa4:	2e3f      	cmp	r6, #63	; 0x3f
 8000fa6:	d900      	bls.n	8000faa <SSD1306_DrawLine+0x24>
		y0 = SSD1306_HEIGHT - 1;
 8000fa8:	263f      	movs	r6, #63	; 0x3f
	}
	if (y1 >= SSD1306_HEIGHT) {
 8000faa:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8000fae:	d901      	bls.n	8000fb4 <SSD1306_DrawLine+0x2e>
		y1 = SSD1306_HEIGHT - 1;
 8000fb0:	f04f 083f 	mov.w	r8, #63	; 0x3f
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8000fb4:	42bc      	cmp	r4, r7
 8000fb6:	d220      	bcs.n	8000ffa <SSD1306_DrawLine+0x74>
 8000fb8:	eba7 0904 	sub.w	r9, r7, r4
 8000fbc:	fa0f f989 	sxth.w	r9, r9
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8000fc0:	4546      	cmp	r6, r8
 8000fc2:	d21f      	bcs.n	8001004 <SSD1306_DrawLine+0x7e>
 8000fc4:	eba8 0a06 	sub.w	sl, r8, r6
 8000fc8:	fa0f fa8a 	sxth.w	sl, sl
	sx = (x0 < x1) ? 1 : -1; 
 8000fcc:	42bc      	cmp	r4, r7
 8000fce:	d21e      	bcs.n	800100e <SSD1306_DrawLine+0x88>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	461a      	mov	r2, r3
	sy = (y0 < y1) ? 1 : -1; 
 8000fd4:	4546      	cmp	r6, r8
 8000fd6:	d21e      	bcs.n	8001016 <SSD1306_DrawLine+0x90>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	9300      	str	r3, [sp, #0]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8000fdc:	45d1      	cmp	r9, sl
 8000fde:	dd1e      	ble.n	800101e <SSD1306_DrawLine+0x98>
 8000fe0:	eb09 75d9 	add.w	r5, r9, r9, lsr #31
 8000fe4:	106d      	asrs	r5, r5, #1

	if (dx == 0) {
 8000fe6:	f1b9 0f00 	cmp.w	r9, #0
 8000fea:	d01e      	beq.n	800102a <SSD1306_DrawLine+0xa4>
		
		/* Return from function */
		return;
	}
	
	if (dy == 0) {
 8000fec:	f1ba 0f00 	cmp.w	sl, #0
 8000ff0:	d033      	beq.n	800105a <SSD1306_DrawLine+0xd4>
 8000ff2:	f8cd 8004 	str.w	r8, [sp, #4]
 8000ff6:	4690      	mov	r8, r2
 8000ff8:	e053      	b.n	80010a2 <SSD1306_DrawLine+0x11c>
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8000ffa:	eba4 0907 	sub.w	r9, r4, r7
 8000ffe:	fa0f f989 	sxth.w	r9, r9
 8001002:	e7dd      	b.n	8000fc0 <SSD1306_DrawLine+0x3a>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001004:	eba6 0a08 	sub.w	sl, r6, r8
 8001008:	fa0f fa8a 	sxth.w	sl, sl
 800100c:	e7de      	b.n	8000fcc <SSD1306_DrawLine+0x46>
	sx = (x0 < x1) ? 1 : -1; 
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	461a      	mov	r2, r3
 8001014:	e7de      	b.n	8000fd4 <SSD1306_DrawLine+0x4e>
	sy = (y0 < y1) ? 1 : -1; 
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	e7de      	b.n	8000fdc <SSD1306_DrawLine+0x56>
	err = ((dx > dy) ? dx : -dy) / 2; 
 800101e:	eb0a 75da 	add.w	r5, sl, sl, lsr #31
 8001022:	106d      	asrs	r5, r5, #1
 8001024:	426d      	negs	r5, r5
 8001026:	b22d      	sxth	r5, r5
 8001028:	e7dd      	b.n	8000fe6 <SSD1306_DrawLine+0x60>
		if (y1 < y0) {
 800102a:	4546      	cmp	r6, r8
 800102c:	d802      	bhi.n	8001034 <SSD1306_DrawLine+0xae>
 800102e:	4643      	mov	r3, r8
 8001030:	46b0      	mov	r8, r6
 8001032:	461e      	mov	r6, r3
		if (x1 < x0) {
 8001034:	42bc      	cmp	r4, r7
 8001036:	d800      	bhi.n	800103a <SSD1306_DrawLine+0xb4>
 8001038:	4627      	mov	r7, r4
		for (i = y0; i <= y1; i++) {
 800103a:	fa0f f888 	sxth.w	r8, r8
 800103e:	45b0      	cmp	r8, r6
 8001040:	dc23      	bgt.n	800108a <SSD1306_DrawLine+0x104>
			SSD1306_DrawPixel(x0, i, c);
 8001042:	fa1f f888 	uxth.w	r8, r8
 8001046:	465a      	mov	r2, fp
 8001048:	4641      	mov	r1, r8
 800104a:	4638      	mov	r0, r7
 800104c:	f7ff fec2 	bl	8000dd4 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001050:	f108 0801 	add.w	r8, r8, #1
 8001054:	fa0f f888 	sxth.w	r8, r8
 8001058:	e7f1      	b.n	800103e <SSD1306_DrawLine+0xb8>
		if (y1 < y0) {
 800105a:	4546      	cmp	r6, r8
 800105c:	d800      	bhi.n	8001060 <SSD1306_DrawLine+0xda>
 800105e:	46b0      	mov	r8, r6
			tmp = y1;
			y1 = y0;
			y0 = tmp;
		}
		
		if (x1 < x0) {
 8001060:	42bc      	cmp	r4, r7
 8001062:	d802      	bhi.n	800106a <SSD1306_DrawLine+0xe4>
 8001064:	463b      	mov	r3, r7
 8001066:	4627      	mov	r7, r4
 8001068:	461c      	mov	r4, r3
			x1 = x0;
			x0 = tmp;
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800106a:	b23f      	sxth	r7, r7
 800106c:	e007      	b.n	800107e <SSD1306_DrawLine+0xf8>
			SSD1306_DrawPixel(i, y0, c);
 800106e:	b2bf      	uxth	r7, r7
 8001070:	465a      	mov	r2, fp
 8001072:	4641      	mov	r1, r8
 8001074:	4638      	mov	r0, r7
 8001076:	f7ff fead 	bl	8000dd4 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 800107a:	3701      	adds	r7, #1
 800107c:	b23f      	sxth	r7, r7
 800107e:	42a7      	cmp	r7, r4
 8001080:	ddf5      	ble.n	800106e <SSD1306_DrawLine+0xe8>
 8001082:	e002      	b.n	800108a <SSD1306_DrawLine+0x104>
		return;
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
		if (x0 == x1 && y0 == y1) {
 8001084:	9b01      	ldr	r3, [sp, #4]
 8001086:	429e      	cmp	r6, r3
 8001088:	d112      	bne.n	80010b0 <SSD1306_DrawLine+0x12a>
		if (e2 < dy) {
			err += dx;
			y0 += sy;
		} 
	}
}
 800108a:	b003      	add	sp, #12
 800108c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001090:	462b      	mov	r3, r5
		if (e2 < dy) {
 8001092:	4555      	cmp	r5, sl
 8001094:	da04      	bge.n	80010a0 <SSD1306_DrawLine+0x11a>
			err += dx;
 8001096:	444b      	add	r3, r9
 8001098:	b21b      	sxth	r3, r3
			y0 += sy;
 800109a:	9a00      	ldr	r2, [sp, #0]
 800109c:	4416      	add	r6, r2
 800109e:	b2b6      	uxth	r6, r6
		if (x1 < x0) {
 80010a0:	461d      	mov	r5, r3
		SSD1306_DrawPixel(x0, y0, c);
 80010a2:	465a      	mov	r2, fp
 80010a4:	4631      	mov	r1, r6
 80010a6:	4620      	mov	r0, r4
 80010a8:	f7ff fe94 	bl	8000dd4 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80010ac:	42bc      	cmp	r4, r7
 80010ae:	d0e9      	beq.n	8001084 <SSD1306_DrawLine+0xfe>
		if (e2 > -dx) {
 80010b0:	f1c9 0300 	rsb	r3, r9, #0
 80010b4:	429d      	cmp	r5, r3
 80010b6:	ddeb      	ble.n	8001090 <SSD1306_DrawLine+0x10a>
			err -= dy;
 80010b8:	eba5 030a 	sub.w	r3, r5, sl
 80010bc:	b21b      	sxth	r3, r3
			x0 += sx;
 80010be:	4444      	add	r4, r8
 80010c0:	b2a4      	uxth	r4, r4
 80010c2:	e7e6      	b.n	8001092 <SSD1306_DrawLine+0x10c>

080010c4 <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80010c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
	uint8_t i;
	
	/* Check input parameters */
	if (
 80010ce:	287f      	cmp	r0, #127	; 0x7f
 80010d0:	d826      	bhi.n	8001120 <SSD1306_DrawFilledRectangle+0x5c>
 80010d2:	4606      	mov	r6, r0
 80010d4:	4688      	mov	r8, r1
 80010d6:	4691      	mov	r9, r2
 80010d8:	461f      	mov	r7, r3
		x >= SSD1306_WIDTH ||
 80010da:	293f      	cmp	r1, #63	; 0x3f
 80010dc:	d820      	bhi.n	8001120 <SSD1306_DrawFilledRectangle+0x5c>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80010de:	1883      	adds	r3, r0, r2
 80010e0:	2b7f      	cmp	r3, #127	; 0x7f
 80010e2:	dd03      	ble.n	80010ec <SSD1306_DrawFilledRectangle+0x28>
		w = SSD1306_WIDTH - x;
 80010e4:	f1c0 0980 	rsb	r9, r0, #128	; 0x80
 80010e8:	fa1f f989 	uxth.w	r9, r9
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80010ec:	eb08 0307 	add.w	r3, r8, r7
 80010f0:	2b3f      	cmp	r3, #63	; 0x3f
 80010f2:	dd02      	ble.n	80010fa <SSD1306_DrawFilledRectangle+0x36>
		h = SSD1306_HEIGHT - y;
 80010f4:	f1c8 0740 	rsb	r7, r8, #64	; 0x40
 80010f8:	b2bf      	uxth	r7, r7
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 80010fa:	2500      	movs	r5, #0
 80010fc:	e00d      	b.n	800111a <SSD1306_DrawFilledRectangle+0x56>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 80010fe:	eb04 0108 	add.w	r1, r4, r8
 8001102:	b289      	uxth	r1, r1
 8001104:	eb09 0206 	add.w	r2, r9, r6
 8001108:	f8cd a000 	str.w	sl, [sp]
 800110c:	460b      	mov	r3, r1
 800110e:	b292      	uxth	r2, r2
 8001110:	4630      	mov	r0, r6
 8001112:	f7ff ff38 	bl	8000f86 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8001116:	3501      	adds	r5, #1
 8001118:	b2ed      	uxtb	r5, r5
 800111a:	b2ac      	uxth	r4, r5
 800111c:	42bc      	cmp	r4, r7
 800111e:	d9ee      	bls.n	80010fe <SSD1306_DrawFilledRectangle+0x3a>
	}
}
 8001120:	b002      	add	sp, #8
 8001122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08001128 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001128:	b530      	push	{r4, r5, lr}
 800112a:	b0c3      	sub	sp, #268	; 0x10c
uint8_t dt[256];
dt[0] = reg;
 800112c:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 8001130:	2100      	movs	r1, #0
 8001132:	b28c      	uxth	r4, r1
 8001134:	429c      	cmp	r4, r3
 8001136:	d205      	bcs.n	8001144 <ssd1306_I2C_WriteMulti+0x1c>
dt[i+1] = data[i];
 8001138:	1c4c      	adds	r4, r1, #1
 800113a:	5c55      	ldrb	r5, [r2, r1]
 800113c:	a902      	add	r1, sp, #8
 800113e:	550d      	strb	r5, [r1, r4]
for(i = 0; i < count; i++)
 8001140:	b2e1      	uxtb	r1, r4
 8001142:	e7f6      	b.n	8001132 <ssd1306_I2C_WriteMulti+0xa>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001144:	3301      	adds	r3, #1
 8001146:	220a      	movs	r2, #10
 8001148:	9200      	str	r2, [sp, #0]
 800114a:	b29b      	uxth	r3, r3
 800114c:	aa02      	add	r2, sp, #8
 800114e:	4601      	mov	r1, r0
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <ssd1306_I2C_WriteMulti+0x34>)
 8001152:	f000 fe17 	bl	8001d84 <HAL_I2C_Master_Transmit>
}
 8001156:	b043      	add	sp, #268	; 0x10c
 8001158:	bd30      	pop	{r4, r5, pc}
 800115a:	bf00      	nop
 800115c:	20000534 	.word	0x20000534

08001160 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001160:	b500      	push	{lr}
 8001162:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 8001164:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 8001168:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800116c:	230a      	movs	r3, #10
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2302      	movs	r3, #2
 8001172:	aa03      	add	r2, sp, #12
 8001174:	4601      	mov	r1, r0
 8001176:	4803      	ldr	r0, [pc, #12]	; (8001184 <ssd1306_I2C_Write+0x24>)
 8001178:	f000 fe04 	bl	8001d84 <HAL_I2C_Master_Transmit>
}
 800117c:	b005      	add	sp, #20
 800117e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001182:	bf00      	nop
 8001184:	20000534 	.word	0x20000534

08001188 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8001188:	b510      	push	{r4, lr}
	for (m = 0; m < 8; m++) {
 800118a:	2400      	movs	r4, #0
 800118c:	e01a      	b.n	80011c4 <SSD1306_UpdateScreen+0x3c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800118e:	f1a4 0250 	sub.w	r2, r4, #80	; 0x50
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	2100      	movs	r1, #0
 8001196:	2078      	movs	r0, #120	; 0x78
 8001198:	f7ff ffe2 	bl	8001160 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800119c:	2200      	movs	r2, #0
 800119e:	4611      	mov	r1, r2
 80011a0:	2078      	movs	r0, #120	; 0x78
 80011a2:	f7ff ffdd 	bl	8001160 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80011a6:	2210      	movs	r2, #16
 80011a8:	2100      	movs	r1, #0
 80011aa:	2078      	movs	r0, #120	; 0x78
 80011ac:	f7ff ffd8 	bl	8001160 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80011b0:	2380      	movs	r3, #128	; 0x80
 80011b2:	4a06      	ldr	r2, [pc, #24]	; (80011cc <SSD1306_UpdateScreen+0x44>)
 80011b4:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 80011b8:	2140      	movs	r1, #64	; 0x40
 80011ba:	2078      	movs	r0, #120	; 0x78
 80011bc:	f7ff ffb4 	bl	8001128 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80011c0:	3401      	adds	r4, #1
 80011c2:	b2e4      	uxtb	r4, r4
 80011c4:	2c07      	cmp	r4, #7
 80011c6:	d9e2      	bls.n	800118e <SSD1306_UpdateScreen+0x6>
}
 80011c8:	bd10      	pop	{r4, pc}
 80011ca:	bf00      	nop
 80011cc:	20000124 	.word	0x20000124

080011d0 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 80011d0:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80011d2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80011d6:	2201      	movs	r2, #1
 80011d8:	2178      	movs	r1, #120	; 0x78
 80011da:	4855      	ldr	r0, [pc, #340]	; (8001330 <SSD1306_Init+0x160>)
 80011dc:	f000 fe8e 	bl	8001efc <HAL_I2C_IsDeviceReady>
 80011e0:	2800      	cmp	r0, #0
 80011e2:	f040 80a3 	bne.w	800132c <SSD1306_Init+0x15c>
	uint32_t p = 2500;
 80011e6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80011ea:	e000      	b.n	80011ee <SSD1306_Init+0x1e>
		p--;
 80011ec:	3b01      	subs	r3, #1
	while(p>0)
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1fc      	bne.n	80011ec <SSD1306_Init+0x1c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 80011f2:	22ae      	movs	r2, #174	; 0xae
 80011f4:	2100      	movs	r1, #0
 80011f6:	2078      	movs	r0, #120	; 0x78
 80011f8:	f7ff ffb2 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80011fc:	2220      	movs	r2, #32
 80011fe:	2100      	movs	r1, #0
 8001200:	2078      	movs	r0, #120	; 0x78
 8001202:	f7ff ffad 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001206:	2210      	movs	r2, #16
 8001208:	2100      	movs	r1, #0
 800120a:	2078      	movs	r0, #120	; 0x78
 800120c:	f7ff ffa8 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001210:	22b0      	movs	r2, #176	; 0xb0
 8001212:	2100      	movs	r1, #0
 8001214:	2078      	movs	r0, #120	; 0x78
 8001216:	f7ff ffa3 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800121a:	22c8      	movs	r2, #200	; 0xc8
 800121c:	2100      	movs	r1, #0
 800121e:	2078      	movs	r0, #120	; 0x78
 8001220:	f7ff ff9e 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001224:	2200      	movs	r2, #0
 8001226:	4611      	mov	r1, r2
 8001228:	2078      	movs	r0, #120	; 0x78
 800122a:	f7ff ff99 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800122e:	2210      	movs	r2, #16
 8001230:	2100      	movs	r1, #0
 8001232:	2078      	movs	r0, #120	; 0x78
 8001234:	f7ff ff94 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001238:	2240      	movs	r2, #64	; 0x40
 800123a:	2100      	movs	r1, #0
 800123c:	2078      	movs	r0, #120	; 0x78
 800123e:	f7ff ff8f 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001242:	2281      	movs	r2, #129	; 0x81
 8001244:	2100      	movs	r1, #0
 8001246:	2078      	movs	r0, #120	; 0x78
 8001248:	f7ff ff8a 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800124c:	22ff      	movs	r2, #255	; 0xff
 800124e:	2100      	movs	r1, #0
 8001250:	2078      	movs	r0, #120	; 0x78
 8001252:	f7ff ff85 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001256:	22a1      	movs	r2, #161	; 0xa1
 8001258:	2100      	movs	r1, #0
 800125a:	2078      	movs	r0, #120	; 0x78
 800125c:	f7ff ff80 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001260:	22a6      	movs	r2, #166	; 0xa6
 8001262:	2100      	movs	r1, #0
 8001264:	2078      	movs	r0, #120	; 0x78
 8001266:	f7ff ff7b 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800126a:	22a8      	movs	r2, #168	; 0xa8
 800126c:	2100      	movs	r1, #0
 800126e:	2078      	movs	r0, #120	; 0x78
 8001270:	f7ff ff76 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001274:	223f      	movs	r2, #63	; 0x3f
 8001276:	2100      	movs	r1, #0
 8001278:	2078      	movs	r0, #120	; 0x78
 800127a:	f7ff ff71 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800127e:	22a4      	movs	r2, #164	; 0xa4
 8001280:	2100      	movs	r1, #0
 8001282:	2078      	movs	r0, #120	; 0x78
 8001284:	f7ff ff6c 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001288:	22d3      	movs	r2, #211	; 0xd3
 800128a:	2100      	movs	r1, #0
 800128c:	2078      	movs	r0, #120	; 0x78
 800128e:	f7ff ff67 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001292:	2200      	movs	r2, #0
 8001294:	4611      	mov	r1, r2
 8001296:	2078      	movs	r0, #120	; 0x78
 8001298:	f7ff ff62 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800129c:	22d5      	movs	r2, #213	; 0xd5
 800129e:	2100      	movs	r1, #0
 80012a0:	2078      	movs	r0, #120	; 0x78
 80012a2:	f7ff ff5d 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80012a6:	22f0      	movs	r2, #240	; 0xf0
 80012a8:	2100      	movs	r1, #0
 80012aa:	2078      	movs	r0, #120	; 0x78
 80012ac:	f7ff ff58 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80012b0:	22d9      	movs	r2, #217	; 0xd9
 80012b2:	2100      	movs	r1, #0
 80012b4:	2078      	movs	r0, #120	; 0x78
 80012b6:	f7ff ff53 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80012ba:	2222      	movs	r2, #34	; 0x22
 80012bc:	2100      	movs	r1, #0
 80012be:	2078      	movs	r0, #120	; 0x78
 80012c0:	f7ff ff4e 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80012c4:	22da      	movs	r2, #218	; 0xda
 80012c6:	2100      	movs	r1, #0
 80012c8:	2078      	movs	r0, #120	; 0x78
 80012ca:	f7ff ff49 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80012ce:	2212      	movs	r2, #18
 80012d0:	2100      	movs	r1, #0
 80012d2:	2078      	movs	r0, #120	; 0x78
 80012d4:	f7ff ff44 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80012d8:	22db      	movs	r2, #219	; 0xdb
 80012da:	2100      	movs	r1, #0
 80012dc:	2078      	movs	r0, #120	; 0x78
 80012de:	f7ff ff3f 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80012e2:	2220      	movs	r2, #32
 80012e4:	2100      	movs	r1, #0
 80012e6:	2078      	movs	r0, #120	; 0x78
 80012e8:	f7ff ff3a 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80012ec:	228d      	movs	r2, #141	; 0x8d
 80012ee:	2100      	movs	r1, #0
 80012f0:	2078      	movs	r0, #120	; 0x78
 80012f2:	f7ff ff35 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80012f6:	2214      	movs	r2, #20
 80012f8:	2100      	movs	r1, #0
 80012fa:	2078      	movs	r0, #120	; 0x78
 80012fc:	f7ff ff30 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001300:	22af      	movs	r2, #175	; 0xaf
 8001302:	2100      	movs	r1, #0
 8001304:	2078      	movs	r0, #120	; 0x78
 8001306:	f7ff ff2b 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800130a:	222e      	movs	r2, #46	; 0x2e
 800130c:	2100      	movs	r1, #0
 800130e:	2078      	movs	r0, #120	; 0x78
 8001310:	f7ff ff26 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001314:	2000      	movs	r0, #0
 8001316:	f7ff fd4f 	bl	8000db8 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 800131a:	f7ff ff35 	bl	8001188 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <SSD1306_Init+0x164>)
 8001320:	2200      	movs	r2, #0
 8001322:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001324:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8001326:	2001      	movs	r0, #1
 8001328:	7158      	strb	r0, [r3, #5]
}
 800132a:	bd08      	pop	{r3, pc}
		return 0;
 800132c:	2000      	movs	r0, #0
 800132e:	e7fc      	b.n	800132a <SSD1306_Init+0x15a>
 8001330:	20000534 	.word	0x20000534
 8001334:	2000011c 	.word	0x2000011c

08001338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	2100      	movs	r1, #0
 800133c:	9100      	str	r1, [sp, #0]
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_MspInit+0x34>)
 8001340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001342:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001346:	645a      	str	r2, [r3, #68]	; 0x44
 8001348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800134a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800134e:	9200      	str	r2, [sp, #0]
 8001350:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	9101      	str	r1, [sp, #4]
 8001354:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001356:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800135a:	641a      	str	r2, [r3, #64]	; 0x40
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001366:	b002      	add	sp, #8
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800

08001370 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001370:	b530      	push	{r4, r5, lr}
 8001372:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	2300      	movs	r3, #0
 8001376:	9303      	str	r3, [sp, #12]
 8001378:	9304      	str	r3, [sp, #16]
 800137a:	9305      	str	r3, [sp, #20]
 800137c:	9306      	str	r3, [sp, #24]
 800137e:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8001380:	6802      	ldr	r2, [r0, #0]
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <HAL_I2C_MspInit+0x64>)
 8001384:	429a      	cmp	r2, r3
 8001386:	d001      	beq.n	800138c <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001388:	b009      	add	sp, #36	; 0x24
 800138a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138c:	2500      	movs	r5, #0
 800138e:	9501      	str	r5, [sp, #4]
 8001390:	4c11      	ldr	r4, [pc, #68]	; (80013d8 <HAL_I2C_MspInit+0x68>)
 8001392:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6323      	str	r3, [r4, #48]	; 0x30
 800139a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013a4:	23c0      	movs	r3, #192	; 0xc0
 80013a6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a8:	2312      	movs	r3, #18
 80013aa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013b2:	2304      	movs	r3, #4
 80013b4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b6:	a903      	add	r1, sp, #12
 80013b8:	4808      	ldr	r0, [pc, #32]	; (80013dc <HAL_I2C_MspInit+0x6c>)
 80013ba:	f000 f9a9 	bl	8001710 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013be:	9502      	str	r5, [sp, #8]
 80013c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013c6:	6423      	str	r3, [r4, #64]	; 0x40
 80013c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	9b02      	ldr	r3, [sp, #8]
}
 80013d2:	e7d9      	b.n	8001388 <HAL_I2C_MspInit+0x18>
 80013d4:	40005400 	.word	0x40005400
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020400 	.word	0x40020400

080013e0 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 80013e0:	6802      	ldr	r2, [r0, #0]
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_RNG_MspInit+0x3c>)
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d000      	beq.n	80013ea <HAL_RNG_MspInit+0xa>
 80013e8:	4770      	bx	lr
{
 80013ea:	b500      	push	{lr}
 80013ec:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80013ee:	2100      	movs	r1, #0
 80013f0:	9101      	str	r1, [sp, #4]
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_RNG_MspInit+0x40>)
 80013f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013fa:	635a      	str	r2, [r3, #52]	; 0x34
 80013fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	9b01      	ldr	r3, [sp, #4]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 8001406:	460a      	mov	r2, r1
 8001408:	2050      	movs	r0, #80	; 0x50
 800140a:	f000 f929 	bl	8001660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 800140e:	2050      	movs	r0, #80	; 0x50
 8001410:	f000 f95a 	bl	80016c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001414:	b003      	add	sp, #12
 8001416:	f85d fb04 	ldr.w	pc, [sp], #4
 800141a:	bf00      	nop
 800141c:	50060800 	.word	0x50060800
 8001420:	40023800 	.word	0x40023800

08001424 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <NMI_Handler>

08001426 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler>

08001428 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <MemManage_Handler>

0800142a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <BusFault_Handler>

0800142c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <UsageFault_Handler>

0800142e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800142e:	4770      	bx	lr

08001430 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001430:	4770      	bx	lr

08001432 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001432:	4770      	bx	lr

08001434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001434:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001436:	f000 f8db 	bl	80015f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800143a:	bd08      	pop	{r3, pc}

0800143c <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 800143c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 800143e:	4802      	ldr	r0, [pc, #8]	; (8001448 <HASH_RNG_IRQHandler+0xc>)
 8001440:	f001 f9cc 	bl	80027dc <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8001444:	bd08      	pop	{r3, pc}
 8001446:	bf00      	nop
 8001448:	20000588 	.word	0x20000588

0800144c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800144c:	2001      	movs	r0, #1
 800144e:	4770      	bx	lr

08001450 <_kill>:

int _kill(int pid, int sig)
{
 8001450:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001452:	f001 f9f3 	bl	800283c <__errno>
 8001456:	2316      	movs	r3, #22
 8001458:	6003      	str	r3, [r0, #0]
	return -1;
}
 800145a:	f04f 30ff 	mov.w	r0, #4294967295
 800145e:	bd08      	pop	{r3, pc}

08001460 <_exit>:

void _exit (int status)
{
 8001460:	b508      	push	{r3, lr}
	_kill(status, -1);
 8001462:	f04f 31ff 	mov.w	r1, #4294967295
 8001466:	f7ff fff3 	bl	8001450 <_kill>
	while (1) {}		/* Make sure we hang here */
 800146a:	e7fe      	b.n	800146a <_exit+0xa>

0800146c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800146c:	b570      	push	{r4, r5, r6, lr}
 800146e:	460c      	mov	r4, r1
 8001470:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001472:	2500      	movs	r5, #0
 8001474:	42b5      	cmp	r5, r6
 8001476:	da07      	bge.n	8001488 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8001478:	f3af 8000 	nop.w
 800147c:	4621      	mov	r1, r4
 800147e:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001482:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8001484:	460c      	mov	r4, r1
 8001486:	e7f5      	b.n	8001474 <_read+0x8>
	}

return len;
}
 8001488:	4630      	mov	r0, r6
 800148a:	bd70      	pop	{r4, r5, r6, pc}

0800148c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800148c:	b570      	push	{r4, r5, r6, lr}
 800148e:	460c      	mov	r4, r1
 8001490:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001492:	2500      	movs	r5, #0
 8001494:	42b5      	cmp	r5, r6
 8001496:	da05      	bge.n	80014a4 <_write+0x18>
	{
		__io_putchar(*ptr++);
 8001498:	f814 0b01 	ldrb.w	r0, [r4], #1
 800149c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a0:	3501      	adds	r5, #1
 80014a2:	e7f7      	b.n	8001494 <_write+0x8>
	}
	return len;
}
 80014a4:	4630      	mov	r0, r6
 80014a6:	bd70      	pop	{r4, r5, r6, pc}

080014a8 <_close>:

int _close(int file)
{
	return -1;
}
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	4770      	bx	lr

080014ae <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80014ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b2:	604b      	str	r3, [r1, #4]
	return 0;
}
 80014b4:	2000      	movs	r0, #0
 80014b6:	4770      	bx	lr

080014b8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80014b8:	2001      	movs	r0, #1
 80014ba:	4770      	bx	lr

080014bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80014bc:	2000      	movs	r0, #0
 80014be:	4770      	bx	lr

080014c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c0:	b510      	push	{r4, lr}
 80014c2:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c4:	4a0c      	ldr	r2, [pc, #48]	; (80014f8 <_sbrk+0x38>)
 80014c6:	490d      	ldr	r1, [pc, #52]	; (80014fc <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c8:	480d      	ldr	r0, [pc, #52]	; (8001500 <_sbrk+0x40>)
 80014ca:	6800      	ldr	r0, [r0, #0]
 80014cc:	b140      	cbz	r0, 80014e0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ce:	480c      	ldr	r0, [pc, #48]	; (8001500 <_sbrk+0x40>)
 80014d0:	6800      	ldr	r0, [r0, #0]
 80014d2:	4403      	add	r3, r0
 80014d4:	1a52      	subs	r2, r2, r1
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d806      	bhi.n	80014e8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80014da:	4a09      	ldr	r2, [pc, #36]	; (8001500 <_sbrk+0x40>)
 80014dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80014de:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80014e0:	4807      	ldr	r0, [pc, #28]	; (8001500 <_sbrk+0x40>)
 80014e2:	4c08      	ldr	r4, [pc, #32]	; (8001504 <_sbrk+0x44>)
 80014e4:	6004      	str	r4, [r0, #0]
 80014e6:	e7f2      	b.n	80014ce <_sbrk+0xe>
    errno = ENOMEM;
 80014e8:	f001 f9a8 	bl	800283c <__errno>
 80014ec:	230c      	movs	r3, #12
 80014ee:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	e7f3      	b.n	80014de <_sbrk+0x1e>
 80014f6:	bf00      	nop
 80014f8:	20030000 	.word	0x20030000
 80014fc:	00000400 	.word	0x00000400
 8001500:	20000524 	.word	0x20000524
 8001504:	200005b0 	.word	0x200005b0

08001508 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001508:	4a03      	ldr	r2, [pc, #12]	; (8001518 <SystemInit+0x10>)
 800150a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800150e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001512:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800151c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001554 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001520:	480d      	ldr	r0, [pc, #52]	; (8001558 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001522:	490e      	ldr	r1, [pc, #56]	; (800155c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001524:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001528:	e002      	b.n	8001530 <LoopCopyDataInit>

0800152a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152e:	3304      	adds	r3, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001534:	d3f9      	bcc.n	800152a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001536:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001538:	4c0b      	ldr	r4, [pc, #44]	; (8001568 <LoopFillZerobss+0x26>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800153c:	e001      	b.n	8001542 <LoopFillZerobss>

0800153e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001540:	3204      	adds	r2, #4

08001542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001544:	d3fb      	bcc.n	800153e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001546:	f7ff ffdf 	bl	8001508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800154a:	f001 f97d 	bl	8002848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154e:	f7ff fa71 	bl	8000a34 <main>
  bx  lr    
 8001552:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001554:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800155c:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8001560:	08008204 	.word	0x08008204
  ldr r2, =_sbss
 8001564:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8001568:	200005ac 	.word	0x200005ac

0800156c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800156c:	e7fe      	b.n	800156c <ADC_IRQHandler>
	...

08001570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001570:	b510      	push	{r4, lr}
 8001572:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_InitTick+0x40>)
 8001576:	7818      	ldrb	r0, [r3, #0]
 8001578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001580:	4a0c      	ldr	r2, [pc, #48]	; (80015b4 <HAL_InitTick+0x44>)
 8001582:	6810      	ldr	r0, [r2, #0]
 8001584:	fbb0 f0f3 	udiv	r0, r0, r3
 8001588:	f000 f8ac 	bl	80016e4 <HAL_SYSTICK_Config>
 800158c:	b968      	cbnz	r0, 80015aa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158e:	2c0f      	cmp	r4, #15
 8001590:	d901      	bls.n	8001596 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001592:	2001      	movs	r0, #1
 8001594:	e00a      	b.n	80015ac <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001596:	2200      	movs	r2, #0
 8001598:	4621      	mov	r1, r4
 800159a:	f04f 30ff 	mov.w	r0, #4294967295
 800159e:	f000 f85f 	bl	8001660 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_InitTick+0x48>)
 80015a4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015a6:	2000      	movs	r0, #0
 80015a8:	e000      	b.n	80015ac <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80015aa:	2001      	movs	r0, #1
}
 80015ac:	bd10      	pop	{r4, pc}
 80015ae:	bf00      	nop
 80015b0:	2000007c 	.word	0x2000007c
 80015b4:	20000078 	.word	0x20000078
 80015b8:	20000080 	.word	0x20000080

080015bc <HAL_Init>:
{
 80015bc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <HAL_Init+0x30>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015c6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015ce:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015d6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d8:	2003      	movs	r0, #3
 80015da:	f000 f82f 	bl	800163c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80015de:	200f      	movs	r0, #15
 80015e0:	f7ff ffc6 	bl	8001570 <HAL_InitTick>
  HAL_MspInit();
 80015e4:	f7ff fea8 	bl	8001338 <HAL_MspInit>
}
 80015e8:	2000      	movs	r0, #0
 80015ea:	bd08      	pop	{r3, pc}
 80015ec:	40023c00 	.word	0x40023c00

080015f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80015f0:	4a03      	ldr	r2, [pc, #12]	; (8001600 <HAL_IncTick+0x10>)
 80015f2:	6811      	ldr	r1, [r2, #0]
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <HAL_IncTick+0x14>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	440b      	add	r3, r1
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000598 	.word	0x20000598
 8001604:	2000007c 	.word	0x2000007c

08001608 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001608:	4b01      	ldr	r3, [pc, #4]	; (8001610 <HAL_GetTick+0x8>)
 800160a:	6818      	ldr	r0, [r3, #0]
}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000598 	.word	0x20000598

08001614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001614:	b538      	push	{r3, r4, r5, lr}
 8001616:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001618:	f7ff fff6 	bl	8001608 <HAL_GetTick>
 800161c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001622:	d002      	beq.n	800162a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <HAL_Delay+0x24>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800162a:	f7ff ffed 	bl	8001608 <HAL_GetTick>
 800162e:	1b40      	subs	r0, r0, r5
 8001630:	42a0      	cmp	r0, r4
 8001632:	d3fa      	bcc.n	800162a <HAL_Delay+0x16>
  {
  }
}
 8001634:	bd38      	pop	{r3, r4, r5, pc}
 8001636:	bf00      	nop
 8001638:	2000007c 	.word	0x2000007c

0800163c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800163e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001640:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001648:	0200      	lsls	r0, r0, #8
 800164a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800164e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001658:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001660:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <HAL_NVIC_SetPriority+0x60>)
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800166a:	f1c3 0407 	rsb	r4, r3, #7
 800166e:	2c04      	cmp	r4, #4
 8001670:	bf28      	it	cs
 8001672:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001674:	1d1d      	adds	r5, r3, #4
 8001676:	2d06      	cmp	r5, #6
 8001678:	d918      	bls.n	80016ac <HAL_NVIC_SetPriority+0x4c>
 800167a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	f04f 35ff 	mov.w	r5, #4294967295
 8001680:	fa05 f404 	lsl.w	r4, r5, r4
 8001684:	ea21 0104 	bic.w	r1, r1, r4
 8001688:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800168a:	fa05 f303 	lsl.w	r3, r5, r3
 800168e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001692:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001694:	2800      	cmp	r0, #0
 8001696:	db0b      	blt.n	80016b0 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	0109      	lsls	r1, r1, #4
 800169a:	b2c9      	uxtb	r1, r1
 800169c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80016a0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80016a4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80016a8:	bc30      	pop	{r4, r5}
 80016aa:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ac:	2300      	movs	r3, #0
 80016ae:	e7e5      	b.n	800167c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b0:	f000 000f 	and.w	r0, r0, #15
 80016b4:	0109      	lsls	r1, r1, #4
 80016b6:	b2c9      	uxtb	r1, r1
 80016b8:	4b02      	ldr	r3, [pc, #8]	; (80016c4 <HAL_NVIC_SetPriority+0x64>)
 80016ba:	5419      	strb	r1, [r3, r0]
 80016bc:	e7f4      	b.n	80016a8 <HAL_NVIC_SetPriority+0x48>
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00
 80016c4:	e000ed14 	.word	0xe000ed14

080016c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80016c8:	2800      	cmp	r0, #0
 80016ca:	db07      	blt.n	80016dc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016cc:	f000 021f 	and.w	r2, r0, #31
 80016d0:	0940      	lsrs	r0, r0, #5
 80016d2:	2301      	movs	r3, #1
 80016d4:	4093      	lsls	r3, r2
 80016d6:	4a02      	ldr	r2, [pc, #8]	; (80016e0 <HAL_NVIC_EnableIRQ+0x18>)
 80016d8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000e100 	.word	0xe000e100

080016e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e4:	3801      	subs	r0, #1
 80016e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80016ea:	d20a      	bcs.n	8001702 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_SYSTICK_Config+0x24>)
 80016ee:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <HAL_SYSTICK_Config+0x28>)
 80016f2:	21f0      	movs	r1, #240	; 0xf0
 80016f4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f8:	2000      	movs	r0, #0
 80016fa:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fc:	2207      	movs	r2, #7
 80016fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001700:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000e010 	.word	0xe000e010
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001710:	2300      	movs	r3, #0
 8001712:	2b0f      	cmp	r3, #15
 8001714:	f200 80ea 	bhi.w	80018ec <HAL_GPIO_Init+0x1dc>
{
 8001718:	b4f0      	push	{r4, r5, r6, r7}
 800171a:	b082      	sub	sp, #8
 800171c:	e05e      	b.n	80017dc <HAL_GPIO_Init+0xcc>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800171e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001720:	005f      	lsls	r7, r3, #1
 8001722:	2403      	movs	r4, #3
 8001724:	40bc      	lsls	r4, r7
 8001726:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800172a:	68cc      	ldr	r4, [r1, #12]
 800172c:	40bc      	lsls	r4, r7
 800172e:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001730:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001732:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001734:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001738:	684c      	ldr	r4, [r1, #4]
 800173a:	f3c4 1200 	ubfx	r2, r4, #4, #1
 800173e:	409a      	lsls	r2, r3
 8001740:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8001742:	6042      	str	r2, [r0, #4]
 8001744:	e058      	b.n	80017f8 <HAL_GPIO_Init+0xe8>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001746:	08dc      	lsrs	r4, r3, #3
 8001748:	3408      	adds	r4, #8
 800174a:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800174e:	f003 0207 	and.w	r2, r3, #7
 8001752:	0096      	lsls	r6, r2, #2
 8001754:	220f      	movs	r2, #15
 8001756:	40b2      	lsls	r2, r6
 8001758:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800175c:	690a      	ldr	r2, [r1, #16]
 800175e:	40b2      	lsls	r2, r6
 8001760:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8001762:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001766:	e05b      	b.n	8001820 <HAL_GPIO_Init+0x110>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001768:	2209      	movs	r2, #9
 800176a:	e000      	b.n	800176e <HAL_GPIO_Init+0x5e>
 800176c:	2200      	movs	r2, #0
 800176e:	40b2      	lsls	r2, r6
 8001770:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001772:	3402      	adds	r4, #2
 8001774:	4e5e      	ldr	r6, [pc, #376]	; (80018f0 <HAL_GPIO_Init+0x1e0>)
 8001776:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800177a:	4a5e      	ldr	r2, [pc, #376]	; (80018f4 <HAL_GPIO_Init+0x1e4>)
 800177c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800177e:	43ea      	mvns	r2, r5
 8001780:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001784:	684f      	ldr	r7, [r1, #4]
 8001786:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800178a:	d001      	beq.n	8001790 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 800178c:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8001790:	4c58      	ldr	r4, [pc, #352]	; (80018f4 <HAL_GPIO_Init+0x1e4>)
 8001792:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001794:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001796:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800179a:	684f      	ldr	r7, [r1, #4]
 800179c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80017a0:	d001      	beq.n	80017a6 <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 80017a2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80017a6:	4c53      	ldr	r4, [pc, #332]	; (80018f4 <HAL_GPIO_Init+0x1e4>)
 80017a8:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017aa:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80017ac:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017b0:	684f      	ldr	r7, [r1, #4]
 80017b2:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80017b6:	d001      	beq.n	80017bc <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 80017b8:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80017bc:	4c4d      	ldr	r4, [pc, #308]	; (80018f4 <HAL_GPIO_Init+0x1e4>)
 80017be:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80017c0:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80017c2:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017c4:	684e      	ldr	r6, [r1, #4]
 80017c6:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80017ca:	d001      	beq.n	80017d0 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 80017cc:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80017d0:	4c48      	ldr	r4, [pc, #288]	; (80018f4 <HAL_GPIO_Init+0x1e4>)
 80017d2:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017d4:	3301      	adds	r3, #1
 80017d6:	2b0f      	cmp	r3, #15
 80017d8:	f200 8085 	bhi.w	80018e6 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 80017dc:	2201      	movs	r2, #1
 80017de:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017e0:	680c      	ldr	r4, [r1, #0]
 80017e2:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80017e6:	ea32 0404 	bics.w	r4, r2, r4
 80017ea:	d1f3      	bne.n	80017d4 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ec:	684c      	ldr	r4, [r1, #4]
 80017ee:	f004 0403 	and.w	r4, r4, #3
 80017f2:	3c01      	subs	r4, #1
 80017f4:	2c01      	cmp	r4, #1
 80017f6:	d992      	bls.n	800171e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017f8:	684a      	ldr	r2, [r1, #4]
 80017fa:	f002 0203 	and.w	r2, r2, #3
 80017fe:	2a03      	cmp	r2, #3
 8001800:	d009      	beq.n	8001816 <HAL_GPIO_Init+0x106>
        temp = GPIOx->PUPDR;
 8001802:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001804:	005e      	lsls	r6, r3, #1
 8001806:	2203      	movs	r2, #3
 8001808:	40b2      	lsls	r2, r6
 800180a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800180e:	688a      	ldr	r2, [r1, #8]
 8001810:	40b2      	lsls	r2, r6
 8001812:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001814:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001816:	684a      	ldr	r2, [r1, #4]
 8001818:	f002 0203 	and.w	r2, r2, #3
 800181c:	2a02      	cmp	r2, #2
 800181e:	d092      	beq.n	8001746 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8001820:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001822:	005e      	lsls	r6, r3, #1
 8001824:	2203      	movs	r2, #3
 8001826:	40b2      	lsls	r2, r6
 8001828:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800182c:	684a      	ldr	r2, [r1, #4]
 800182e:	f002 0203 	and.w	r2, r2, #3
 8001832:	40b2      	lsls	r2, r6
 8001834:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001836:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001838:	684a      	ldr	r2, [r1, #4]
 800183a:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 800183e:	d0c9      	beq.n	80017d4 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001840:	2200      	movs	r2, #0
 8001842:	9201      	str	r2, [sp, #4]
 8001844:	4a2c      	ldr	r2, [pc, #176]	; (80018f8 <HAL_GPIO_Init+0x1e8>)
 8001846:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001848:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800184c:	6454      	str	r4, [r2, #68]	; 0x44
 800184e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001850:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001854:	9201      	str	r2, [sp, #4]
 8001856:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001858:	089c      	lsrs	r4, r3, #2
 800185a:	1ca6      	adds	r6, r4, #2
 800185c:	4a24      	ldr	r2, [pc, #144]	; (80018f0 <HAL_GPIO_Init+0x1e0>)
 800185e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001862:	f003 0203 	and.w	r2, r3, #3
 8001866:	0096      	lsls	r6, r2, #2
 8001868:	220f      	movs	r2, #15
 800186a:	40b2      	lsls	r2, r6
 800186c:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001870:	4a22      	ldr	r2, [pc, #136]	; (80018fc <HAL_GPIO_Init+0x1ec>)
 8001872:	4290      	cmp	r0, r2
 8001874:	f43f af7a 	beq.w	800176c <HAL_GPIO_Init+0x5c>
 8001878:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800187c:	4290      	cmp	r0, r2
 800187e:	d022      	beq.n	80018c6 <HAL_GPIO_Init+0x1b6>
 8001880:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001884:	4290      	cmp	r0, r2
 8001886:	d020      	beq.n	80018ca <HAL_GPIO_Init+0x1ba>
 8001888:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800188c:	4290      	cmp	r0, r2
 800188e:	d01e      	beq.n	80018ce <HAL_GPIO_Init+0x1be>
 8001890:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001894:	4290      	cmp	r0, r2
 8001896:	d01c      	beq.n	80018d2 <HAL_GPIO_Init+0x1c2>
 8001898:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800189c:	4290      	cmp	r0, r2
 800189e:	d01a      	beq.n	80018d6 <HAL_GPIO_Init+0x1c6>
 80018a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018a4:	4290      	cmp	r0, r2
 80018a6:	d018      	beq.n	80018da <HAL_GPIO_Init+0x1ca>
 80018a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018ac:	4290      	cmp	r0, r2
 80018ae:	d016      	beq.n	80018de <HAL_GPIO_Init+0x1ce>
 80018b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018b4:	4290      	cmp	r0, r2
 80018b6:	d014      	beq.n	80018e2 <HAL_GPIO_Init+0x1d2>
 80018b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018bc:	4290      	cmp	r0, r2
 80018be:	f43f af53 	beq.w	8001768 <HAL_GPIO_Init+0x58>
 80018c2:	220a      	movs	r2, #10
 80018c4:	e753      	b.n	800176e <HAL_GPIO_Init+0x5e>
 80018c6:	2201      	movs	r2, #1
 80018c8:	e751      	b.n	800176e <HAL_GPIO_Init+0x5e>
 80018ca:	2202      	movs	r2, #2
 80018cc:	e74f      	b.n	800176e <HAL_GPIO_Init+0x5e>
 80018ce:	2203      	movs	r2, #3
 80018d0:	e74d      	b.n	800176e <HAL_GPIO_Init+0x5e>
 80018d2:	2204      	movs	r2, #4
 80018d4:	e74b      	b.n	800176e <HAL_GPIO_Init+0x5e>
 80018d6:	2205      	movs	r2, #5
 80018d8:	e749      	b.n	800176e <HAL_GPIO_Init+0x5e>
 80018da:	2206      	movs	r2, #6
 80018dc:	e747      	b.n	800176e <HAL_GPIO_Init+0x5e>
 80018de:	2207      	movs	r2, #7
 80018e0:	e745      	b.n	800176e <HAL_GPIO_Init+0x5e>
 80018e2:	2208      	movs	r2, #8
 80018e4:	e743      	b.n	800176e <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 80018e6:	b002      	add	sp, #8
 80018e8:	bcf0      	pop	{r4, r5, r6, r7}
 80018ea:	4770      	bx	lr
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40013800 	.word	0x40013800
 80018f4:	40013c00 	.word	0x40013c00
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020000 	.word	0x40020000

08001900 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001900:	6903      	ldr	r3, [r0, #16]
 8001902:	4219      	tst	r1, r3
 8001904:	d001      	beq.n	800190a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8001906:	2001      	movs	r0, #1
 8001908:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800190a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800190c:	4770      	bx	lr

0800190e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800190e:	b10a      	cbz	r2, 8001914 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001910:	6181      	str	r1, [r0, #24]
 8001912:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001914:	0409      	lsls	r1, r1, #16
 8001916:	6181      	str	r1, [r0, #24]
  }
}
 8001918:	4770      	bx	lr

0800191a <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800191a:	6803      	ldr	r3, [r0, #0]
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001922:	d101      	bne.n	8001928 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8001924:	2000      	movs	r0, #0
}
 8001926:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001928:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800192c:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800192e:	2300      	movs	r3, #0
 8001930:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001932:	2220      	movs	r2, #32
 8001934:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001938:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800193c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800193e:	f042 0204 	orr.w	r2, r2, #4
 8001942:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8001944:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8001948:	2001      	movs	r0, #1
 800194a:	4770      	bx	lr

0800194c <I2C_WaitOnFlagUntilTimeout>:
{
 800194c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001950:	4607      	mov	r7, r0
 8001952:	460d      	mov	r5, r1
 8001954:	4690      	mov	r8, r2
 8001956:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001958:	e022      	b.n	80019a0 <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800195a:	f7ff fe55 	bl	8001608 <HAL_GetTick>
 800195e:	9b06      	ldr	r3, [sp, #24]
 8001960:	1ac0      	subs	r0, r0, r3
 8001962:	42b0      	cmp	r0, r6
 8001964:	d800      	bhi.n	8001968 <I2C_WaitOnFlagUntilTimeout+0x1c>
 8001966:	b9de      	cbnz	r6, 80019a0 <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001968:	2300      	movs	r3, #0
 800196a:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800196c:	2220      	movs	r2, #32
 800196e:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001972:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001976:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001978:	f042 0220 	orr.w	r2, r2, #32
 800197c:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800197e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 8001982:	2001      	movs	r0, #1
 8001984:	e01a      	b.n	80019bc <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	699c      	ldr	r4, [r3, #24]
 800198a:	ea25 0404 	bic.w	r4, r5, r4
 800198e:	b2a4      	uxth	r4, r4
 8001990:	fab4 f484 	clz	r4, r4
 8001994:	0964      	lsrs	r4, r4, #5
 8001996:	45a0      	cmp	r8, r4
 8001998:	d10f      	bne.n	80019ba <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 800199a:	f1b6 3fff 	cmp.w	r6, #4294967295
 800199e:	d1dc      	bne.n	800195a <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019a0:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d1ee      	bne.n	8001986 <I2C_WaitOnFlagUntilTimeout+0x3a>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	695c      	ldr	r4, [r3, #20]
 80019ac:	ea25 0404 	bic.w	r4, r5, r4
 80019b0:	b2a4      	uxth	r4, r4
 80019b2:	fab4 f484 	clz	r4, r4
 80019b6:	0964      	lsrs	r4, r4, #5
 80019b8:	e7ed      	b.n	8001996 <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 80019ba:	2000      	movs	r0, #0
}
 80019bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080019c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80019c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019c4:	4605      	mov	r5, r0
 80019c6:	460e      	mov	r6, r1
 80019c8:	4617      	mov	r7, r2
 80019ca:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019cc:	e03d      	b.n	8001a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019d4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019d6:	682b      	ldr	r3, [r5, #0]
 80019d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019dc:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80019de:	2300      	movs	r3, #0
 80019e0:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80019e2:	2220      	movs	r2, #32
 80019e4:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019e8:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80019ec:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80019ee:	f042 0204 	orr.w	r2, r2, #4
 80019f2:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80019f4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80019f8:	2001      	movs	r0, #1
 80019fa:	e034      	b.n	8001a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019fc:	f7ff fe04 	bl	8001608 <HAL_GetTick>
 8001a00:	eba0 0008 	sub.w	r0, r0, r8
 8001a04:	42b8      	cmp	r0, r7
 8001a06:	d800      	bhi.n	8001a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 8001a08:	b9ff      	cbnz	r7, 8001a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a0e:	2220      	movs	r2, #32
 8001a10:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a14:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a18:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001a1a:	f042 0220 	orr.w	r2, r2, #32
 8001a1e:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001a20:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8001a24:	2001      	movs	r0, #1
 8001a26:	e01e      	b.n	8001a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a28:	682b      	ldr	r3, [r5, #0]
 8001a2a:	699c      	ldr	r4, [r3, #24]
 8001a2c:	ea26 0404 	bic.w	r4, r6, r4
 8001a30:	b2a4      	uxth	r4, r4
 8001a32:	3c00      	subs	r4, #0
 8001a34:	bf18      	it	ne
 8001a36:	2401      	movne	r4, #1
 8001a38:	b1a4      	cbz	r4, 8001a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a3a:	682b      	ldr	r3, [r5, #0]
 8001a3c:	695a      	ldr	r2, [r3, #20]
 8001a3e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001a42:	d1c4      	bne.n	80019ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8001a44:	f1b7 3fff 	cmp.w	r7, #4294967295
 8001a48:	d1d8      	bne.n	80019fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a4a:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d1ea      	bne.n	8001a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8001a52:	682b      	ldr	r3, [r5, #0]
 8001a54:	695c      	ldr	r4, [r3, #20]
 8001a56:	ea26 0404 	bic.w	r4, r6, r4
 8001a5a:	b2a4      	uxth	r4, r4
 8001a5c:	3c00      	subs	r4, #0
 8001a5e:	bf18      	it	ne
 8001a60:	2401      	movne	r4, #1
 8001a62:	e7e9      	b.n	8001a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 8001a64:	2000      	movs	r0, #0
}
 8001a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001a6c <I2C_MasterRequestWrite>:
{
 8001a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	4604      	mov	r4, r0
 8001a72:	460d      	mov	r5, r1
 8001a74:	4616      	mov	r6, r2
 8001a76:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a78:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a7a:	2b08      	cmp	r3, #8
 8001a7c:	d00d      	beq.n	8001a9a <I2C_MasterRequestWrite+0x2e>
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d00b      	beq.n	8001a9a <I2C_MasterRequestWrite+0x2e>
 8001a82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a86:	d008      	beq.n	8001a9a <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a88:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001a8a:	2b12      	cmp	r3, #18
 8001a8c:	d10a      	bne.n	8001aa4 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a8e:	6802      	ldr	r2, [r0, #0]
 8001a90:	6813      	ldr	r3, [r2, #0]
 8001a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	e004      	b.n	8001aa4 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a9a:	6822      	ldr	r2, [r4, #0]
 8001a9c:	6813      	ldr	r3, [r2, #0]
 8001a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa2:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001aa4:	9700      	str	r7, [sp, #0]
 8001aa6:	4633      	mov	r3, r6
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001aae:	4620      	mov	r0, r4
 8001ab0:	f7ff ff4c 	bl	800194c <I2C_WaitOnFlagUntilTimeout>
 8001ab4:	b980      	cbnz	r0, 8001ad8 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ab6:	6923      	ldr	r3, [r4, #16]
 8001ab8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001abc:	d116      	bne.n	8001aec <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001abe:	6823      	ldr	r3, [r4, #0]
 8001ac0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001ac4:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	4632      	mov	r2, r6
 8001aca:	4913      	ldr	r1, [pc, #76]	; (8001b18 <I2C_MasterRequestWrite+0xac>)
 8001acc:	4620      	mov	r0, r4
 8001ace:	f7ff ff77 	bl	80019c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ad2:	b9f8      	cbnz	r0, 8001b14 <I2C_MasterRequestWrite+0xa8>
}
 8001ad4:	b003      	add	sp, #12
 8001ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ae0:	d002      	beq.n	8001ae8 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ae6:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8001ae8:	2003      	movs	r0, #3
 8001aea:	e7f3      	b.n	8001ad4 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001aec:	11eb      	asrs	r3, r5, #7
 8001aee:	6822      	ldr	r2, [r4, #0]
 8001af0:	f003 0306 	and.w	r3, r3, #6
 8001af4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001af8:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001afa:	463b      	mov	r3, r7
 8001afc:	4632      	mov	r2, r6
 8001afe:	4907      	ldr	r1, [pc, #28]	; (8001b1c <I2C_MasterRequestWrite+0xb0>)
 8001b00:	4620      	mov	r0, r4
 8001b02:	f7ff ff5d 	bl	80019c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b06:	b918      	cbnz	r0, 8001b10 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b08:	6823      	ldr	r3, [r4, #0]
 8001b0a:	b2ed      	uxtb	r5, r5
 8001b0c:	611d      	str	r5, [r3, #16]
 8001b0e:	e7da      	b.n	8001ac6 <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8001b10:	2001      	movs	r0, #1
 8001b12:	e7df      	b.n	8001ad4 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8001b14:	2001      	movs	r0, #1
 8001b16:	e7dd      	b.n	8001ad4 <I2C_MasterRequestWrite+0x68>
 8001b18:	00010002 	.word	0x00010002
 8001b1c:	00010008 	.word	0x00010008

08001b20 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001b20:	b570      	push	{r4, r5, r6, lr}
 8001b22:	4604      	mov	r4, r0
 8001b24:	460d      	mov	r5, r1
 8001b26:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b28:	6823      	ldr	r3, [r4, #0]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b30:	d11c      	bne.n	8001b6c <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b32:	4620      	mov	r0, r4
 8001b34:	f7ff fef1 	bl	800191a <I2C_IsAcknowledgeFailed>
 8001b38:	b9d0      	cbnz	r0, 8001b70 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001b3a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001b3e:	d0f3      	beq.n	8001b28 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b40:	f7ff fd62 	bl	8001608 <HAL_GetTick>
 8001b44:	1b80      	subs	r0, r0, r6
 8001b46:	42a8      	cmp	r0, r5
 8001b48:	d801      	bhi.n	8001b4e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001b4a:	2d00      	cmp	r5, #0
 8001b4c:	d1ec      	bne.n	8001b28 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b52:	2220      	movs	r2, #32
 8001b54:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b58:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b5c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b5e:	f042 0220 	orr.w	r2, r2, #32
 8001b62:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001b64:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001b68:	2001      	movs	r0, #1
 8001b6a:	e000      	b.n	8001b6e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001b6c:	2000      	movs	r0, #0
}
 8001b6e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001b70:	2001      	movs	r0, #1
 8001b72:	e7fc      	b.n	8001b6e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08001b74 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001b74:	b570      	push	{r4, r5, r6, lr}
 8001b76:	4604      	mov	r4, r0
 8001b78:	460d      	mov	r5, r1
 8001b7a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	f013 0f04 	tst.w	r3, #4
 8001b84:	d11c      	bne.n	8001bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b86:	4620      	mov	r0, r4
 8001b88:	f7ff fec7 	bl	800191a <I2C_IsAcknowledgeFailed>
 8001b8c:	b9d0      	cbnz	r0, 8001bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001b8e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001b92:	d0f3      	beq.n	8001b7c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b94:	f7ff fd38 	bl	8001608 <HAL_GetTick>
 8001b98:	1b80      	subs	r0, r0, r6
 8001b9a:	42a8      	cmp	r0, r5
 8001b9c:	d801      	bhi.n	8001ba2 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001b9e:	2d00      	cmp	r5, #0
 8001ba0:	d1ec      	bne.n	8001b7c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bb0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001bb2:	f042 0220 	orr.w	r2, r2, #32
 8001bb6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001bb8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	e000      	b.n	8001bc2 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001bc0:	2000      	movs	r0, #0
}
 8001bc2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	e7fc      	b.n	8001bc2 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08001bc8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	f000 80cc 	beq.w	8001d66 <HAL_I2C_Init+0x19e>
{
 8001bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bd2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d077      	beq.n	8001cca <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bda:	2324      	movs	r3, #36	; 0x24
 8001bdc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001be0:	6822      	ldr	r2, [r4, #0]
 8001be2:	6813      	ldr	r3, [r2, #0]
 8001be4:	f023 0301 	bic.w	r3, r3, #1
 8001be8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bea:	6822      	ldr	r2, [r4, #0]
 8001bec:	6813      	ldr	r3, [r2, #0]
 8001bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bf2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bf4:	6822      	ldr	r2, [r4, #0]
 8001bf6:	6813      	ldr	r3, [r2, #0]
 8001bf8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001bfc:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bfe:	f000 fd8d 	bl	800271c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c02:	6862      	ldr	r2, [r4, #4]
 8001c04:	4b5a      	ldr	r3, [pc, #360]	; (8001d70 <HAL_I2C_Init+0x1a8>)
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d864      	bhi.n	8001cd4 <HAL_I2C_Init+0x10c>
 8001c0a:	4b5a      	ldr	r3, [pc, #360]	; (8001d74 <HAL_I2C_Init+0x1ac>)
 8001c0c:	4298      	cmp	r0, r3
 8001c0e:	bf8c      	ite	hi
 8001c10:	2300      	movhi	r3, #0
 8001c12:	2301      	movls	r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f040 80a8 	bne.w	8001d6a <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8001c1a:	4d57      	ldr	r5, [pc, #348]	; (8001d78 <HAL_I2C_Init+0x1b0>)
 8001c1c:	fba5 3500 	umull	r3, r5, r5, r0
 8001c20:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c22:	6826      	ldr	r6, [r4, #0]
 8001c24:	6871      	ldr	r1, [r6, #4]
 8001c26:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001c2a:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8001c2e:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c30:	6821      	ldr	r1, [r4, #0]
 8001c32:	6a0b      	ldr	r3, [r1, #32]
 8001c34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c38:	6865      	ldr	r5, [r4, #4]
 8001c3a:	4a4d      	ldr	r2, [pc, #308]	; (8001d70 <HAL_I2C_Init+0x1a8>)
 8001c3c:	4295      	cmp	r5, r2
 8001c3e:	d84f      	bhi.n	8001ce0 <HAL_I2C_Init+0x118>
 8001c40:	1c7a      	adds	r2, r7, #1
 8001c42:	4313      	orrs	r3, r2
 8001c44:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c46:	6825      	ldr	r5, [r4, #0]
 8001c48:	69e9      	ldr	r1, [r5, #28]
 8001c4a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001c4e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001c52:	6863      	ldr	r3, [r4, #4]
 8001c54:	4a46      	ldr	r2, [pc, #280]	; (8001d70 <HAL_I2C_Init+0x1a8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d84c      	bhi.n	8001cf4 <HAL_I2C_Init+0x12c>
 8001c5a:	3801      	subs	r0, #1
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c62:	3001      	adds	r0, #1
 8001c64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c68:	4218      	tst	r0, r3
 8001c6a:	d078      	beq.n	8001d5e <HAL_I2C_Init+0x196>
 8001c6c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001c70:	430b      	orrs	r3, r1
 8001c72:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c74:	6821      	ldr	r1, [r4, #0]
 8001c76:	680b      	ldr	r3, [r1, #0]
 8001c78:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001c7c:	69e2      	ldr	r2, [r4, #28]
 8001c7e:	6a20      	ldr	r0, [r4, #32]
 8001c80:	4302      	orrs	r2, r0
 8001c82:	4313      	orrs	r3, r2
 8001c84:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c86:	6821      	ldr	r1, [r4, #0]
 8001c88:	688b      	ldr	r3, [r1, #8]
 8001c8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c92:	6922      	ldr	r2, [r4, #16]
 8001c94:	68e0      	ldr	r0, [r4, #12]
 8001c96:	4302      	orrs	r2, r0
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c9c:	6821      	ldr	r1, [r4, #0]
 8001c9e:	68cb      	ldr	r3, [r1, #12]
 8001ca0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ca4:	6962      	ldr	r2, [r4, #20]
 8001ca6:	69a0      	ldr	r0, [r4, #24]
 8001ca8:	4302      	orrs	r2, r0
 8001caa:	4313      	orrs	r3, r2
 8001cac:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001cae:	6822      	ldr	r2, [r4, #0]
 8001cb0:	6813      	ldr	r3, [r2, #0]
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb8:	2000      	movs	r0, #0
 8001cba:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cbc:	2320      	movs	r3, #32
 8001cbe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cc2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8001cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001cca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001cce:	f7ff fb4f 	bl	8001370 <HAL_I2C_MspInit>
 8001cd2:	e782      	b.n	8001bda <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cd4:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <HAL_I2C_Init+0x1b4>)
 8001cd6:	4298      	cmp	r0, r3
 8001cd8:	bf8c      	ite	hi
 8001cda:	2300      	movhi	r3, #0
 8001cdc:	2301      	movls	r3, #1
 8001cde:	e799      	b.n	8001c14 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ce0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ce4:	fb02 f207 	mul.w	r2, r2, r7
 8001ce8:	4d25      	ldr	r5, [pc, #148]	; (8001d80 <HAL_I2C_Init+0x1b8>)
 8001cea:	fba5 5202 	umull	r5, r2, r5, r2
 8001cee:	0992      	lsrs	r2, r2, #6
 8001cf0:	3201      	adds	r2, #1
 8001cf2:	e7a6      	b.n	8001c42 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cf4:	68a2      	ldr	r2, [r4, #8]
 8001cf6:	b9ba      	cbnz	r2, 8001d28 <HAL_I2C_Init+0x160>
 8001cf8:	1e46      	subs	r6, r0, #1
 8001cfa:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8001cfe:	fbb6 f6f7 	udiv	r6, r6, r7
 8001d02:	3601      	adds	r6, #1
 8001d04:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001d08:	fab6 f686 	clz	r6, r6
 8001d0c:	0976      	lsrs	r6, r6, #5
 8001d0e:	bb46      	cbnz	r6, 8001d62 <HAL_I2C_Init+0x19a>
 8001d10:	b9c2      	cbnz	r2, 8001d44 <HAL_I2C_Init+0x17c>
 8001d12:	1e42      	subs	r2, r0, #1
 8001d14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001d18:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d1c:	3201      	adds	r2, #1
 8001d1e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001d22:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8001d26:	e7a3      	b.n	8001c70 <HAL_I2C_Init+0xa8>
 8001d28:	1e46      	subs	r6, r0, #1
 8001d2a:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8001d2e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8001d32:	fbb6 f6f7 	udiv	r6, r6, r7
 8001d36:	3601      	adds	r6, #1
 8001d38:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001d3c:	fab6 f686 	clz	r6, r6
 8001d40:	0976      	lsrs	r6, r6, #5
 8001d42:	e7e4      	b.n	8001d0e <HAL_I2C_Init+0x146>
 8001d44:	1e42      	subs	r2, r0, #1
 8001d46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001d4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001d4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d52:	3201      	adds	r2, #1
 8001d54:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001d58:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8001d5c:	e788      	b.n	8001c70 <HAL_I2C_Init+0xa8>
 8001d5e:	2304      	movs	r3, #4
 8001d60:	e786      	b.n	8001c70 <HAL_I2C_Init+0xa8>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e784      	b.n	8001c70 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8001d66:	2001      	movs	r0, #1
}
 8001d68:	4770      	bx	lr
    return HAL_ERROR;
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	e7ac      	b.n	8001cc8 <HAL_I2C_Init+0x100>
 8001d6e:	bf00      	nop
 8001d70:	000186a0 	.word	0x000186a0
 8001d74:	001e847f 	.word	0x001e847f
 8001d78:	431bde83 	.word	0x431bde83
 8001d7c:	003d08ff 	.word	0x003d08ff
 8001d80:	10624dd3 	.word	0x10624dd3

08001d84 <HAL_I2C_Master_Transmit>:
{
 8001d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d88:	b085      	sub	sp, #20
 8001d8a:	4604      	mov	r4, r0
 8001d8c:	460f      	mov	r7, r1
 8001d8e:	4691      	mov	r9, r2
 8001d90:	4698      	mov	r8, r3
 8001d92:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff fc38 	bl	8001608 <HAL_GetTick>
 8001d98:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d9a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8001d9e:	b2c0      	uxtb	r0, r0
 8001da0:	2820      	cmp	r0, #32
 8001da2:	d004      	beq.n	8001dae <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8001da4:	2702      	movs	r7, #2
}
 8001da6:	4638      	mov	r0, r7
 8001da8:	b005      	add	sp, #20
 8001daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dae:	9500      	str	r5, [sp, #0]
 8001db0:	2319      	movs	r3, #25
 8001db2:	2201      	movs	r2, #1
 8001db4:	494f      	ldr	r1, [pc, #316]	; (8001ef4 <HAL_I2C_Master_Transmit+0x170>)
 8001db6:	4620      	mov	r0, r4
 8001db8:	f7ff fdc8 	bl	800194c <I2C_WaitOnFlagUntilTimeout>
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	f040 8092 	bne.w	8001ee6 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8001dc2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	f000 808f 	beq.w	8001eea <HAL_I2C_Master_Transmit+0x166>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dd2:	6823      	ldr	r3, [r4, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	f012 0f01 	tst.w	r2, #1
 8001dda:	d103      	bne.n	8001de4 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001de4:	6822      	ldr	r2, [r4, #0]
 8001de6:	6813      	ldr	r3, [r2, #0]
 8001de8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001dec:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001dee:	2321      	movs	r3, #33	; 0x21
 8001df0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001df4:	2310      	movs	r3, #16
 8001df6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001dfe:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e02:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e08:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ef8 <HAL_I2C_Master_Transmit+0x174>)
 8001e0c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e0e:	462b      	mov	r3, r5
 8001e10:	4632      	mov	r2, r6
 8001e12:	4639      	mov	r1, r7
 8001e14:	4620      	mov	r0, r4
 8001e16:	f7ff fe29 	bl	8001a6c <I2C_MasterRequestWrite>
 8001e1a:	4607      	mov	r7, r0
 8001e1c:	2800      	cmp	r0, #0
 8001e1e:	d166      	bne.n	8001eee <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e20:	2300      	movs	r3, #0
 8001e22:	9303      	str	r3, [sp, #12]
 8001e24:	6823      	ldr	r3, [r4, #0]
 8001e26:	695a      	ldr	r2, [r3, #20]
 8001e28:	9203      	str	r2, [sp, #12]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	9303      	str	r3, [sp, #12]
 8001e2e:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001e30:	e011      	b.n	8001e56 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d001      	beq.n	8001e3c <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8001e38:	2701      	movs	r7, #1
 8001e3a:	e7b4      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e3c:	6822      	ldr	r2, [r4, #0]
 8001e3e:	6813      	ldr	r3, [r2, #0]
 8001e40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e7f7      	b.n	8001e38 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e48:	462a      	mov	r2, r5
 8001e4a:	4631      	mov	r1, r6
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f7ff fe91 	bl	8001b74 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e52:	2800      	cmp	r0, #0
 8001e54:	d12e      	bne.n	8001eb4 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 8001e56:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d036      	beq.n	8001eca <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e5c:	462a      	mov	r2, r5
 8001e5e:	4631      	mov	r1, r6
 8001e60:	4620      	mov	r0, r4
 8001e62:	f7ff fe5d 	bl	8001b20 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e66:	2800      	cmp	r0, #0
 8001e68:	d1e3      	bne.n	8001e32 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e6c:	6823      	ldr	r3, [r4, #0]
 8001e6e:	7812      	ldrb	r2, [r2, #0]
 8001e70:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001e72:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e74:	1c4b      	adds	r3, r1, #1
 8001e76:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001e78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001e82:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e8a:	6822      	ldr	r2, [r4, #0]
 8001e8c:	6950      	ldr	r0, [r2, #20]
 8001e8e:	f010 0f04 	tst.w	r0, #4
 8001e92:	d0d9      	beq.n	8001e48 <HAL_I2C_Master_Transmit+0xc4>
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0d7      	beq.n	8001e48 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e98:	784b      	ldrb	r3, [r1, #1]
 8001e9a:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8001e9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001ea2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001eac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	8523      	strh	r3, [r4, #40]	; 0x28
 8001eb2:	e7c9      	b.n	8001e48 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d001      	beq.n	8001ebe <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 8001eba:	2701      	movs	r7, #1
 8001ebc:	e773      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ebe:	6822      	ldr	r2, [r4, #0]
 8001ec0:	6813      	ldr	r3, [r2, #0]
 8001ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	e7f7      	b.n	8001eba <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eca:	6822      	ldr	r2, [r4, #0]
 8001ecc:	6813      	ldr	r3, [r2, #0]
 8001ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ed2:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ed4:	2320      	movs	r3, #32
 8001ed6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001ee0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001ee4:	e75f      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8001ee6:	2702      	movs	r7, #2
 8001ee8:	e75d      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8001eea:	2702      	movs	r7, #2
 8001eec:	e75b      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8001eee:	2701      	movs	r7, #1
 8001ef0:	e759      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x22>
 8001ef2:	bf00      	nop
 8001ef4:	00100002 	.word	0x00100002
 8001ef8:	ffff0000 	.word	0xffff0000

08001efc <HAL_I2C_IsDeviceReady>:
{
 8001efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f00:	b084      	sub	sp, #16
 8001f02:	4605      	mov	r5, r0
 8001f04:	4689      	mov	r9, r1
 8001f06:	4692      	mov	sl, r2
 8001f08:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 8001f0a:	f7ff fb7d 	bl	8001608 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f0e:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b20      	cmp	r3, #32
 8001f16:	d003      	beq.n	8001f20 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8001f18:	2002      	movs	r0, #2
}
 8001f1a:	b004      	add	sp, #16
 8001f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f20:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f22:	9000      	str	r0, [sp, #0]
 8001f24:	2319      	movs	r3, #25
 8001f26:	2201      	movs	r2, #1
 8001f28:	4958      	ldr	r1, [pc, #352]	; (800208c <HAL_I2C_IsDeviceReady+0x190>)
 8001f2a:	4628      	mov	r0, r5
 8001f2c:	f7ff fd0e 	bl	800194c <I2C_WaitOnFlagUntilTimeout>
 8001f30:	2800      	cmp	r0, #0
 8001f32:	f040 80a2 	bne.w	800207a <HAL_I2C_IsDeviceReady+0x17e>
    __HAL_LOCK(hi2c);
 8001f36:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	f000 809f 	beq.w	800207e <HAL_I2C_IsDeviceReady+0x182>
 8001f40:	2301      	movs	r3, #1
 8001f42:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f46:	682b      	ldr	r3, [r5, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	f012 0f01 	tst.w	r2, #1
 8001f4e:	d103      	bne.n	8001f58 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f58:	682a      	ldr	r2, [r5, #0]
 8001f5a:	6813      	ldr	r3, [r2, #0]
 8001f5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f60:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f62:	2324      	movs	r3, #36	; 0x24
 8001f64:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f6c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001f70:	62eb      	str	r3, [r5, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 8001f72:	f04f 0801 	mov.w	r8, #1
 8001f76:	e03f      	b.n	8001ff8 <HAL_I2C_IsDeviceReady+0xfc>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f78:	682b      	ldr	r3, [r5, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001f80:	d002      	beq.n	8001f88 <HAL_I2C_IsDeviceReady+0x8c>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f86:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_TIMEOUT;
 8001f88:	2003      	movs	r0, #3
 8001f8a:	e7c6      	b.n	8001f1a <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001f8c:	23a0      	movs	r3, #160	; 0xa0
 8001f8e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f92:	682a      	ldr	r2, [r5, #0]
 8001f94:	6953      	ldr	r3, [r2, #20]
 8001f96:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f9a:	6952      	ldr	r2, [r2, #20]
 8001f9c:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001fa0:	f895 403d 	ldrb.w	r4, [r5, #61]	; 0x3d
 8001fa4:	b2e4      	uxtb	r4, r4
 8001fa6:	2ca0      	cmp	r4, #160	; 0xa0
 8001fa8:	d009      	beq.n	8001fbe <HAL_I2C_IsDeviceReady+0xc2>
 8001faa:	b943      	cbnz	r3, 8001fbe <HAL_I2C_IsDeviceReady+0xc2>
 8001fac:	b93a      	cbnz	r2, 8001fbe <HAL_I2C_IsDeviceReady+0xc2>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001fae:	f7ff fb2b 	bl	8001608 <HAL_GetTick>
 8001fb2:	1bc0      	subs	r0, r0, r7
 8001fb4:	42b0      	cmp	r0, r6
 8001fb6:	d8e9      	bhi.n	8001f8c <HAL_I2C_IsDeviceReady+0x90>
 8001fb8:	2e00      	cmp	r6, #0
 8001fba:	d1ea      	bne.n	8001f92 <HAL_I2C_IsDeviceReady+0x96>
 8001fbc:	e7e6      	b.n	8001f8c <HAL_I2C_IsDeviceReady+0x90>
      hi2c->State = HAL_I2C_STATE_READY;
 8001fbe:	2320      	movs	r3, #32
 8001fc0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001fc4:	682b      	ldr	r3, [r5, #0]
 8001fc6:	695a      	ldr	r2, [r3, #20]
 8001fc8:	f012 0f02 	tst.w	r2, #2
 8001fcc:	d132      	bne.n	8002034 <HAL_I2C_IsDeviceReady+0x138>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fd4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fd6:	682b      	ldr	r3, [r5, #0]
 8001fd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fdc:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fde:	9700      	str	r7, [sp, #0]
 8001fe0:	2319      	movs	r3, #25
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	4929      	ldr	r1, [pc, #164]	; (800208c <HAL_I2C_IsDeviceReady+0x190>)
 8001fe6:	4628      	mov	r0, r5
 8001fe8:	f7ff fcb0 	bl	800194c <I2C_WaitOnFlagUntilTimeout>
 8001fec:	2800      	cmp	r0, #0
 8001fee:	d14a      	bne.n	8002086 <HAL_I2C_IsDeviceReady+0x18a>
      I2C_Trials++;
 8001ff0:	f108 0801 	add.w	r8, r8, #1
    while (I2C_Trials < Trials);
 8001ff4:	45d0      	cmp	r8, sl
 8001ff6:	d238      	bcs.n	800206a <HAL_I2C_IsDeviceReady+0x16e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ff8:	682a      	ldr	r2, [r5, #0]
 8001ffa:	6813      	ldr	r3, [r2, #0]
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002000:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002002:	9700      	str	r7, [sp, #0]
 8002004:	4633      	mov	r3, r6
 8002006:	2200      	movs	r2, #0
 8002008:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800200c:	4628      	mov	r0, r5
 800200e:	f7ff fc9d 	bl	800194c <I2C_WaitOnFlagUntilTimeout>
 8002012:	2800      	cmp	r0, #0
 8002014:	d1b0      	bne.n	8001f78 <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002016:	682b      	ldr	r3, [r5, #0]
 8002018:	f009 02fe 	and.w	r2, r9, #254	; 0xfe
 800201c:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 800201e:	f7ff faf3 	bl	8001608 <HAL_GetTick>
 8002022:	4607      	mov	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002024:	682a      	ldr	r2, [r5, #0]
 8002026:	6953      	ldr	r3, [r2, #20]
 8002028:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800202c:	6952      	ldr	r2, [r2, #20]
 800202e:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002032:	e7b5      	b.n	8001fa0 <HAL_I2C_IsDeviceReady+0xa4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800203a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800203c:	2300      	movs	r3, #0
 800203e:	9303      	str	r3, [sp, #12]
 8002040:	682b      	ldr	r3, [r5, #0]
 8002042:	695a      	ldr	r2, [r3, #20]
 8002044:	9203      	str	r2, [sp, #12]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	9303      	str	r3, [sp, #12]
 800204a:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800204c:	9700      	str	r7, [sp, #0]
 800204e:	2319      	movs	r3, #25
 8002050:	2201      	movs	r2, #1
 8002052:	490e      	ldr	r1, [pc, #56]	; (800208c <HAL_I2C_IsDeviceReady+0x190>)
 8002054:	4628      	mov	r0, r5
 8002056:	f7ff fc79 	bl	800194c <I2C_WaitOnFlagUntilTimeout>
 800205a:	b990      	cbnz	r0, 8002082 <HAL_I2C_IsDeviceReady+0x186>
        hi2c->State = HAL_I2C_STATE_READY;
 800205c:	2320      	movs	r3, #32
 800205e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8002062:	2300      	movs	r3, #0
 8002064:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_OK;
 8002068:	e757      	b.n	8001f1a <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 800206a:	2320      	movs	r3, #32
 800206c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002070:	2300      	movs	r3, #0
 8002072:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    return HAL_ERROR;
 8002076:	2001      	movs	r0, #1
 8002078:	e74f      	b.n	8001f1a <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 800207a:	2002      	movs	r0, #2
 800207c:	e74d      	b.n	8001f1a <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 800207e:	2002      	movs	r0, #2
 8002080:	e74b      	b.n	8001f1a <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8002082:	2001      	movs	r0, #1
 8002084:	e749      	b.n	8001f1a <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8002086:	2001      	movs	r0, #1
 8002088:	e747      	b.n	8001f1a <HAL_I2C_IsDeviceReady+0x1e>
 800208a:	bf00      	nop
 800208c:	00100002 	.word	0x00100002

08002090 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002090:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b20      	cmp	r3, #32
 8002098:	d001      	beq.n	800209e <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800209a:	2002      	movs	r0, #2
  }
}
 800209c:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 800209e:	2324      	movs	r3, #36	; 0x24
 80020a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 80020a4:	6802      	ldr	r2, [r0, #0]
 80020a6:	6813      	ldr	r3, [r2, #0]
 80020a8:	f023 0301 	bic.w	r3, r3, #1
 80020ac:	6013      	str	r3, [r2, #0]
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80020ae:	6802      	ldr	r2, [r0, #0]
 80020b0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80020b2:	f023 0310 	bic.w	r3, r3, #16
 80020b6:	6253      	str	r3, [r2, #36]	; 0x24
    hi2c->Instance->FLTR |= AnalogFilter;
 80020b8:	6802      	ldr	r2, [r0, #0]
 80020ba:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80020bc:	4319      	orrs	r1, r3
 80020be:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 80020c0:	6802      	ldr	r2, [r0, #0]
 80020c2:	6813      	ldr	r3, [r2, #0]
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80020ca:	2320      	movs	r3, #32
 80020cc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_OK;
 80020d0:	2000      	movs	r0, #0
 80020d2:	4770      	bx	lr

080020d4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b20      	cmp	r3, #32
 80020dc:	d001      	beq.n	80020e2 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80020de:	2002      	movs	r0, #2
  }
}
 80020e0:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 80020e2:	2324      	movs	r3, #36	; 0x24
 80020e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 80020e8:	6802      	ldr	r2, [r0, #0]
 80020ea:	6813      	ldr	r3, [r2, #0]
 80020ec:	f023 0301 	bic.w	r3, r3, #1
 80020f0:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->FLTR;
 80020f2:	6802      	ldr	r2, [r0, #0]
 80020f4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80020f6:	b29b      	uxth	r3, r3
    tmpreg &= ~(I2C_FLTR_DNF);
 80020f8:	f023 030f 	bic.w	r3, r3, #15
    tmpreg |= DigitalFilter;
 80020fc:	4319      	orrs	r1, r3
 80020fe:	b289      	uxth	r1, r1
    hi2c->Instance->FLTR = tmpreg;
 8002100:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 8002102:	6802      	ldr	r2, [r0, #0]
 8002104:	6813      	ldr	r3, [r2, #0]
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800210c:	2320      	movs	r3, #32
 800210e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_OK;
 8002112:	2000      	movs	r0, #0
 8002114:	4770      	bx	lr
	...

08002118 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002118:	2800      	cmp	r0, #0
 800211a:	f000 81df 	beq.w	80024dc <HAL_RCC_OscConfig+0x3c4>
{
 800211e:	b570      	push	{r4, r5, r6, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002124:	6803      	ldr	r3, [r0, #0]
 8002126:	f013 0f01 	tst.w	r3, #1
 800212a:	d03b      	beq.n	80021a4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800212c:	4ba6      	ldr	r3, [pc, #664]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 030c 	and.w	r3, r3, #12
 8002134:	2b04      	cmp	r3, #4
 8002136:	d02c      	beq.n	8002192 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002138:	4ba3      	ldr	r3, [pc, #652]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002140:	2b08      	cmp	r3, #8
 8002142:	d021      	beq.n	8002188 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002144:	6863      	ldr	r3, [r4, #4]
 8002146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800214a:	d04f      	beq.n	80021ec <HAL_RCC_OscConfig+0xd4>
 800214c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002150:	d052      	beq.n	80021f8 <HAL_RCC_OscConfig+0xe0>
 8002152:	4b9d      	ldr	r3, [pc, #628]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002162:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002164:	6863      	ldr	r3, [r4, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d050      	beq.n	800220c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216a:	f7ff fa4d 	bl	8001608 <HAL_GetTick>
 800216e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002170:	4b95      	ldr	r3, [pc, #596]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002178:	d114      	bne.n	80021a4 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800217a:	f7ff fa45 	bl	8001608 <HAL_GetTick>
 800217e:	1b40      	subs	r0, r0, r5
 8002180:	2864      	cmp	r0, #100	; 0x64
 8002182:	d9f5      	bls.n	8002170 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002184:	2003      	movs	r0, #3
 8002186:	e1b0      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002188:	4b8f      	ldr	r3, [pc, #572]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002190:	d0d8      	beq.n	8002144 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002192:	4b8d      	ldr	r3, [pc, #564]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800219a:	d003      	beq.n	80021a4 <HAL_RCC_OscConfig+0x8c>
 800219c:	6863      	ldr	r3, [r4, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 819e 	beq.w	80024e0 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021a4:	6823      	ldr	r3, [r4, #0]
 80021a6:	f013 0f02 	tst.w	r3, #2
 80021aa:	d054      	beq.n	8002256 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ac:	4b86      	ldr	r3, [pc, #536]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f013 0f0c 	tst.w	r3, #12
 80021b4:	d03e      	beq.n	8002234 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021b6:	4b84      	ldr	r3, [pc, #528]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d033      	beq.n	800222a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021c2:	68e3      	ldr	r3, [r4, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d067      	beq.n	8002298 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c8:	4b80      	ldr	r3, [pc, #512]	; (80023cc <HAL_RCC_OscConfig+0x2b4>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ce:	f7ff fa1b 	bl	8001608 <HAL_GetTick>
 80021d2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d4:	4b7c      	ldr	r3, [pc, #496]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f013 0f02 	tst.w	r3, #2
 80021dc:	d153      	bne.n	8002286 <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021de:	f7ff fa13 	bl	8001608 <HAL_GetTick>
 80021e2:	1b40      	subs	r0, r0, r5
 80021e4:	2802      	cmp	r0, #2
 80021e6:	d9f5      	bls.n	80021d4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80021e8:	2003      	movs	r0, #3
 80021ea:	e17e      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ec:	4a76      	ldr	r2, [pc, #472]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 80021ee:	6813      	ldr	r3, [r2, #0]
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e7b5      	b.n	8002164 <HAL_RCC_OscConfig+0x4c>
 80021f8:	4b73      	ldr	r3, [pc, #460]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	e7ab      	b.n	8002164 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800220c:	f7ff f9fc 	bl	8001608 <HAL_GetTick>
 8002210:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002212:	4b6d      	ldr	r3, [pc, #436]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800221a:	d0c3      	beq.n	80021a4 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800221c:	f7ff f9f4 	bl	8001608 <HAL_GetTick>
 8002220:	1b40      	subs	r0, r0, r5
 8002222:	2864      	cmp	r0, #100	; 0x64
 8002224:	d9f5      	bls.n	8002212 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002226:	2003      	movs	r0, #3
 8002228:	e15f      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800222a:	4b67      	ldr	r3, [pc, #412]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002232:	d1c6      	bne.n	80021c2 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002234:	4b64      	ldr	r3, [pc, #400]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f013 0f02 	tst.w	r3, #2
 800223c:	d003      	beq.n	8002246 <HAL_RCC_OscConfig+0x12e>
 800223e:	68e3      	ldr	r3, [r4, #12]
 8002240:	2b01      	cmp	r3, #1
 8002242:	f040 814f 	bne.w	80024e4 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002246:	4a60      	ldr	r2, [pc, #384]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 8002248:	6813      	ldr	r3, [r2, #0]
 800224a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800224e:	6921      	ldr	r1, [r4, #16]
 8002250:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002254:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002256:	6823      	ldr	r3, [r4, #0]
 8002258:	f013 0f08 	tst.w	r3, #8
 800225c:	d040      	beq.n	80022e0 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800225e:	6963      	ldr	r3, [r4, #20]
 8002260:	b363      	cbz	r3, 80022bc <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002262:	4b5b      	ldr	r3, [pc, #364]	; (80023d0 <HAL_RCC_OscConfig+0x2b8>)
 8002264:	2201      	movs	r2, #1
 8002266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002268:	f7ff f9ce 	bl	8001608 <HAL_GetTick>
 800226c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226e:	4b56      	ldr	r3, [pc, #344]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 8002270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002272:	f013 0f02 	tst.w	r3, #2
 8002276:	d133      	bne.n	80022e0 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002278:	f7ff f9c6 	bl	8001608 <HAL_GetTick>
 800227c:	1b40      	subs	r0, r0, r5
 800227e:	2802      	cmp	r0, #2
 8002280:	d9f5      	bls.n	800226e <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8002282:	2003      	movs	r0, #3
 8002284:	e131      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002286:	4a50      	ldr	r2, [pc, #320]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 8002288:	6813      	ldr	r3, [r2, #0]
 800228a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800228e:	6921      	ldr	r1, [r4, #16]
 8002290:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e7de      	b.n	8002256 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8002298:	4b4c      	ldr	r3, [pc, #304]	; (80023cc <HAL_RCC_OscConfig+0x2b4>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800229e:	f7ff f9b3 	bl	8001608 <HAL_GetTick>
 80022a2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a4:	4b48      	ldr	r3, [pc, #288]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f013 0f02 	tst.w	r3, #2
 80022ac:	d0d3      	beq.n	8002256 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ae:	f7ff f9ab 	bl	8001608 <HAL_GetTick>
 80022b2:	1b40      	subs	r0, r0, r5
 80022b4:	2802      	cmp	r0, #2
 80022b6:	d9f5      	bls.n	80022a4 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 80022b8:	2003      	movs	r0, #3
 80022ba:	e116      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022bc:	4b44      	ldr	r3, [pc, #272]	; (80023d0 <HAL_RCC_OscConfig+0x2b8>)
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c2:	f7ff f9a1 	bl	8001608 <HAL_GetTick>
 80022c6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c8:	4b3f      	ldr	r3, [pc, #252]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 80022ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022cc:	f013 0f02 	tst.w	r3, #2
 80022d0:	d006      	beq.n	80022e0 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022d2:	f7ff f999 	bl	8001608 <HAL_GetTick>
 80022d6:	1b40      	subs	r0, r0, r5
 80022d8:	2802      	cmp	r0, #2
 80022da:	d9f5      	bls.n	80022c8 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 80022dc:	2003      	movs	r0, #3
 80022de:	e104      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e0:	6823      	ldr	r3, [r4, #0]
 80022e2:	f013 0f04 	tst.w	r3, #4
 80022e6:	d078      	beq.n	80023da <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022e8:	4b37      	ldr	r3, [pc, #220]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80022f0:	d10d      	bne.n	800230e <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	9301      	str	r3, [sp, #4]
 80022f6:	4b34      	ldr	r3, [pc, #208]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 80022f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800230a:	2501      	movs	r5, #1
 800230c:	e000      	b.n	8002310 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 800230e:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002310:	4b30      	ldr	r3, [pc, #192]	; (80023d4 <HAL_RCC_OscConfig+0x2bc>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002318:	d021      	beq.n	800235e <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800231a:	68a3      	ldr	r3, [r4, #8]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d032      	beq.n	8002386 <HAL_RCC_OscConfig+0x26e>
 8002320:	2b05      	cmp	r3, #5
 8002322:	d036      	beq.n	8002392 <HAL_RCC_OscConfig+0x27a>
 8002324:	4b28      	ldr	r3, [pc, #160]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 8002326:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002328:	f022 0201 	bic.w	r2, r2, #1
 800232c:	671a      	str	r2, [r3, #112]	; 0x70
 800232e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002330:	f022 0204 	bic.w	r2, r2, #4
 8002334:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002336:	68a3      	ldr	r3, [r4, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d034      	beq.n	80023a6 <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233c:	f7ff f964 	bl	8001608 <HAL_GetTick>
 8002340:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002342:	4b21      	ldr	r3, [pc, #132]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 8002344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002346:	f013 0f02 	tst.w	r3, #2
 800234a:	d145      	bne.n	80023d8 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800234c:	f7ff f95c 	bl	8001608 <HAL_GetTick>
 8002350:	1b80      	subs	r0, r0, r6
 8002352:	f241 3388 	movw	r3, #5000	; 0x1388
 8002356:	4298      	cmp	r0, r3
 8002358:	d9f3      	bls.n	8002342 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800235a:	2003      	movs	r0, #3
 800235c:	e0c5      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235e:	4a1d      	ldr	r2, [pc, #116]	; (80023d4 <HAL_RCC_OscConfig+0x2bc>)
 8002360:	6813      	ldr	r3, [r2, #0]
 8002362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002366:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002368:	f7ff f94e 	bl	8001608 <HAL_GetTick>
 800236c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236e:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <HAL_RCC_OscConfig+0x2bc>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002376:	d1d0      	bne.n	800231a <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002378:	f7ff f946 	bl	8001608 <HAL_GetTick>
 800237c:	1b80      	subs	r0, r0, r6
 800237e:	2802      	cmp	r0, #2
 8002380:	d9f5      	bls.n	800236e <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8002382:	2003      	movs	r0, #3
 8002384:	e0b1      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002386:	4a10      	ldr	r2, [pc, #64]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 8002388:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6713      	str	r3, [r2, #112]	; 0x70
 8002390:	e7d1      	b.n	8002336 <HAL_RCC_OscConfig+0x21e>
 8002392:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 8002394:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002396:	f042 0204 	orr.w	r2, r2, #4
 800239a:	671a      	str	r2, [r3, #112]	; 0x70
 800239c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	671a      	str	r2, [r3, #112]	; 0x70
 80023a4:	e7c7      	b.n	8002336 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a6:	f7ff f92f 	bl	8001608 <HAL_GetTick>
 80023aa:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_RCC_OscConfig+0x2b0>)
 80023ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b0:	f013 0f02 	tst.w	r3, #2
 80023b4:	d010      	beq.n	80023d8 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b6:	f7ff f927 	bl	8001608 <HAL_GetTick>
 80023ba:	1b80      	subs	r0, r0, r6
 80023bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80023c0:	4298      	cmp	r0, r3
 80023c2:	d9f3      	bls.n	80023ac <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 80023c4:	2003      	movs	r0, #3
 80023c6:	e090      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
 80023c8:	40023800 	.word	0x40023800
 80023cc:	42470000 	.word	0x42470000
 80023d0:	42470e80 	.word	0x42470e80
 80023d4:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023d8:	b9ed      	cbnz	r5, 8002416 <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023da:	69a3      	ldr	r3, [r4, #24]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 8083 	beq.w	80024e8 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023e2:	4a49      	ldr	r2, [pc, #292]	; (8002508 <HAL_RCC_OscConfig+0x3f0>)
 80023e4:	6892      	ldr	r2, [r2, #8]
 80023e6:	f002 020c 	and.w	r2, r2, #12
 80023ea:	2a08      	cmp	r2, #8
 80023ec:	d051      	beq.n	8002492 <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d017      	beq.n	8002422 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f2:	4b46      	ldr	r3, [pc, #280]	; (800250c <HAL_RCC_OscConfig+0x3f4>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7ff f906 	bl	8001608 <HAL_GetTick>
 80023fc:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fe:	4b42      	ldr	r3, [pc, #264]	; (8002508 <HAL_RCC_OscConfig+0x3f0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002406:	d042      	beq.n	800248e <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002408:	f7ff f8fe 	bl	8001608 <HAL_GetTick>
 800240c:	1b00      	subs	r0, r0, r4
 800240e:	2802      	cmp	r0, #2
 8002410:	d9f5      	bls.n	80023fe <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002412:	2003      	movs	r0, #3
 8002414:	e069      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002416:	4a3c      	ldr	r2, [pc, #240]	; (8002508 <HAL_RCC_OscConfig+0x3f0>)
 8002418:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800241a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800241e:	6413      	str	r3, [r2, #64]	; 0x40
 8002420:	e7db      	b.n	80023da <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8002422:	4b3a      	ldr	r3, [pc, #232]	; (800250c <HAL_RCC_OscConfig+0x3f4>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002428:	f7ff f8ee 	bl	8001608 <HAL_GetTick>
 800242c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242e:	4b36      	ldr	r3, [pc, #216]	; (8002508 <HAL_RCC_OscConfig+0x3f0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002436:	d006      	beq.n	8002446 <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002438:	f7ff f8e6 	bl	8001608 <HAL_GetTick>
 800243c:	1b40      	subs	r0, r0, r5
 800243e:	2802      	cmp	r0, #2
 8002440:	d9f5      	bls.n	800242e <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8002442:	2003      	movs	r0, #3
 8002444:	e051      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002446:	69e3      	ldr	r3, [r4, #28]
 8002448:	6a22      	ldr	r2, [r4, #32]
 800244a:	4313      	orrs	r3, r2
 800244c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800244e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002452:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002454:	0852      	lsrs	r2, r2, #1
 8002456:	3a01      	subs	r2, #1
 8002458:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800245c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800245e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002462:	4a29      	ldr	r2, [pc, #164]	; (8002508 <HAL_RCC_OscConfig+0x3f0>)
 8002464:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002466:	4b29      	ldr	r3, [pc, #164]	; (800250c <HAL_RCC_OscConfig+0x3f4>)
 8002468:	2201      	movs	r2, #1
 800246a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800246c:	f7ff f8cc 	bl	8001608 <HAL_GetTick>
 8002470:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002472:	4b25      	ldr	r3, [pc, #148]	; (8002508 <HAL_RCC_OscConfig+0x3f0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800247a:	d106      	bne.n	800248a <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247c:	f7ff f8c4 	bl	8001608 <HAL_GetTick>
 8002480:	1b00      	subs	r0, r0, r4
 8002482:	2802      	cmp	r0, #2
 8002484:	d9f5      	bls.n	8002472 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8002486:	2003      	movs	r0, #3
 8002488:	e02f      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800248a:	2000      	movs	r0, #0
 800248c:	e02d      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
 800248e:	2000      	movs	r0, #0
 8002490:	e02b      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002492:	2b01      	cmp	r3, #1
 8002494:	d02b      	beq.n	80024ee <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <HAL_RCC_OscConfig+0x3f0>)
 8002498:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800249e:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a0:	4291      	cmp	r1, r2
 80024a2:	d126      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024a8:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024aa:	428a      	cmp	r2, r1
 80024ac:	d123      	bne.n	80024f6 <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024b0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80024b4:	401a      	ands	r2, r3
 80024b6:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80024ba:	d11e      	bne.n	80024fa <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024bc:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80024c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80024c2:	0852      	lsrs	r2, r2, #1
 80024c4:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024c6:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80024ca:	d118      	bne.n	80024fe <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024cc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80024d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d2:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80024d6:	d114      	bne.n	8002502 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 80024d8:	2000      	movs	r0, #0
 80024da:	e006      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 80024dc:	2001      	movs	r0, #1
}
 80024de:	4770      	bx	lr
        return HAL_ERROR;
 80024e0:	2001      	movs	r0, #1
 80024e2:	e002      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 80024e4:	2001      	movs	r0, #1
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 80024e8:	2000      	movs	r0, #0
}
 80024ea:	b002      	add	sp, #8
 80024ec:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80024ee:	2001      	movs	r0, #1
 80024f0:	e7fb      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 80024f2:	2001      	movs	r0, #1
 80024f4:	e7f9      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
 80024f6:	2001      	movs	r0, #1
 80024f8:	e7f7      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
 80024fa:	2001      	movs	r0, #1
 80024fc:	e7f5      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
 80024fe:	2001      	movs	r0, #1
 8002500:	e7f3      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
 8002502:	2001      	movs	r0, #1
 8002504:	e7f1      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800
 800250c:	42470060 	.word	0x42470060

08002510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002512:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b04      	cmp	r3, #4
 800251c:	d03d      	beq.n	800259a <HAL_RCC_GetSysClockFreq+0x8a>
 800251e:	2b08      	cmp	r3, #8
 8002520:	d13d      	bne.n	800259e <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002530:	d012      	beq.n	8002558 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002532:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002534:	6859      	ldr	r1, [r3, #4]
 8002536:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800253a:	2300      	movs	r3, #0
 800253c:	481a      	ldr	r0, [pc, #104]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x98>)
 800253e:	fba1 0100 	umull	r0, r1, r1, r0
 8002542:	f7fd fea5 	bl	8000290 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002546:	4b17      	ldr	r3, [pc, #92]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800254e:	3301      	adds	r3, #1
 8002550:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002552:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002556:	e023      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002560:	015c      	lsls	r4, r3, #5
 8002562:	2500      	movs	r5, #0
 8002564:	1ae4      	subs	r4, r4, r3
 8002566:	f165 0500 	sbc.w	r5, r5, #0
 800256a:	01ae      	lsls	r6, r5, #6
 800256c:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8002570:	01a7      	lsls	r7, r4, #6
 8002572:	1b38      	subs	r0, r7, r4
 8002574:	eb66 0105 	sbc.w	r1, r6, r5
 8002578:	00cc      	lsls	r4, r1, #3
 800257a:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 800257e:	00c5      	lsls	r5, r0, #3
 8002580:	18e8      	adds	r0, r5, r3
 8002582:	f144 0100 	adc.w	r1, r4, #0
 8002586:	028b      	lsls	r3, r1, #10
 8002588:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800258c:	0284      	lsls	r4, r0, #10
 800258e:	4620      	mov	r0, r4
 8002590:	4619      	mov	r1, r3
 8002592:	2300      	movs	r3, #0
 8002594:	f7fd fe7c 	bl	8000290 <__aeabi_uldivmod>
 8002598:	e7d5      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 800259a:	4803      	ldr	r0, [pc, #12]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x98>)
 800259c:	e000      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800259e:	4803      	ldr	r0, [pc, #12]	; (80025ac <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80025a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800
 80025a8:	017d7840 	.word	0x017d7840
 80025ac:	00f42400 	.word	0x00f42400

080025b0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80025b0:	2800      	cmp	r0, #0
 80025b2:	f000 809b 	beq.w	80026ec <HAL_RCC_ClockConfig+0x13c>
{
 80025b6:	b570      	push	{r4, r5, r6, lr}
 80025b8:	460d      	mov	r5, r1
 80025ba:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025bc:	4b4f      	ldr	r3, [pc, #316]	; (80026fc <HAL_RCC_ClockConfig+0x14c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	428b      	cmp	r3, r1
 80025c6:	d208      	bcs.n	80025da <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c8:	b2cb      	uxtb	r3, r1
 80025ca:	4a4c      	ldr	r2, [pc, #304]	; (80026fc <HAL_RCC_ClockConfig+0x14c>)
 80025cc:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ce:	6813      	ldr	r3, [r2, #0]
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	428b      	cmp	r3, r1
 80025d6:	f040 808b 	bne.w	80026f0 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025da:	6823      	ldr	r3, [r4, #0]
 80025dc:	f013 0f02 	tst.w	r3, #2
 80025e0:	d017      	beq.n	8002612 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e2:	f013 0f04 	tst.w	r3, #4
 80025e6:	d004      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e8:	4a45      	ldr	r2, [pc, #276]	; (8002700 <HAL_RCC_ClockConfig+0x150>)
 80025ea:	6893      	ldr	r3, [r2, #8]
 80025ec:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025f0:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f2:	6823      	ldr	r3, [r4, #0]
 80025f4:	f013 0f08 	tst.w	r3, #8
 80025f8:	d004      	beq.n	8002604 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025fa:	4a41      	ldr	r2, [pc, #260]	; (8002700 <HAL_RCC_ClockConfig+0x150>)
 80025fc:	6893      	ldr	r3, [r2, #8]
 80025fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002602:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002604:	4a3e      	ldr	r2, [pc, #248]	; (8002700 <HAL_RCC_ClockConfig+0x150>)
 8002606:	6893      	ldr	r3, [r2, #8]
 8002608:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800260c:	68a1      	ldr	r1, [r4, #8]
 800260e:	430b      	orrs	r3, r1
 8002610:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002612:	6823      	ldr	r3, [r4, #0]
 8002614:	f013 0f01 	tst.w	r3, #1
 8002618:	d032      	beq.n	8002680 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800261a:	6863      	ldr	r3, [r4, #4]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d021      	beq.n	8002664 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002620:	1e9a      	subs	r2, r3, #2
 8002622:	2a01      	cmp	r2, #1
 8002624:	d925      	bls.n	8002672 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002626:	4a36      	ldr	r2, [pc, #216]	; (8002700 <HAL_RCC_ClockConfig+0x150>)
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	f012 0f02 	tst.w	r2, #2
 800262e:	d061      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002630:	4933      	ldr	r1, [pc, #204]	; (8002700 <HAL_RCC_ClockConfig+0x150>)
 8002632:	688a      	ldr	r2, [r1, #8]
 8002634:	f022 0203 	bic.w	r2, r2, #3
 8002638:	4313      	orrs	r3, r2
 800263a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800263c:	f7fe ffe4 	bl	8001608 <HAL_GetTick>
 8002640:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002642:	4b2f      	ldr	r3, [pc, #188]	; (8002700 <HAL_RCC_ClockConfig+0x150>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	6862      	ldr	r2, [r4, #4]
 800264c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002650:	d016      	beq.n	8002680 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002652:	f7fe ffd9 	bl	8001608 <HAL_GetTick>
 8002656:	1b80      	subs	r0, r0, r6
 8002658:	f241 3388 	movw	r3, #5000	; 0x1388
 800265c:	4298      	cmp	r0, r3
 800265e:	d9f0      	bls.n	8002642 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002660:	2003      	movs	r0, #3
 8002662:	e042      	b.n	80026ea <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002664:	4a26      	ldr	r2, [pc, #152]	; (8002700 <HAL_RCC_ClockConfig+0x150>)
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800266c:	d1e0      	bne.n	8002630 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800266e:	2001      	movs	r0, #1
 8002670:	e03b      	b.n	80026ea <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002672:	4a23      	ldr	r2, [pc, #140]	; (8002700 <HAL_RCC_ClockConfig+0x150>)
 8002674:	6812      	ldr	r2, [r2, #0]
 8002676:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800267a:	d1d9      	bne.n	8002630 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800267c:	2001      	movs	r0, #1
 800267e:	e034      	b.n	80026ea <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002680:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <HAL_RCC_ClockConfig+0x14c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	42ab      	cmp	r3, r5
 800268a:	d907      	bls.n	800269c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268c:	b2ea      	uxtb	r2, r5
 800268e:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <HAL_RCC_ClockConfig+0x14c>)
 8002690:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	42ab      	cmp	r3, r5
 800269a:	d12d      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	f013 0f04 	tst.w	r3, #4
 80026a2:	d006      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a4:	4a16      	ldr	r2, [pc, #88]	; (8002700 <HAL_RCC_ClockConfig+0x150>)
 80026a6:	6893      	ldr	r3, [r2, #8]
 80026a8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80026ac:	68e1      	ldr	r1, [r4, #12]
 80026ae:	430b      	orrs	r3, r1
 80026b0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	f013 0f08 	tst.w	r3, #8
 80026b8:	d007      	beq.n	80026ca <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ba:	4a11      	ldr	r2, [pc, #68]	; (8002700 <HAL_RCC_ClockConfig+0x150>)
 80026bc:	6893      	ldr	r3, [r2, #8]
 80026be:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80026c2:	6921      	ldr	r1, [r4, #16]
 80026c4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80026c8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026ca:	f7ff ff21 	bl	8002510 <HAL_RCC_GetSysClockFreq>
 80026ce:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <HAL_RCC_ClockConfig+0x150>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80026d6:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <HAL_RCC_ClockConfig+0x154>)
 80026d8:	5cd3      	ldrb	r3, [r2, r3]
 80026da:	40d8      	lsrs	r0, r3
 80026dc:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <HAL_RCC_ClockConfig+0x158>)
 80026de:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80026e0:	4b0a      	ldr	r3, [pc, #40]	; (800270c <HAL_RCC_ClockConfig+0x15c>)
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	f7fe ff44 	bl	8001570 <HAL_InitTick>
  return HAL_OK;
 80026e8:	2000      	movs	r0, #0
}
 80026ea:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80026ec:	2001      	movs	r0, #1
}
 80026ee:	4770      	bx	lr
      return HAL_ERROR;
 80026f0:	2001      	movs	r0, #1
 80026f2:	e7fa      	b.n	80026ea <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80026f4:	2001      	movs	r0, #1
 80026f6:	e7f8      	b.n	80026ea <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80026f8:	2001      	movs	r0, #1
 80026fa:	e7f6      	b.n	80026ea <HAL_RCC_ClockConfig+0x13a>
 80026fc:	40023c00 	.word	0x40023c00
 8002700:	40023800 	.word	0x40023800
 8002704:	08008090 	.word	0x08008090
 8002708:	20000078 	.word	0x20000078
 800270c:	20000080 	.word	0x20000080

08002710 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002710:	4b01      	ldr	r3, [pc, #4]	; (8002718 <HAL_RCC_GetHCLKFreq+0x8>)
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000078 	.word	0x20000078

0800271c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800271c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800271e:	f7ff fff7 	bl	8002710 <HAL_RCC_GetHCLKFreq>
 8002722:	4b04      	ldr	r3, [pc, #16]	; (8002734 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800272a:	4a03      	ldr	r2, [pc, #12]	; (8002738 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800272c:	5cd3      	ldrb	r3, [r2, r3]
}
 800272e:	40d8      	lsrs	r0, r3
 8002730:	bd08      	pop	{r3, pc}
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800
 8002738:	080080a0 	.word	0x080080a0

0800273c <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800273c:	b198      	cbz	r0, 8002766 <HAL_RNG_Init+0x2a>
{
 800273e:	b510      	push	{r4, lr}
 8002740:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002742:	7943      	ldrb	r3, [r0, #5]
 8002744:	b15b      	cbz	r3, 800275e <HAL_RNG_Init+0x22>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002746:	2302      	movs	r3, #2
 8002748:	7163      	strb	r3, [r4, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800274a:	6822      	ldr	r2, [r4, #0]
 800274c:	6813      	ldr	r3, [r2, #0]
 800274e:	f043 0304 	orr.w	r3, r3, #4
 8002752:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002754:	2301      	movs	r3, #1
 8002756:	7163      	strb	r3, [r4, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002758:	2000      	movs	r0, #0
 800275a:	60a0      	str	r0, [r4, #8]

  /* Return function status */
  return HAL_OK;
}
 800275c:	bd10      	pop	{r4, pc}
    hrng->Lock = HAL_UNLOCKED;
 800275e:	7103      	strb	r3, [r0, #4]
    HAL_RNG_MspInit(hrng);
 8002760:	f7fe fe3e 	bl	80013e0 <HAL_RNG_MspInit>
 8002764:	e7ef      	b.n	8002746 <HAL_RNG_Init+0xa>
    return HAL_ERROR;
 8002766:	2001      	movs	r0, #1
}
 8002768:	4770      	bx	lr

0800276a <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800276a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 800276c:	7903      	ldrb	r3, [r0, #4]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d030      	beq.n	80027d4 <HAL_RNG_GenerateRandomNumber+0x6a>
 8002772:	4604      	mov	r4, r0
 8002774:	460e      	mov	r6, r1
 8002776:	2301      	movs	r3, #1
 8002778:	7103      	strb	r3, [r0, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800277a:	7945      	ldrb	r5, [r0, #5]
 800277c:	b2ed      	uxtb	r5, r5
 800277e:	429d      	cmp	r5, r3
 8002780:	d006      	beq.n	8002790 <HAL_RNG_GenerateRandomNumber+0x26>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002782:	2304      	movs	r3, #4
 8002784:	6083      	str	r3, [r0, #8]
    status = HAL_ERROR;
 8002786:	2501      	movs	r5, #1
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002788:	2300      	movs	r3, #0
 800278a:	7123      	strb	r3, [r4, #4]

  return status;
}
 800278c:	4628      	mov	r0, r5
 800278e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8002790:	2302      	movs	r3, #2
 8002792:	7143      	strb	r3, [r0, #5]
    tickstart = HAL_GetTick();
 8002794:	f7fe ff38 	bl	8001608 <HAL_GetTick>
 8002798:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	f012 0f01 	tst.w	r2, #1
 80027a2:	d110      	bne.n	80027c6 <HAL_RNG_GenerateRandomNumber+0x5c>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80027a4:	f7fe ff30 	bl	8001608 <HAL_GetTick>
 80027a8:	1bc0      	subs	r0, r0, r7
 80027aa:	2802      	cmp	r0, #2
 80027ac:	d9f5      	bls.n	800279a <HAL_RNG_GenerateRandomNumber+0x30>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80027ae:	6823      	ldr	r3, [r4, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f013 0f01 	tst.w	r3, #1
 80027b6:	d1f0      	bne.n	800279a <HAL_RNG_GenerateRandomNumber+0x30>
          hrng->State = HAL_RNG_STATE_READY;
 80027b8:	2301      	movs	r3, #1
 80027ba:	7163      	strb	r3, [r4, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80027bc:	2302      	movs	r3, #2
 80027be:	60a3      	str	r3, [r4, #8]
          __HAL_UNLOCK(hrng);
 80027c0:	2300      	movs	r3, #0
 80027c2:	7123      	strb	r3, [r4, #4]
          return HAL_ERROR;
 80027c4:	e7e2      	b.n	800278c <HAL_RNG_GenerateRandomNumber+0x22>
    hrng->RandomNumber = hrng->Instance->DR;
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	60e3      	str	r3, [r4, #12]
    *random32bit = hrng->RandomNumber;
 80027ca:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 80027cc:	2301      	movs	r3, #1
 80027ce:	7163      	strb	r3, [r4, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80027d0:	2500      	movs	r5, #0
 80027d2:	e7d9      	b.n	8002788 <HAL_RNG_GenerateRandomNumber+0x1e>
  __HAL_LOCK(hrng);
 80027d4:	2502      	movs	r5, #2
 80027d6:	e7d9      	b.n	800278c <HAL_RNG_GenerateRandomNumber+0x22>

080027d8 <HAL_RNG_ReadyDataCallback>:
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 80027d8:	4770      	bx	lr

080027da <HAL_RNG_ErrorCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 80027da:	4770      	bx	lr

080027dc <HAL_RNG_IRQHandler>:
{
 80027dc:	b510      	push	{r4, lr}
 80027de:	4604      	mov	r4, r0
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 80027e0:	6803      	ldr	r3, [r0, #0]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	f012 0f20 	tst.w	r2, #32
 80027e8:	d119      	bne.n	800281e <HAL_RNG_IRQHandler+0x42>
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	f012 0f40 	tst.w	r2, #64	; 0x40
 80027f0:	d121      	bne.n	8002836 <HAL_RNG_IRQHandler+0x5a>
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	f012 0f01 	tst.w	r2, #1
 80027f8:	d01c      	beq.n	8002834 <HAL_RNG_IRQHandler+0x58>
    __HAL_RNG_DISABLE_IT(hrng);
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	f022 0208 	bic.w	r2, r2, #8
 8002800:	601a      	str	r2, [r3, #0]
    hrng->RandomNumber = hrng->Instance->DR;
 8002802:	6803      	ldr	r3, [r0, #0]
 8002804:	6899      	ldr	r1, [r3, #8]
 8002806:	60c1      	str	r1, [r0, #12]
    if (hrng->State != HAL_RNG_STATE_ERROR)
 8002808:	7943      	ldrb	r3, [r0, #5]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b04      	cmp	r3, #4
 800280e:	d011      	beq.n	8002834 <HAL_RNG_IRQHandler+0x58>
      hrng->State = HAL_RNG_STATE_READY;
 8002810:	2301      	movs	r3, #1
 8002812:	7143      	strb	r3, [r0, #5]
      __HAL_UNLOCK(hrng);
 8002814:	2300      	movs	r3, #0
 8002816:	7103      	strb	r3, [r0, #4]
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8002818:	f7ff ffde 	bl	80027d8 <HAL_RNG_ReadyDataCallback>
 800281c:	e00a      	b.n	8002834 <HAL_RNG_IRQHandler+0x58>
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 800281e:	2310      	movs	r3, #16
 8002820:	6083      	str	r3, [r0, #8]
    hrng->State = HAL_RNG_STATE_ERROR;
 8002822:	2304      	movs	r3, #4
 8002824:	7163      	strb	r3, [r4, #5]
    HAL_RNG_ErrorCallback(hrng);
 8002826:	4620      	mov	r0, r4
 8002828:	f7ff ffd7 	bl	80027da <HAL_RNG_ErrorCallback>
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800282c:	6823      	ldr	r3, [r4, #0]
 800282e:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8002832:	605a      	str	r2, [r3, #4]
}
 8002834:	bd10      	pop	{r4, pc}
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8002836:	2308      	movs	r3, #8
 8002838:	6083      	str	r3, [r0, #8]
  if (rngclockerror == 1U)
 800283a:	e7f2      	b.n	8002822 <HAL_RNG_IRQHandler+0x46>

0800283c <__errno>:
 800283c:	4b01      	ldr	r3, [pc, #4]	; (8002844 <__errno+0x8>)
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	20000084 	.word	0x20000084

08002848 <__libc_init_array>:
 8002848:	b570      	push	{r4, r5, r6, lr}
 800284a:	4d0d      	ldr	r5, [pc, #52]	; (8002880 <__libc_init_array+0x38>)
 800284c:	4c0d      	ldr	r4, [pc, #52]	; (8002884 <__libc_init_array+0x3c>)
 800284e:	1b64      	subs	r4, r4, r5
 8002850:	10a4      	asrs	r4, r4, #2
 8002852:	2600      	movs	r6, #0
 8002854:	42a6      	cmp	r6, r4
 8002856:	d109      	bne.n	800286c <__libc_init_array+0x24>
 8002858:	4d0b      	ldr	r5, [pc, #44]	; (8002888 <__libc_init_array+0x40>)
 800285a:	4c0c      	ldr	r4, [pc, #48]	; (800288c <__libc_init_array+0x44>)
 800285c:	f001 f850 	bl	8003900 <_init>
 8002860:	1b64      	subs	r4, r4, r5
 8002862:	10a4      	asrs	r4, r4, #2
 8002864:	2600      	movs	r6, #0
 8002866:	42a6      	cmp	r6, r4
 8002868:	d105      	bne.n	8002876 <__libc_init_array+0x2e>
 800286a:	bd70      	pop	{r4, r5, r6, pc}
 800286c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002870:	4798      	blx	r3
 8002872:	3601      	adds	r6, #1
 8002874:	e7ee      	b.n	8002854 <__libc_init_array+0xc>
 8002876:	f855 3b04 	ldr.w	r3, [r5], #4
 800287a:	4798      	blx	r3
 800287c:	3601      	adds	r6, #1
 800287e:	e7f2      	b.n	8002866 <__libc_init_array+0x1e>
 8002880:	080081fc 	.word	0x080081fc
 8002884:	080081fc 	.word	0x080081fc
 8002888:	080081fc 	.word	0x080081fc
 800288c:	08008200 	.word	0x08008200

08002890 <malloc>:
 8002890:	4b02      	ldr	r3, [pc, #8]	; (800289c <malloc+0xc>)
 8002892:	4601      	mov	r1, r0
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	f000 b85b 	b.w	8002950 <_malloc_r>
 800289a:	bf00      	nop
 800289c:	20000084 	.word	0x20000084

080028a0 <memset>:
 80028a0:	4402      	add	r2, r0
 80028a2:	4603      	mov	r3, r0
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d100      	bne.n	80028aa <memset+0xa>
 80028a8:	4770      	bx	lr
 80028aa:	f803 1b01 	strb.w	r1, [r3], #1
 80028ae:	e7f9      	b.n	80028a4 <memset+0x4>

080028b0 <_free_r>:
 80028b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80028b2:	2900      	cmp	r1, #0
 80028b4:	d048      	beq.n	8002948 <_free_r+0x98>
 80028b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028ba:	9001      	str	r0, [sp, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f1a1 0404 	sub.w	r4, r1, #4
 80028c2:	bfb8      	it	lt
 80028c4:	18e4      	addlt	r4, r4, r3
 80028c6:	f000 f94b 	bl	8002b60 <__malloc_lock>
 80028ca:	4a20      	ldr	r2, [pc, #128]	; (800294c <_free_r+0x9c>)
 80028cc:	9801      	ldr	r0, [sp, #4]
 80028ce:	6813      	ldr	r3, [r2, #0]
 80028d0:	4615      	mov	r5, r2
 80028d2:	b933      	cbnz	r3, 80028e2 <_free_r+0x32>
 80028d4:	6063      	str	r3, [r4, #4]
 80028d6:	6014      	str	r4, [r2, #0]
 80028d8:	b003      	add	sp, #12
 80028da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80028de:	f000 b945 	b.w	8002b6c <__malloc_unlock>
 80028e2:	42a3      	cmp	r3, r4
 80028e4:	d90b      	bls.n	80028fe <_free_r+0x4e>
 80028e6:	6821      	ldr	r1, [r4, #0]
 80028e8:	1862      	adds	r2, r4, r1
 80028ea:	4293      	cmp	r3, r2
 80028ec:	bf04      	itt	eq
 80028ee:	681a      	ldreq	r2, [r3, #0]
 80028f0:	685b      	ldreq	r3, [r3, #4]
 80028f2:	6063      	str	r3, [r4, #4]
 80028f4:	bf04      	itt	eq
 80028f6:	1852      	addeq	r2, r2, r1
 80028f8:	6022      	streq	r2, [r4, #0]
 80028fa:	602c      	str	r4, [r5, #0]
 80028fc:	e7ec      	b.n	80028d8 <_free_r+0x28>
 80028fe:	461a      	mov	r2, r3
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	b10b      	cbz	r3, 8002908 <_free_r+0x58>
 8002904:	42a3      	cmp	r3, r4
 8002906:	d9fa      	bls.n	80028fe <_free_r+0x4e>
 8002908:	6811      	ldr	r1, [r2, #0]
 800290a:	1855      	adds	r5, r2, r1
 800290c:	42a5      	cmp	r5, r4
 800290e:	d10b      	bne.n	8002928 <_free_r+0x78>
 8002910:	6824      	ldr	r4, [r4, #0]
 8002912:	4421      	add	r1, r4
 8002914:	1854      	adds	r4, r2, r1
 8002916:	42a3      	cmp	r3, r4
 8002918:	6011      	str	r1, [r2, #0]
 800291a:	d1dd      	bne.n	80028d8 <_free_r+0x28>
 800291c:	681c      	ldr	r4, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	6053      	str	r3, [r2, #4]
 8002922:	4421      	add	r1, r4
 8002924:	6011      	str	r1, [r2, #0]
 8002926:	e7d7      	b.n	80028d8 <_free_r+0x28>
 8002928:	d902      	bls.n	8002930 <_free_r+0x80>
 800292a:	230c      	movs	r3, #12
 800292c:	6003      	str	r3, [r0, #0]
 800292e:	e7d3      	b.n	80028d8 <_free_r+0x28>
 8002930:	6825      	ldr	r5, [r4, #0]
 8002932:	1961      	adds	r1, r4, r5
 8002934:	428b      	cmp	r3, r1
 8002936:	bf04      	itt	eq
 8002938:	6819      	ldreq	r1, [r3, #0]
 800293a:	685b      	ldreq	r3, [r3, #4]
 800293c:	6063      	str	r3, [r4, #4]
 800293e:	bf04      	itt	eq
 8002940:	1949      	addeq	r1, r1, r5
 8002942:	6021      	streq	r1, [r4, #0]
 8002944:	6054      	str	r4, [r2, #4]
 8002946:	e7c7      	b.n	80028d8 <_free_r+0x28>
 8002948:	b003      	add	sp, #12
 800294a:	bd30      	pop	{r4, r5, pc}
 800294c:	20000528 	.word	0x20000528

08002950 <_malloc_r>:
 8002950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002952:	1ccd      	adds	r5, r1, #3
 8002954:	f025 0503 	bic.w	r5, r5, #3
 8002958:	3508      	adds	r5, #8
 800295a:	2d0c      	cmp	r5, #12
 800295c:	bf38      	it	cc
 800295e:	250c      	movcc	r5, #12
 8002960:	2d00      	cmp	r5, #0
 8002962:	4606      	mov	r6, r0
 8002964:	db01      	blt.n	800296a <_malloc_r+0x1a>
 8002966:	42a9      	cmp	r1, r5
 8002968:	d903      	bls.n	8002972 <_malloc_r+0x22>
 800296a:	230c      	movs	r3, #12
 800296c:	6033      	str	r3, [r6, #0]
 800296e:	2000      	movs	r0, #0
 8002970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002972:	f000 f8f5 	bl	8002b60 <__malloc_lock>
 8002976:	4921      	ldr	r1, [pc, #132]	; (80029fc <_malloc_r+0xac>)
 8002978:	680a      	ldr	r2, [r1, #0]
 800297a:	4614      	mov	r4, r2
 800297c:	b99c      	cbnz	r4, 80029a6 <_malloc_r+0x56>
 800297e:	4f20      	ldr	r7, [pc, #128]	; (8002a00 <_malloc_r+0xb0>)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	b923      	cbnz	r3, 800298e <_malloc_r+0x3e>
 8002984:	4621      	mov	r1, r4
 8002986:	4630      	mov	r0, r6
 8002988:	f000 f8aa 	bl	8002ae0 <_sbrk_r>
 800298c:	6038      	str	r0, [r7, #0]
 800298e:	4629      	mov	r1, r5
 8002990:	4630      	mov	r0, r6
 8002992:	f000 f8a5 	bl	8002ae0 <_sbrk_r>
 8002996:	1c43      	adds	r3, r0, #1
 8002998:	d123      	bne.n	80029e2 <_malloc_r+0x92>
 800299a:	230c      	movs	r3, #12
 800299c:	6033      	str	r3, [r6, #0]
 800299e:	4630      	mov	r0, r6
 80029a0:	f000 f8e4 	bl	8002b6c <__malloc_unlock>
 80029a4:	e7e3      	b.n	800296e <_malloc_r+0x1e>
 80029a6:	6823      	ldr	r3, [r4, #0]
 80029a8:	1b5b      	subs	r3, r3, r5
 80029aa:	d417      	bmi.n	80029dc <_malloc_r+0x8c>
 80029ac:	2b0b      	cmp	r3, #11
 80029ae:	d903      	bls.n	80029b8 <_malloc_r+0x68>
 80029b0:	6023      	str	r3, [r4, #0]
 80029b2:	441c      	add	r4, r3
 80029b4:	6025      	str	r5, [r4, #0]
 80029b6:	e004      	b.n	80029c2 <_malloc_r+0x72>
 80029b8:	6863      	ldr	r3, [r4, #4]
 80029ba:	42a2      	cmp	r2, r4
 80029bc:	bf0c      	ite	eq
 80029be:	600b      	streq	r3, [r1, #0]
 80029c0:	6053      	strne	r3, [r2, #4]
 80029c2:	4630      	mov	r0, r6
 80029c4:	f000 f8d2 	bl	8002b6c <__malloc_unlock>
 80029c8:	f104 000b 	add.w	r0, r4, #11
 80029cc:	1d23      	adds	r3, r4, #4
 80029ce:	f020 0007 	bic.w	r0, r0, #7
 80029d2:	1ac2      	subs	r2, r0, r3
 80029d4:	d0cc      	beq.n	8002970 <_malloc_r+0x20>
 80029d6:	1a1b      	subs	r3, r3, r0
 80029d8:	50a3      	str	r3, [r4, r2]
 80029da:	e7c9      	b.n	8002970 <_malloc_r+0x20>
 80029dc:	4622      	mov	r2, r4
 80029de:	6864      	ldr	r4, [r4, #4]
 80029e0:	e7cc      	b.n	800297c <_malloc_r+0x2c>
 80029e2:	1cc4      	adds	r4, r0, #3
 80029e4:	f024 0403 	bic.w	r4, r4, #3
 80029e8:	42a0      	cmp	r0, r4
 80029ea:	d0e3      	beq.n	80029b4 <_malloc_r+0x64>
 80029ec:	1a21      	subs	r1, r4, r0
 80029ee:	4630      	mov	r0, r6
 80029f0:	f000 f876 	bl	8002ae0 <_sbrk_r>
 80029f4:	3001      	adds	r0, #1
 80029f6:	d1dd      	bne.n	80029b4 <_malloc_r+0x64>
 80029f8:	e7cf      	b.n	800299a <_malloc_r+0x4a>
 80029fa:	bf00      	nop
 80029fc:	20000528 	.word	0x20000528
 8002a00:	2000052c 	.word	0x2000052c

08002a04 <srand>:
 8002a04:	b538      	push	{r3, r4, r5, lr}
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <srand+0x44>)
 8002a08:	681d      	ldr	r5, [r3, #0]
 8002a0a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002a0c:	4604      	mov	r4, r0
 8002a0e:	b9b3      	cbnz	r3, 8002a3e <srand+0x3a>
 8002a10:	2018      	movs	r0, #24
 8002a12:	f7ff ff3d 	bl	8002890 <malloc>
 8002a16:	4602      	mov	r2, r0
 8002a18:	63a8      	str	r0, [r5, #56]	; 0x38
 8002a1a:	b920      	cbnz	r0, 8002a26 <srand+0x22>
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <srand+0x48>)
 8002a1e:	480c      	ldr	r0, [pc, #48]	; (8002a50 <srand+0x4c>)
 8002a20:	2142      	movs	r1, #66	; 0x42
 8002a22:	f000 f86d 	bl	8002b00 <__assert_func>
 8002a26:	490b      	ldr	r1, [pc, #44]	; (8002a54 <srand+0x50>)
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <srand+0x54>)
 8002a2a:	e9c0 1300 	strd	r1, r3, [r0]
 8002a2e:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <srand+0x58>)
 8002a30:	6083      	str	r3, [r0, #8]
 8002a32:	230b      	movs	r3, #11
 8002a34:	8183      	strh	r3, [r0, #12]
 8002a36:	2100      	movs	r1, #0
 8002a38:	2001      	movs	r0, #1
 8002a3a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002a3e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002a40:	2200      	movs	r2, #0
 8002a42:	611c      	str	r4, [r3, #16]
 8002a44:	615a      	str	r2, [r3, #20]
 8002a46:	bd38      	pop	{r3, r4, r5, pc}
 8002a48:	20000084 	.word	0x20000084
 8002a4c:	080080ac 	.word	0x080080ac
 8002a50:	080080c3 	.word	0x080080c3
 8002a54:	abcd330e 	.word	0xabcd330e
 8002a58:	e66d1234 	.word	0xe66d1234
 8002a5c:	0005deec 	.word	0x0005deec

08002a60 <rand>:
 8002a60:	4b17      	ldr	r3, [pc, #92]	; (8002ac0 <rand+0x60>)
 8002a62:	b510      	push	{r4, lr}
 8002a64:	681c      	ldr	r4, [r3, #0]
 8002a66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a68:	b9b3      	cbnz	r3, 8002a98 <rand+0x38>
 8002a6a:	2018      	movs	r0, #24
 8002a6c:	f7ff ff10 	bl	8002890 <malloc>
 8002a70:	63a0      	str	r0, [r4, #56]	; 0x38
 8002a72:	b928      	cbnz	r0, 8002a80 <rand+0x20>
 8002a74:	4602      	mov	r2, r0
 8002a76:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <rand+0x64>)
 8002a78:	4813      	ldr	r0, [pc, #76]	; (8002ac8 <rand+0x68>)
 8002a7a:	214e      	movs	r1, #78	; 0x4e
 8002a7c:	f000 f840 	bl	8002b00 <__assert_func>
 8002a80:	4a12      	ldr	r2, [pc, #72]	; (8002acc <rand+0x6c>)
 8002a82:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <rand+0x70>)
 8002a84:	e9c0 2300 	strd	r2, r3, [r0]
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <rand+0x74>)
 8002a8a:	6083      	str	r3, [r0, #8]
 8002a8c:	230b      	movs	r3, #11
 8002a8e:	8183      	strh	r3, [r0, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	2300      	movs	r3, #0
 8002a94:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002a98:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002a9a:	480f      	ldr	r0, [pc, #60]	; (8002ad8 <rand+0x78>)
 8002a9c:	690a      	ldr	r2, [r1, #16]
 8002a9e:	694b      	ldr	r3, [r1, #20]
 8002aa0:	4c0e      	ldr	r4, [pc, #56]	; (8002adc <rand+0x7c>)
 8002aa2:	4350      	muls	r0, r2
 8002aa4:	fb04 0003 	mla	r0, r4, r3, r0
 8002aa8:	fba2 3404 	umull	r3, r4, r2, r4
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	4404      	add	r4, r0
 8002ab0:	f144 0000 	adc.w	r0, r4, #0
 8002ab4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8002ab8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002abc:	bd10      	pop	{r4, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000084 	.word	0x20000084
 8002ac4:	080080ac 	.word	0x080080ac
 8002ac8:	080080c3 	.word	0x080080c3
 8002acc:	abcd330e 	.word	0xabcd330e
 8002ad0:	e66d1234 	.word	0xe66d1234
 8002ad4:	0005deec 	.word	0x0005deec
 8002ad8:	5851f42d 	.word	0x5851f42d
 8002adc:	4c957f2d 	.word	0x4c957f2d

08002ae0 <_sbrk_r>:
 8002ae0:	b538      	push	{r3, r4, r5, lr}
 8002ae2:	4d06      	ldr	r5, [pc, #24]	; (8002afc <_sbrk_r+0x1c>)
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	4604      	mov	r4, r0
 8002ae8:	4608      	mov	r0, r1
 8002aea:	602b      	str	r3, [r5, #0]
 8002aec:	f7fe fce8 	bl	80014c0 <_sbrk>
 8002af0:	1c43      	adds	r3, r0, #1
 8002af2:	d102      	bne.n	8002afa <_sbrk_r+0x1a>
 8002af4:	682b      	ldr	r3, [r5, #0]
 8002af6:	b103      	cbz	r3, 8002afa <_sbrk_r+0x1a>
 8002af8:	6023      	str	r3, [r4, #0]
 8002afa:	bd38      	pop	{r3, r4, r5, pc}
 8002afc:	2000059c 	.word	0x2000059c

08002b00 <__assert_func>:
 8002b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002b02:	4614      	mov	r4, r2
 8002b04:	461a      	mov	r2, r3
 8002b06:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <__assert_func+0x2c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4605      	mov	r5, r0
 8002b0c:	68d8      	ldr	r0, [r3, #12]
 8002b0e:	b14c      	cbz	r4, 8002b24 <__assert_func+0x24>
 8002b10:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <__assert_func+0x30>)
 8002b12:	9100      	str	r1, [sp, #0]
 8002b14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002b18:	4906      	ldr	r1, [pc, #24]	; (8002b34 <__assert_func+0x34>)
 8002b1a:	462b      	mov	r3, r5
 8002b1c:	f000 f80e 	bl	8002b3c <fiprintf>
 8002b20:	f000 fbd8 	bl	80032d4 <abort>
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <__assert_func+0x38>)
 8002b26:	461c      	mov	r4, r3
 8002b28:	e7f3      	b.n	8002b12 <__assert_func+0x12>
 8002b2a:	bf00      	nop
 8002b2c:	20000084 	.word	0x20000084
 8002b30:	08008122 	.word	0x08008122
 8002b34:	0800812f 	.word	0x0800812f
 8002b38:	0800815d 	.word	0x0800815d

08002b3c <fiprintf>:
 8002b3c:	b40e      	push	{r1, r2, r3}
 8002b3e:	b503      	push	{r0, r1, lr}
 8002b40:	4601      	mov	r1, r0
 8002b42:	ab03      	add	r3, sp, #12
 8002b44:	4805      	ldr	r0, [pc, #20]	; (8002b5c <fiprintf+0x20>)
 8002b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b4a:	6800      	ldr	r0, [r0, #0]
 8002b4c:	9301      	str	r3, [sp, #4]
 8002b4e:	f000 f83d 	bl	8002bcc <_vfiprintf_r>
 8002b52:	b002      	add	sp, #8
 8002b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b58:	b003      	add	sp, #12
 8002b5a:	4770      	bx	lr
 8002b5c:	20000084 	.word	0x20000084

08002b60 <__malloc_lock>:
 8002b60:	4801      	ldr	r0, [pc, #4]	; (8002b68 <__malloc_lock+0x8>)
 8002b62:	f000 bd77 	b.w	8003654 <__retarget_lock_acquire_recursive>
 8002b66:	bf00      	nop
 8002b68:	200005a4 	.word	0x200005a4

08002b6c <__malloc_unlock>:
 8002b6c:	4801      	ldr	r0, [pc, #4]	; (8002b74 <__malloc_unlock+0x8>)
 8002b6e:	f000 bd72 	b.w	8003656 <__retarget_lock_release_recursive>
 8002b72:	bf00      	nop
 8002b74:	200005a4 	.word	0x200005a4

08002b78 <__sfputc_r>:
 8002b78:	6893      	ldr	r3, [r2, #8]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	b410      	push	{r4}
 8002b80:	6093      	str	r3, [r2, #8]
 8002b82:	da08      	bge.n	8002b96 <__sfputc_r+0x1e>
 8002b84:	6994      	ldr	r4, [r2, #24]
 8002b86:	42a3      	cmp	r3, r4
 8002b88:	db01      	blt.n	8002b8e <__sfputc_r+0x16>
 8002b8a:	290a      	cmp	r1, #10
 8002b8c:	d103      	bne.n	8002b96 <__sfputc_r+0x1e>
 8002b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b92:	f000 badf 	b.w	8003154 <__swbuf_r>
 8002b96:	6813      	ldr	r3, [r2, #0]
 8002b98:	1c58      	adds	r0, r3, #1
 8002b9a:	6010      	str	r0, [r2, #0]
 8002b9c:	7019      	strb	r1, [r3, #0]
 8002b9e:	4608      	mov	r0, r1
 8002ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <__sfputs_r>:
 8002ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba8:	4606      	mov	r6, r0
 8002baa:	460f      	mov	r7, r1
 8002bac:	4614      	mov	r4, r2
 8002bae:	18d5      	adds	r5, r2, r3
 8002bb0:	42ac      	cmp	r4, r5
 8002bb2:	d101      	bne.n	8002bb8 <__sfputs_r+0x12>
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	e007      	b.n	8002bc8 <__sfputs_r+0x22>
 8002bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bbc:	463a      	mov	r2, r7
 8002bbe:	4630      	mov	r0, r6
 8002bc0:	f7ff ffda 	bl	8002b78 <__sfputc_r>
 8002bc4:	1c43      	adds	r3, r0, #1
 8002bc6:	d1f3      	bne.n	8002bb0 <__sfputs_r+0xa>
 8002bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002bcc <_vfiprintf_r>:
 8002bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bd0:	460d      	mov	r5, r1
 8002bd2:	b09d      	sub	sp, #116	; 0x74
 8002bd4:	4614      	mov	r4, r2
 8002bd6:	4698      	mov	r8, r3
 8002bd8:	4606      	mov	r6, r0
 8002bda:	b118      	cbz	r0, 8002be4 <_vfiprintf_r+0x18>
 8002bdc:	6983      	ldr	r3, [r0, #24]
 8002bde:	b90b      	cbnz	r3, 8002be4 <_vfiprintf_r+0x18>
 8002be0:	f000 fc9a 	bl	8003518 <__sinit>
 8002be4:	4b89      	ldr	r3, [pc, #548]	; (8002e0c <_vfiprintf_r+0x240>)
 8002be6:	429d      	cmp	r5, r3
 8002be8:	d11b      	bne.n	8002c22 <_vfiprintf_r+0x56>
 8002bea:	6875      	ldr	r5, [r6, #4]
 8002bec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002bee:	07d9      	lsls	r1, r3, #31
 8002bf0:	d405      	bmi.n	8002bfe <_vfiprintf_r+0x32>
 8002bf2:	89ab      	ldrh	r3, [r5, #12]
 8002bf4:	059a      	lsls	r2, r3, #22
 8002bf6:	d402      	bmi.n	8002bfe <_vfiprintf_r+0x32>
 8002bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002bfa:	f000 fd2b 	bl	8003654 <__retarget_lock_acquire_recursive>
 8002bfe:	89ab      	ldrh	r3, [r5, #12]
 8002c00:	071b      	lsls	r3, r3, #28
 8002c02:	d501      	bpl.n	8002c08 <_vfiprintf_r+0x3c>
 8002c04:	692b      	ldr	r3, [r5, #16]
 8002c06:	b9eb      	cbnz	r3, 8002c44 <_vfiprintf_r+0x78>
 8002c08:	4629      	mov	r1, r5
 8002c0a:	4630      	mov	r0, r6
 8002c0c:	f000 faf4 	bl	80031f8 <__swsetup_r>
 8002c10:	b1c0      	cbz	r0, 8002c44 <_vfiprintf_r+0x78>
 8002c12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c14:	07dc      	lsls	r4, r3, #31
 8002c16:	d50e      	bpl.n	8002c36 <_vfiprintf_r+0x6a>
 8002c18:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1c:	b01d      	add	sp, #116	; 0x74
 8002c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c22:	4b7b      	ldr	r3, [pc, #492]	; (8002e10 <_vfiprintf_r+0x244>)
 8002c24:	429d      	cmp	r5, r3
 8002c26:	d101      	bne.n	8002c2c <_vfiprintf_r+0x60>
 8002c28:	68b5      	ldr	r5, [r6, #8]
 8002c2a:	e7df      	b.n	8002bec <_vfiprintf_r+0x20>
 8002c2c:	4b79      	ldr	r3, [pc, #484]	; (8002e14 <_vfiprintf_r+0x248>)
 8002c2e:	429d      	cmp	r5, r3
 8002c30:	bf08      	it	eq
 8002c32:	68f5      	ldreq	r5, [r6, #12]
 8002c34:	e7da      	b.n	8002bec <_vfiprintf_r+0x20>
 8002c36:	89ab      	ldrh	r3, [r5, #12]
 8002c38:	0598      	lsls	r0, r3, #22
 8002c3a:	d4ed      	bmi.n	8002c18 <_vfiprintf_r+0x4c>
 8002c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c3e:	f000 fd0a 	bl	8003656 <__retarget_lock_release_recursive>
 8002c42:	e7e9      	b.n	8002c18 <_vfiprintf_r+0x4c>
 8002c44:	2300      	movs	r3, #0
 8002c46:	9309      	str	r3, [sp, #36]	; 0x24
 8002c48:	2320      	movs	r3, #32
 8002c4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c52:	2330      	movs	r3, #48	; 0x30
 8002c54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002e18 <_vfiprintf_r+0x24c>
 8002c58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c5c:	f04f 0901 	mov.w	r9, #1
 8002c60:	4623      	mov	r3, r4
 8002c62:	469a      	mov	sl, r3
 8002c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c68:	b10a      	cbz	r2, 8002c6e <_vfiprintf_r+0xa2>
 8002c6a:	2a25      	cmp	r2, #37	; 0x25
 8002c6c:	d1f9      	bne.n	8002c62 <_vfiprintf_r+0x96>
 8002c6e:	ebba 0b04 	subs.w	fp, sl, r4
 8002c72:	d00b      	beq.n	8002c8c <_vfiprintf_r+0xc0>
 8002c74:	465b      	mov	r3, fp
 8002c76:	4622      	mov	r2, r4
 8002c78:	4629      	mov	r1, r5
 8002c7a:	4630      	mov	r0, r6
 8002c7c:	f7ff ff93 	bl	8002ba6 <__sfputs_r>
 8002c80:	3001      	adds	r0, #1
 8002c82:	f000 80aa 	beq.w	8002dda <_vfiprintf_r+0x20e>
 8002c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c88:	445a      	add	r2, fp
 8002c8a:	9209      	str	r2, [sp, #36]	; 0x24
 8002c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 80a2 	beq.w	8002dda <_vfiprintf_r+0x20e>
 8002c96:	2300      	movs	r3, #0
 8002c98:	f04f 32ff 	mov.w	r2, #4294967295
 8002c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ca0:	f10a 0a01 	add.w	sl, sl, #1
 8002ca4:	9304      	str	r3, [sp, #16]
 8002ca6:	9307      	str	r3, [sp, #28]
 8002ca8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cac:	931a      	str	r3, [sp, #104]	; 0x68
 8002cae:	4654      	mov	r4, sl
 8002cb0:	2205      	movs	r2, #5
 8002cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cb6:	4858      	ldr	r0, [pc, #352]	; (8002e18 <_vfiprintf_r+0x24c>)
 8002cb8:	f7fd fa9a 	bl	80001f0 <memchr>
 8002cbc:	9a04      	ldr	r2, [sp, #16]
 8002cbe:	b9d8      	cbnz	r0, 8002cf8 <_vfiprintf_r+0x12c>
 8002cc0:	06d1      	lsls	r1, r2, #27
 8002cc2:	bf44      	itt	mi
 8002cc4:	2320      	movmi	r3, #32
 8002cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cca:	0713      	lsls	r3, r2, #28
 8002ccc:	bf44      	itt	mi
 8002cce:	232b      	movmi	r3, #43	; 0x2b
 8002cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8002cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8002cda:	d015      	beq.n	8002d08 <_vfiprintf_r+0x13c>
 8002cdc:	9a07      	ldr	r2, [sp, #28]
 8002cde:	4654      	mov	r4, sl
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f04f 0c0a 	mov.w	ip, #10
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cec:	3b30      	subs	r3, #48	; 0x30
 8002cee:	2b09      	cmp	r3, #9
 8002cf0:	d94e      	bls.n	8002d90 <_vfiprintf_r+0x1c4>
 8002cf2:	b1b0      	cbz	r0, 8002d22 <_vfiprintf_r+0x156>
 8002cf4:	9207      	str	r2, [sp, #28]
 8002cf6:	e014      	b.n	8002d22 <_vfiprintf_r+0x156>
 8002cf8:	eba0 0308 	sub.w	r3, r0, r8
 8002cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8002d00:	4313      	orrs	r3, r2
 8002d02:	9304      	str	r3, [sp, #16]
 8002d04:	46a2      	mov	sl, r4
 8002d06:	e7d2      	b.n	8002cae <_vfiprintf_r+0xe2>
 8002d08:	9b03      	ldr	r3, [sp, #12]
 8002d0a:	1d19      	adds	r1, r3, #4
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	9103      	str	r1, [sp, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bfbb      	ittet	lt
 8002d14:	425b      	neglt	r3, r3
 8002d16:	f042 0202 	orrlt.w	r2, r2, #2
 8002d1a:	9307      	strge	r3, [sp, #28]
 8002d1c:	9307      	strlt	r3, [sp, #28]
 8002d1e:	bfb8      	it	lt
 8002d20:	9204      	strlt	r2, [sp, #16]
 8002d22:	7823      	ldrb	r3, [r4, #0]
 8002d24:	2b2e      	cmp	r3, #46	; 0x2e
 8002d26:	d10c      	bne.n	8002d42 <_vfiprintf_r+0x176>
 8002d28:	7863      	ldrb	r3, [r4, #1]
 8002d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8002d2c:	d135      	bne.n	8002d9a <_vfiprintf_r+0x1ce>
 8002d2e:	9b03      	ldr	r3, [sp, #12]
 8002d30:	1d1a      	adds	r2, r3, #4
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	9203      	str	r2, [sp, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	bfb8      	it	lt
 8002d3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d3e:	3402      	adds	r4, #2
 8002d40:	9305      	str	r3, [sp, #20]
 8002d42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002e28 <_vfiprintf_r+0x25c>
 8002d46:	7821      	ldrb	r1, [r4, #0]
 8002d48:	2203      	movs	r2, #3
 8002d4a:	4650      	mov	r0, sl
 8002d4c:	f7fd fa50 	bl	80001f0 <memchr>
 8002d50:	b140      	cbz	r0, 8002d64 <_vfiprintf_r+0x198>
 8002d52:	2340      	movs	r3, #64	; 0x40
 8002d54:	eba0 000a 	sub.w	r0, r0, sl
 8002d58:	fa03 f000 	lsl.w	r0, r3, r0
 8002d5c:	9b04      	ldr	r3, [sp, #16]
 8002d5e:	4303      	orrs	r3, r0
 8002d60:	3401      	adds	r4, #1
 8002d62:	9304      	str	r3, [sp, #16]
 8002d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d68:	482c      	ldr	r0, [pc, #176]	; (8002e1c <_vfiprintf_r+0x250>)
 8002d6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d6e:	2206      	movs	r2, #6
 8002d70:	f7fd fa3e 	bl	80001f0 <memchr>
 8002d74:	2800      	cmp	r0, #0
 8002d76:	d03f      	beq.n	8002df8 <_vfiprintf_r+0x22c>
 8002d78:	4b29      	ldr	r3, [pc, #164]	; (8002e20 <_vfiprintf_r+0x254>)
 8002d7a:	bb1b      	cbnz	r3, 8002dc4 <_vfiprintf_r+0x1f8>
 8002d7c:	9b03      	ldr	r3, [sp, #12]
 8002d7e:	3307      	adds	r3, #7
 8002d80:	f023 0307 	bic.w	r3, r3, #7
 8002d84:	3308      	adds	r3, #8
 8002d86:	9303      	str	r3, [sp, #12]
 8002d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d8a:	443b      	add	r3, r7
 8002d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8002d8e:	e767      	b.n	8002c60 <_vfiprintf_r+0x94>
 8002d90:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d94:	460c      	mov	r4, r1
 8002d96:	2001      	movs	r0, #1
 8002d98:	e7a5      	b.n	8002ce6 <_vfiprintf_r+0x11a>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	3401      	adds	r4, #1
 8002d9e:	9305      	str	r3, [sp, #20]
 8002da0:	4619      	mov	r1, r3
 8002da2:	f04f 0c0a 	mov.w	ip, #10
 8002da6:	4620      	mov	r0, r4
 8002da8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002dac:	3a30      	subs	r2, #48	; 0x30
 8002dae:	2a09      	cmp	r2, #9
 8002db0:	d903      	bls.n	8002dba <_vfiprintf_r+0x1ee>
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0c5      	beq.n	8002d42 <_vfiprintf_r+0x176>
 8002db6:	9105      	str	r1, [sp, #20]
 8002db8:	e7c3      	b.n	8002d42 <_vfiprintf_r+0x176>
 8002dba:	fb0c 2101 	mla	r1, ip, r1, r2
 8002dbe:	4604      	mov	r4, r0
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e7f0      	b.n	8002da6 <_vfiprintf_r+0x1da>
 8002dc4:	ab03      	add	r3, sp, #12
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	462a      	mov	r2, r5
 8002dca:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <_vfiprintf_r+0x258>)
 8002dcc:	a904      	add	r1, sp, #16
 8002dce:	4630      	mov	r0, r6
 8002dd0:	f3af 8000 	nop.w
 8002dd4:	4607      	mov	r7, r0
 8002dd6:	1c78      	adds	r0, r7, #1
 8002dd8:	d1d6      	bne.n	8002d88 <_vfiprintf_r+0x1bc>
 8002dda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ddc:	07d9      	lsls	r1, r3, #31
 8002dde:	d405      	bmi.n	8002dec <_vfiprintf_r+0x220>
 8002de0:	89ab      	ldrh	r3, [r5, #12]
 8002de2:	059a      	lsls	r2, r3, #22
 8002de4:	d402      	bmi.n	8002dec <_vfiprintf_r+0x220>
 8002de6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002de8:	f000 fc35 	bl	8003656 <__retarget_lock_release_recursive>
 8002dec:	89ab      	ldrh	r3, [r5, #12]
 8002dee:	065b      	lsls	r3, r3, #25
 8002df0:	f53f af12 	bmi.w	8002c18 <_vfiprintf_r+0x4c>
 8002df4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002df6:	e711      	b.n	8002c1c <_vfiprintf_r+0x50>
 8002df8:	ab03      	add	r3, sp, #12
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	462a      	mov	r2, r5
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <_vfiprintf_r+0x258>)
 8002e00:	a904      	add	r1, sp, #16
 8002e02:	4630      	mov	r0, r6
 8002e04:	f000 f880 	bl	8002f08 <_printf_i>
 8002e08:	e7e4      	b.n	8002dd4 <_vfiprintf_r+0x208>
 8002e0a:	bf00      	nop
 8002e0c:	080081b4 	.word	0x080081b4
 8002e10:	080081d4 	.word	0x080081d4
 8002e14:	08008194 	.word	0x08008194
 8002e18:	0800815e 	.word	0x0800815e
 8002e1c:	08008168 	.word	0x08008168
 8002e20:	00000000 	.word	0x00000000
 8002e24:	08002ba7 	.word	0x08002ba7
 8002e28:	08008164 	.word	0x08008164

08002e2c <_printf_common>:
 8002e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e30:	4616      	mov	r6, r2
 8002e32:	4699      	mov	r9, r3
 8002e34:	688a      	ldr	r2, [r1, #8]
 8002e36:	690b      	ldr	r3, [r1, #16]
 8002e38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	bfb8      	it	lt
 8002e40:	4613      	movlt	r3, r2
 8002e42:	6033      	str	r3, [r6, #0]
 8002e44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e48:	4607      	mov	r7, r0
 8002e4a:	460c      	mov	r4, r1
 8002e4c:	b10a      	cbz	r2, 8002e52 <_printf_common+0x26>
 8002e4e:	3301      	adds	r3, #1
 8002e50:	6033      	str	r3, [r6, #0]
 8002e52:	6823      	ldr	r3, [r4, #0]
 8002e54:	0699      	lsls	r1, r3, #26
 8002e56:	bf42      	ittt	mi
 8002e58:	6833      	ldrmi	r3, [r6, #0]
 8002e5a:	3302      	addmi	r3, #2
 8002e5c:	6033      	strmi	r3, [r6, #0]
 8002e5e:	6825      	ldr	r5, [r4, #0]
 8002e60:	f015 0506 	ands.w	r5, r5, #6
 8002e64:	d106      	bne.n	8002e74 <_printf_common+0x48>
 8002e66:	f104 0a19 	add.w	sl, r4, #25
 8002e6a:	68e3      	ldr	r3, [r4, #12]
 8002e6c:	6832      	ldr	r2, [r6, #0]
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	42ab      	cmp	r3, r5
 8002e72:	dc26      	bgt.n	8002ec2 <_printf_common+0x96>
 8002e74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e78:	1e13      	subs	r3, r2, #0
 8002e7a:	6822      	ldr	r2, [r4, #0]
 8002e7c:	bf18      	it	ne
 8002e7e:	2301      	movne	r3, #1
 8002e80:	0692      	lsls	r2, r2, #26
 8002e82:	d42b      	bmi.n	8002edc <_printf_common+0xb0>
 8002e84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e88:	4649      	mov	r1, r9
 8002e8a:	4638      	mov	r0, r7
 8002e8c:	47c0      	blx	r8
 8002e8e:	3001      	adds	r0, #1
 8002e90:	d01e      	beq.n	8002ed0 <_printf_common+0xa4>
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	68e5      	ldr	r5, [r4, #12]
 8002e96:	6832      	ldr	r2, [r6, #0]
 8002e98:	f003 0306 	and.w	r3, r3, #6
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	bf08      	it	eq
 8002ea0:	1aad      	subeq	r5, r5, r2
 8002ea2:	68a3      	ldr	r3, [r4, #8]
 8002ea4:	6922      	ldr	r2, [r4, #16]
 8002ea6:	bf0c      	ite	eq
 8002ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002eac:	2500      	movne	r5, #0
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	bfc4      	itt	gt
 8002eb2:	1a9b      	subgt	r3, r3, r2
 8002eb4:	18ed      	addgt	r5, r5, r3
 8002eb6:	2600      	movs	r6, #0
 8002eb8:	341a      	adds	r4, #26
 8002eba:	42b5      	cmp	r5, r6
 8002ebc:	d11a      	bne.n	8002ef4 <_printf_common+0xc8>
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	e008      	b.n	8002ed4 <_printf_common+0xa8>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	4652      	mov	r2, sl
 8002ec6:	4649      	mov	r1, r9
 8002ec8:	4638      	mov	r0, r7
 8002eca:	47c0      	blx	r8
 8002ecc:	3001      	adds	r0, #1
 8002ece:	d103      	bne.n	8002ed8 <_printf_common+0xac>
 8002ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ed8:	3501      	adds	r5, #1
 8002eda:	e7c6      	b.n	8002e6a <_printf_common+0x3e>
 8002edc:	18e1      	adds	r1, r4, r3
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	2030      	movs	r0, #48	; 0x30
 8002ee2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ee6:	4422      	add	r2, r4
 8002ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002eec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	e7c7      	b.n	8002e84 <_printf_common+0x58>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	4622      	mov	r2, r4
 8002ef8:	4649      	mov	r1, r9
 8002efa:	4638      	mov	r0, r7
 8002efc:	47c0      	blx	r8
 8002efe:	3001      	adds	r0, #1
 8002f00:	d0e6      	beq.n	8002ed0 <_printf_common+0xa4>
 8002f02:	3601      	adds	r6, #1
 8002f04:	e7d9      	b.n	8002eba <_printf_common+0x8e>
	...

08002f08 <_printf_i>:
 8002f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f0c:	460c      	mov	r4, r1
 8002f0e:	4691      	mov	r9, r2
 8002f10:	7e27      	ldrb	r7, [r4, #24]
 8002f12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002f14:	2f78      	cmp	r7, #120	; 0x78
 8002f16:	4680      	mov	r8, r0
 8002f18:	469a      	mov	sl, r3
 8002f1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f1e:	d807      	bhi.n	8002f30 <_printf_i+0x28>
 8002f20:	2f62      	cmp	r7, #98	; 0x62
 8002f22:	d80a      	bhi.n	8002f3a <_printf_i+0x32>
 8002f24:	2f00      	cmp	r7, #0
 8002f26:	f000 80d8 	beq.w	80030da <_printf_i+0x1d2>
 8002f2a:	2f58      	cmp	r7, #88	; 0x58
 8002f2c:	f000 80a3 	beq.w	8003076 <_printf_i+0x16e>
 8002f30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f38:	e03a      	b.n	8002fb0 <_printf_i+0xa8>
 8002f3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f3e:	2b15      	cmp	r3, #21
 8002f40:	d8f6      	bhi.n	8002f30 <_printf_i+0x28>
 8002f42:	a001      	add	r0, pc, #4	; (adr r0, 8002f48 <_printf_i+0x40>)
 8002f44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002f48:	08002fa1 	.word	0x08002fa1
 8002f4c:	08002fb5 	.word	0x08002fb5
 8002f50:	08002f31 	.word	0x08002f31
 8002f54:	08002f31 	.word	0x08002f31
 8002f58:	08002f31 	.word	0x08002f31
 8002f5c:	08002f31 	.word	0x08002f31
 8002f60:	08002fb5 	.word	0x08002fb5
 8002f64:	08002f31 	.word	0x08002f31
 8002f68:	08002f31 	.word	0x08002f31
 8002f6c:	08002f31 	.word	0x08002f31
 8002f70:	08002f31 	.word	0x08002f31
 8002f74:	080030c1 	.word	0x080030c1
 8002f78:	08002fe5 	.word	0x08002fe5
 8002f7c:	080030a3 	.word	0x080030a3
 8002f80:	08002f31 	.word	0x08002f31
 8002f84:	08002f31 	.word	0x08002f31
 8002f88:	080030e3 	.word	0x080030e3
 8002f8c:	08002f31 	.word	0x08002f31
 8002f90:	08002fe5 	.word	0x08002fe5
 8002f94:	08002f31 	.word	0x08002f31
 8002f98:	08002f31 	.word	0x08002f31
 8002f9c:	080030ab 	.word	0x080030ab
 8002fa0:	680b      	ldr	r3, [r1, #0]
 8002fa2:	1d1a      	adds	r2, r3, #4
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	600a      	str	r2, [r1, #0]
 8002fa8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002fac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0a3      	b.n	80030fc <_printf_i+0x1f4>
 8002fb4:	6825      	ldr	r5, [r4, #0]
 8002fb6:	6808      	ldr	r0, [r1, #0]
 8002fb8:	062e      	lsls	r6, r5, #24
 8002fba:	f100 0304 	add.w	r3, r0, #4
 8002fbe:	d50a      	bpl.n	8002fd6 <_printf_i+0xce>
 8002fc0:	6805      	ldr	r5, [r0, #0]
 8002fc2:	600b      	str	r3, [r1, #0]
 8002fc4:	2d00      	cmp	r5, #0
 8002fc6:	da03      	bge.n	8002fd0 <_printf_i+0xc8>
 8002fc8:	232d      	movs	r3, #45	; 0x2d
 8002fca:	426d      	negs	r5, r5
 8002fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fd0:	485e      	ldr	r0, [pc, #376]	; (800314c <_printf_i+0x244>)
 8002fd2:	230a      	movs	r3, #10
 8002fd4:	e019      	b.n	800300a <_printf_i+0x102>
 8002fd6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002fda:	6805      	ldr	r5, [r0, #0]
 8002fdc:	600b      	str	r3, [r1, #0]
 8002fde:	bf18      	it	ne
 8002fe0:	b22d      	sxthne	r5, r5
 8002fe2:	e7ef      	b.n	8002fc4 <_printf_i+0xbc>
 8002fe4:	680b      	ldr	r3, [r1, #0]
 8002fe6:	6825      	ldr	r5, [r4, #0]
 8002fe8:	1d18      	adds	r0, r3, #4
 8002fea:	6008      	str	r0, [r1, #0]
 8002fec:	0628      	lsls	r0, r5, #24
 8002fee:	d501      	bpl.n	8002ff4 <_printf_i+0xec>
 8002ff0:	681d      	ldr	r5, [r3, #0]
 8002ff2:	e002      	b.n	8002ffa <_printf_i+0xf2>
 8002ff4:	0669      	lsls	r1, r5, #25
 8002ff6:	d5fb      	bpl.n	8002ff0 <_printf_i+0xe8>
 8002ff8:	881d      	ldrh	r5, [r3, #0]
 8002ffa:	4854      	ldr	r0, [pc, #336]	; (800314c <_printf_i+0x244>)
 8002ffc:	2f6f      	cmp	r7, #111	; 0x6f
 8002ffe:	bf0c      	ite	eq
 8003000:	2308      	moveq	r3, #8
 8003002:	230a      	movne	r3, #10
 8003004:	2100      	movs	r1, #0
 8003006:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800300a:	6866      	ldr	r6, [r4, #4]
 800300c:	60a6      	str	r6, [r4, #8]
 800300e:	2e00      	cmp	r6, #0
 8003010:	bfa2      	ittt	ge
 8003012:	6821      	ldrge	r1, [r4, #0]
 8003014:	f021 0104 	bicge.w	r1, r1, #4
 8003018:	6021      	strge	r1, [r4, #0]
 800301a:	b90d      	cbnz	r5, 8003020 <_printf_i+0x118>
 800301c:	2e00      	cmp	r6, #0
 800301e:	d04d      	beq.n	80030bc <_printf_i+0x1b4>
 8003020:	4616      	mov	r6, r2
 8003022:	fbb5 f1f3 	udiv	r1, r5, r3
 8003026:	fb03 5711 	mls	r7, r3, r1, r5
 800302a:	5dc7      	ldrb	r7, [r0, r7]
 800302c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003030:	462f      	mov	r7, r5
 8003032:	42bb      	cmp	r3, r7
 8003034:	460d      	mov	r5, r1
 8003036:	d9f4      	bls.n	8003022 <_printf_i+0x11a>
 8003038:	2b08      	cmp	r3, #8
 800303a:	d10b      	bne.n	8003054 <_printf_i+0x14c>
 800303c:	6823      	ldr	r3, [r4, #0]
 800303e:	07df      	lsls	r7, r3, #31
 8003040:	d508      	bpl.n	8003054 <_printf_i+0x14c>
 8003042:	6923      	ldr	r3, [r4, #16]
 8003044:	6861      	ldr	r1, [r4, #4]
 8003046:	4299      	cmp	r1, r3
 8003048:	bfde      	ittt	le
 800304a:	2330      	movle	r3, #48	; 0x30
 800304c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003050:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003054:	1b92      	subs	r2, r2, r6
 8003056:	6122      	str	r2, [r4, #16]
 8003058:	f8cd a000 	str.w	sl, [sp]
 800305c:	464b      	mov	r3, r9
 800305e:	aa03      	add	r2, sp, #12
 8003060:	4621      	mov	r1, r4
 8003062:	4640      	mov	r0, r8
 8003064:	f7ff fee2 	bl	8002e2c <_printf_common>
 8003068:	3001      	adds	r0, #1
 800306a:	d14c      	bne.n	8003106 <_printf_i+0x1fe>
 800306c:	f04f 30ff 	mov.w	r0, #4294967295
 8003070:	b004      	add	sp, #16
 8003072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003076:	4835      	ldr	r0, [pc, #212]	; (800314c <_printf_i+0x244>)
 8003078:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800307c:	6823      	ldr	r3, [r4, #0]
 800307e:	680e      	ldr	r6, [r1, #0]
 8003080:	061f      	lsls	r7, r3, #24
 8003082:	f856 5b04 	ldr.w	r5, [r6], #4
 8003086:	600e      	str	r6, [r1, #0]
 8003088:	d514      	bpl.n	80030b4 <_printf_i+0x1ac>
 800308a:	07d9      	lsls	r1, r3, #31
 800308c:	bf44      	itt	mi
 800308e:	f043 0320 	orrmi.w	r3, r3, #32
 8003092:	6023      	strmi	r3, [r4, #0]
 8003094:	b91d      	cbnz	r5, 800309e <_printf_i+0x196>
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	f023 0320 	bic.w	r3, r3, #32
 800309c:	6023      	str	r3, [r4, #0]
 800309e:	2310      	movs	r3, #16
 80030a0:	e7b0      	b.n	8003004 <_printf_i+0xfc>
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	f043 0320 	orr.w	r3, r3, #32
 80030a8:	6023      	str	r3, [r4, #0]
 80030aa:	2378      	movs	r3, #120	; 0x78
 80030ac:	4828      	ldr	r0, [pc, #160]	; (8003150 <_printf_i+0x248>)
 80030ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030b2:	e7e3      	b.n	800307c <_printf_i+0x174>
 80030b4:	065e      	lsls	r6, r3, #25
 80030b6:	bf48      	it	mi
 80030b8:	b2ad      	uxthmi	r5, r5
 80030ba:	e7e6      	b.n	800308a <_printf_i+0x182>
 80030bc:	4616      	mov	r6, r2
 80030be:	e7bb      	b.n	8003038 <_printf_i+0x130>
 80030c0:	680b      	ldr	r3, [r1, #0]
 80030c2:	6826      	ldr	r6, [r4, #0]
 80030c4:	6960      	ldr	r0, [r4, #20]
 80030c6:	1d1d      	adds	r5, r3, #4
 80030c8:	600d      	str	r5, [r1, #0]
 80030ca:	0635      	lsls	r5, r6, #24
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	d501      	bpl.n	80030d4 <_printf_i+0x1cc>
 80030d0:	6018      	str	r0, [r3, #0]
 80030d2:	e002      	b.n	80030da <_printf_i+0x1d2>
 80030d4:	0671      	lsls	r1, r6, #25
 80030d6:	d5fb      	bpl.n	80030d0 <_printf_i+0x1c8>
 80030d8:	8018      	strh	r0, [r3, #0]
 80030da:	2300      	movs	r3, #0
 80030dc:	6123      	str	r3, [r4, #16]
 80030de:	4616      	mov	r6, r2
 80030e0:	e7ba      	b.n	8003058 <_printf_i+0x150>
 80030e2:	680b      	ldr	r3, [r1, #0]
 80030e4:	1d1a      	adds	r2, r3, #4
 80030e6:	600a      	str	r2, [r1, #0]
 80030e8:	681e      	ldr	r6, [r3, #0]
 80030ea:	6862      	ldr	r2, [r4, #4]
 80030ec:	2100      	movs	r1, #0
 80030ee:	4630      	mov	r0, r6
 80030f0:	f7fd f87e 	bl	80001f0 <memchr>
 80030f4:	b108      	cbz	r0, 80030fa <_printf_i+0x1f2>
 80030f6:	1b80      	subs	r0, r0, r6
 80030f8:	6060      	str	r0, [r4, #4]
 80030fa:	6863      	ldr	r3, [r4, #4]
 80030fc:	6123      	str	r3, [r4, #16]
 80030fe:	2300      	movs	r3, #0
 8003100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003104:	e7a8      	b.n	8003058 <_printf_i+0x150>
 8003106:	6923      	ldr	r3, [r4, #16]
 8003108:	4632      	mov	r2, r6
 800310a:	4649      	mov	r1, r9
 800310c:	4640      	mov	r0, r8
 800310e:	47d0      	blx	sl
 8003110:	3001      	adds	r0, #1
 8003112:	d0ab      	beq.n	800306c <_printf_i+0x164>
 8003114:	6823      	ldr	r3, [r4, #0]
 8003116:	079b      	lsls	r3, r3, #30
 8003118:	d413      	bmi.n	8003142 <_printf_i+0x23a>
 800311a:	68e0      	ldr	r0, [r4, #12]
 800311c:	9b03      	ldr	r3, [sp, #12]
 800311e:	4298      	cmp	r0, r3
 8003120:	bfb8      	it	lt
 8003122:	4618      	movlt	r0, r3
 8003124:	e7a4      	b.n	8003070 <_printf_i+0x168>
 8003126:	2301      	movs	r3, #1
 8003128:	4632      	mov	r2, r6
 800312a:	4649      	mov	r1, r9
 800312c:	4640      	mov	r0, r8
 800312e:	47d0      	blx	sl
 8003130:	3001      	adds	r0, #1
 8003132:	d09b      	beq.n	800306c <_printf_i+0x164>
 8003134:	3501      	adds	r5, #1
 8003136:	68e3      	ldr	r3, [r4, #12]
 8003138:	9903      	ldr	r1, [sp, #12]
 800313a:	1a5b      	subs	r3, r3, r1
 800313c:	42ab      	cmp	r3, r5
 800313e:	dcf2      	bgt.n	8003126 <_printf_i+0x21e>
 8003140:	e7eb      	b.n	800311a <_printf_i+0x212>
 8003142:	2500      	movs	r5, #0
 8003144:	f104 0619 	add.w	r6, r4, #25
 8003148:	e7f5      	b.n	8003136 <_printf_i+0x22e>
 800314a:	bf00      	nop
 800314c:	0800816f 	.word	0x0800816f
 8003150:	08008180 	.word	0x08008180

08003154 <__swbuf_r>:
 8003154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003156:	460e      	mov	r6, r1
 8003158:	4614      	mov	r4, r2
 800315a:	4605      	mov	r5, r0
 800315c:	b118      	cbz	r0, 8003166 <__swbuf_r+0x12>
 800315e:	6983      	ldr	r3, [r0, #24]
 8003160:	b90b      	cbnz	r3, 8003166 <__swbuf_r+0x12>
 8003162:	f000 f9d9 	bl	8003518 <__sinit>
 8003166:	4b21      	ldr	r3, [pc, #132]	; (80031ec <__swbuf_r+0x98>)
 8003168:	429c      	cmp	r4, r3
 800316a:	d12b      	bne.n	80031c4 <__swbuf_r+0x70>
 800316c:	686c      	ldr	r4, [r5, #4]
 800316e:	69a3      	ldr	r3, [r4, #24]
 8003170:	60a3      	str	r3, [r4, #8]
 8003172:	89a3      	ldrh	r3, [r4, #12]
 8003174:	071a      	lsls	r2, r3, #28
 8003176:	d52f      	bpl.n	80031d8 <__swbuf_r+0x84>
 8003178:	6923      	ldr	r3, [r4, #16]
 800317a:	b36b      	cbz	r3, 80031d8 <__swbuf_r+0x84>
 800317c:	6923      	ldr	r3, [r4, #16]
 800317e:	6820      	ldr	r0, [r4, #0]
 8003180:	1ac0      	subs	r0, r0, r3
 8003182:	6963      	ldr	r3, [r4, #20]
 8003184:	b2f6      	uxtb	r6, r6
 8003186:	4283      	cmp	r3, r0
 8003188:	4637      	mov	r7, r6
 800318a:	dc04      	bgt.n	8003196 <__swbuf_r+0x42>
 800318c:	4621      	mov	r1, r4
 800318e:	4628      	mov	r0, r5
 8003190:	f000 f92e 	bl	80033f0 <_fflush_r>
 8003194:	bb30      	cbnz	r0, 80031e4 <__swbuf_r+0x90>
 8003196:	68a3      	ldr	r3, [r4, #8]
 8003198:	3b01      	subs	r3, #1
 800319a:	60a3      	str	r3, [r4, #8]
 800319c:	6823      	ldr	r3, [r4, #0]
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	6022      	str	r2, [r4, #0]
 80031a2:	701e      	strb	r6, [r3, #0]
 80031a4:	6963      	ldr	r3, [r4, #20]
 80031a6:	3001      	adds	r0, #1
 80031a8:	4283      	cmp	r3, r0
 80031aa:	d004      	beq.n	80031b6 <__swbuf_r+0x62>
 80031ac:	89a3      	ldrh	r3, [r4, #12]
 80031ae:	07db      	lsls	r3, r3, #31
 80031b0:	d506      	bpl.n	80031c0 <__swbuf_r+0x6c>
 80031b2:	2e0a      	cmp	r6, #10
 80031b4:	d104      	bne.n	80031c0 <__swbuf_r+0x6c>
 80031b6:	4621      	mov	r1, r4
 80031b8:	4628      	mov	r0, r5
 80031ba:	f000 f919 	bl	80033f0 <_fflush_r>
 80031be:	b988      	cbnz	r0, 80031e4 <__swbuf_r+0x90>
 80031c0:	4638      	mov	r0, r7
 80031c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031c4:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <__swbuf_r+0x9c>)
 80031c6:	429c      	cmp	r4, r3
 80031c8:	d101      	bne.n	80031ce <__swbuf_r+0x7a>
 80031ca:	68ac      	ldr	r4, [r5, #8]
 80031cc:	e7cf      	b.n	800316e <__swbuf_r+0x1a>
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <__swbuf_r+0xa0>)
 80031d0:	429c      	cmp	r4, r3
 80031d2:	bf08      	it	eq
 80031d4:	68ec      	ldreq	r4, [r5, #12]
 80031d6:	e7ca      	b.n	800316e <__swbuf_r+0x1a>
 80031d8:	4621      	mov	r1, r4
 80031da:	4628      	mov	r0, r5
 80031dc:	f000 f80c 	bl	80031f8 <__swsetup_r>
 80031e0:	2800      	cmp	r0, #0
 80031e2:	d0cb      	beq.n	800317c <__swbuf_r+0x28>
 80031e4:	f04f 37ff 	mov.w	r7, #4294967295
 80031e8:	e7ea      	b.n	80031c0 <__swbuf_r+0x6c>
 80031ea:	bf00      	nop
 80031ec:	080081b4 	.word	0x080081b4
 80031f0:	080081d4 	.word	0x080081d4
 80031f4:	08008194 	.word	0x08008194

080031f8 <__swsetup_r>:
 80031f8:	4b32      	ldr	r3, [pc, #200]	; (80032c4 <__swsetup_r+0xcc>)
 80031fa:	b570      	push	{r4, r5, r6, lr}
 80031fc:	681d      	ldr	r5, [r3, #0]
 80031fe:	4606      	mov	r6, r0
 8003200:	460c      	mov	r4, r1
 8003202:	b125      	cbz	r5, 800320e <__swsetup_r+0x16>
 8003204:	69ab      	ldr	r3, [r5, #24]
 8003206:	b913      	cbnz	r3, 800320e <__swsetup_r+0x16>
 8003208:	4628      	mov	r0, r5
 800320a:	f000 f985 	bl	8003518 <__sinit>
 800320e:	4b2e      	ldr	r3, [pc, #184]	; (80032c8 <__swsetup_r+0xd0>)
 8003210:	429c      	cmp	r4, r3
 8003212:	d10f      	bne.n	8003234 <__swsetup_r+0x3c>
 8003214:	686c      	ldr	r4, [r5, #4]
 8003216:	89a3      	ldrh	r3, [r4, #12]
 8003218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800321c:	0719      	lsls	r1, r3, #28
 800321e:	d42c      	bmi.n	800327a <__swsetup_r+0x82>
 8003220:	06dd      	lsls	r5, r3, #27
 8003222:	d411      	bmi.n	8003248 <__swsetup_r+0x50>
 8003224:	2309      	movs	r3, #9
 8003226:	6033      	str	r3, [r6, #0]
 8003228:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800322c:	81a3      	strh	r3, [r4, #12]
 800322e:	f04f 30ff 	mov.w	r0, #4294967295
 8003232:	e03e      	b.n	80032b2 <__swsetup_r+0xba>
 8003234:	4b25      	ldr	r3, [pc, #148]	; (80032cc <__swsetup_r+0xd4>)
 8003236:	429c      	cmp	r4, r3
 8003238:	d101      	bne.n	800323e <__swsetup_r+0x46>
 800323a:	68ac      	ldr	r4, [r5, #8]
 800323c:	e7eb      	b.n	8003216 <__swsetup_r+0x1e>
 800323e:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <__swsetup_r+0xd8>)
 8003240:	429c      	cmp	r4, r3
 8003242:	bf08      	it	eq
 8003244:	68ec      	ldreq	r4, [r5, #12]
 8003246:	e7e6      	b.n	8003216 <__swsetup_r+0x1e>
 8003248:	0758      	lsls	r0, r3, #29
 800324a:	d512      	bpl.n	8003272 <__swsetup_r+0x7a>
 800324c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800324e:	b141      	cbz	r1, 8003262 <__swsetup_r+0x6a>
 8003250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003254:	4299      	cmp	r1, r3
 8003256:	d002      	beq.n	800325e <__swsetup_r+0x66>
 8003258:	4630      	mov	r0, r6
 800325a:	f7ff fb29 	bl	80028b0 <_free_r>
 800325e:	2300      	movs	r3, #0
 8003260:	6363      	str	r3, [r4, #52]	; 0x34
 8003262:	89a3      	ldrh	r3, [r4, #12]
 8003264:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003268:	81a3      	strh	r3, [r4, #12]
 800326a:	2300      	movs	r3, #0
 800326c:	6063      	str	r3, [r4, #4]
 800326e:	6923      	ldr	r3, [r4, #16]
 8003270:	6023      	str	r3, [r4, #0]
 8003272:	89a3      	ldrh	r3, [r4, #12]
 8003274:	f043 0308 	orr.w	r3, r3, #8
 8003278:	81a3      	strh	r3, [r4, #12]
 800327a:	6923      	ldr	r3, [r4, #16]
 800327c:	b94b      	cbnz	r3, 8003292 <__swsetup_r+0x9a>
 800327e:	89a3      	ldrh	r3, [r4, #12]
 8003280:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003288:	d003      	beq.n	8003292 <__swsetup_r+0x9a>
 800328a:	4621      	mov	r1, r4
 800328c:	4630      	mov	r0, r6
 800328e:	f000 fa07 	bl	80036a0 <__smakebuf_r>
 8003292:	89a0      	ldrh	r0, [r4, #12]
 8003294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003298:	f010 0301 	ands.w	r3, r0, #1
 800329c:	d00a      	beq.n	80032b4 <__swsetup_r+0xbc>
 800329e:	2300      	movs	r3, #0
 80032a0:	60a3      	str	r3, [r4, #8]
 80032a2:	6963      	ldr	r3, [r4, #20]
 80032a4:	425b      	negs	r3, r3
 80032a6:	61a3      	str	r3, [r4, #24]
 80032a8:	6923      	ldr	r3, [r4, #16]
 80032aa:	b943      	cbnz	r3, 80032be <__swsetup_r+0xc6>
 80032ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032b0:	d1ba      	bne.n	8003228 <__swsetup_r+0x30>
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	0781      	lsls	r1, r0, #30
 80032b6:	bf58      	it	pl
 80032b8:	6963      	ldrpl	r3, [r4, #20]
 80032ba:	60a3      	str	r3, [r4, #8]
 80032bc:	e7f4      	b.n	80032a8 <__swsetup_r+0xb0>
 80032be:	2000      	movs	r0, #0
 80032c0:	e7f7      	b.n	80032b2 <__swsetup_r+0xba>
 80032c2:	bf00      	nop
 80032c4:	20000084 	.word	0x20000084
 80032c8:	080081b4 	.word	0x080081b4
 80032cc:	080081d4 	.word	0x080081d4
 80032d0:	08008194 	.word	0x08008194

080032d4 <abort>:
 80032d4:	b508      	push	{r3, lr}
 80032d6:	2006      	movs	r0, #6
 80032d8:	f000 fa4a 	bl	8003770 <raise>
 80032dc:	2001      	movs	r0, #1
 80032de:	f7fe f8bf 	bl	8001460 <_exit>
	...

080032e4 <__sflush_r>:
 80032e4:	898a      	ldrh	r2, [r1, #12]
 80032e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032ea:	4605      	mov	r5, r0
 80032ec:	0710      	lsls	r0, r2, #28
 80032ee:	460c      	mov	r4, r1
 80032f0:	d458      	bmi.n	80033a4 <__sflush_r+0xc0>
 80032f2:	684b      	ldr	r3, [r1, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	dc05      	bgt.n	8003304 <__sflush_r+0x20>
 80032f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	dc02      	bgt.n	8003304 <__sflush_r+0x20>
 80032fe:	2000      	movs	r0, #0
 8003300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003304:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003306:	2e00      	cmp	r6, #0
 8003308:	d0f9      	beq.n	80032fe <__sflush_r+0x1a>
 800330a:	2300      	movs	r3, #0
 800330c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003310:	682f      	ldr	r7, [r5, #0]
 8003312:	602b      	str	r3, [r5, #0]
 8003314:	d032      	beq.n	800337c <__sflush_r+0x98>
 8003316:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003318:	89a3      	ldrh	r3, [r4, #12]
 800331a:	075a      	lsls	r2, r3, #29
 800331c:	d505      	bpl.n	800332a <__sflush_r+0x46>
 800331e:	6863      	ldr	r3, [r4, #4]
 8003320:	1ac0      	subs	r0, r0, r3
 8003322:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003324:	b10b      	cbz	r3, 800332a <__sflush_r+0x46>
 8003326:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003328:	1ac0      	subs	r0, r0, r3
 800332a:	2300      	movs	r3, #0
 800332c:	4602      	mov	r2, r0
 800332e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003330:	6a21      	ldr	r1, [r4, #32]
 8003332:	4628      	mov	r0, r5
 8003334:	47b0      	blx	r6
 8003336:	1c43      	adds	r3, r0, #1
 8003338:	89a3      	ldrh	r3, [r4, #12]
 800333a:	d106      	bne.n	800334a <__sflush_r+0x66>
 800333c:	6829      	ldr	r1, [r5, #0]
 800333e:	291d      	cmp	r1, #29
 8003340:	d82c      	bhi.n	800339c <__sflush_r+0xb8>
 8003342:	4a2a      	ldr	r2, [pc, #168]	; (80033ec <__sflush_r+0x108>)
 8003344:	40ca      	lsrs	r2, r1
 8003346:	07d6      	lsls	r6, r2, #31
 8003348:	d528      	bpl.n	800339c <__sflush_r+0xb8>
 800334a:	2200      	movs	r2, #0
 800334c:	6062      	str	r2, [r4, #4]
 800334e:	04d9      	lsls	r1, r3, #19
 8003350:	6922      	ldr	r2, [r4, #16]
 8003352:	6022      	str	r2, [r4, #0]
 8003354:	d504      	bpl.n	8003360 <__sflush_r+0x7c>
 8003356:	1c42      	adds	r2, r0, #1
 8003358:	d101      	bne.n	800335e <__sflush_r+0x7a>
 800335a:	682b      	ldr	r3, [r5, #0]
 800335c:	b903      	cbnz	r3, 8003360 <__sflush_r+0x7c>
 800335e:	6560      	str	r0, [r4, #84]	; 0x54
 8003360:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003362:	602f      	str	r7, [r5, #0]
 8003364:	2900      	cmp	r1, #0
 8003366:	d0ca      	beq.n	80032fe <__sflush_r+0x1a>
 8003368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800336c:	4299      	cmp	r1, r3
 800336e:	d002      	beq.n	8003376 <__sflush_r+0x92>
 8003370:	4628      	mov	r0, r5
 8003372:	f7ff fa9d 	bl	80028b0 <_free_r>
 8003376:	2000      	movs	r0, #0
 8003378:	6360      	str	r0, [r4, #52]	; 0x34
 800337a:	e7c1      	b.n	8003300 <__sflush_r+0x1c>
 800337c:	6a21      	ldr	r1, [r4, #32]
 800337e:	2301      	movs	r3, #1
 8003380:	4628      	mov	r0, r5
 8003382:	47b0      	blx	r6
 8003384:	1c41      	adds	r1, r0, #1
 8003386:	d1c7      	bne.n	8003318 <__sflush_r+0x34>
 8003388:	682b      	ldr	r3, [r5, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0c4      	beq.n	8003318 <__sflush_r+0x34>
 800338e:	2b1d      	cmp	r3, #29
 8003390:	d001      	beq.n	8003396 <__sflush_r+0xb2>
 8003392:	2b16      	cmp	r3, #22
 8003394:	d101      	bne.n	800339a <__sflush_r+0xb6>
 8003396:	602f      	str	r7, [r5, #0]
 8003398:	e7b1      	b.n	80032fe <__sflush_r+0x1a>
 800339a:	89a3      	ldrh	r3, [r4, #12]
 800339c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033a0:	81a3      	strh	r3, [r4, #12]
 80033a2:	e7ad      	b.n	8003300 <__sflush_r+0x1c>
 80033a4:	690f      	ldr	r7, [r1, #16]
 80033a6:	2f00      	cmp	r7, #0
 80033a8:	d0a9      	beq.n	80032fe <__sflush_r+0x1a>
 80033aa:	0793      	lsls	r3, r2, #30
 80033ac:	680e      	ldr	r6, [r1, #0]
 80033ae:	bf08      	it	eq
 80033b0:	694b      	ldreq	r3, [r1, #20]
 80033b2:	600f      	str	r7, [r1, #0]
 80033b4:	bf18      	it	ne
 80033b6:	2300      	movne	r3, #0
 80033b8:	eba6 0807 	sub.w	r8, r6, r7
 80033bc:	608b      	str	r3, [r1, #8]
 80033be:	f1b8 0f00 	cmp.w	r8, #0
 80033c2:	dd9c      	ble.n	80032fe <__sflush_r+0x1a>
 80033c4:	6a21      	ldr	r1, [r4, #32]
 80033c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80033c8:	4643      	mov	r3, r8
 80033ca:	463a      	mov	r2, r7
 80033cc:	4628      	mov	r0, r5
 80033ce:	47b0      	blx	r6
 80033d0:	2800      	cmp	r0, #0
 80033d2:	dc06      	bgt.n	80033e2 <__sflush_r+0xfe>
 80033d4:	89a3      	ldrh	r3, [r4, #12]
 80033d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033da:	81a3      	strh	r3, [r4, #12]
 80033dc:	f04f 30ff 	mov.w	r0, #4294967295
 80033e0:	e78e      	b.n	8003300 <__sflush_r+0x1c>
 80033e2:	4407      	add	r7, r0
 80033e4:	eba8 0800 	sub.w	r8, r8, r0
 80033e8:	e7e9      	b.n	80033be <__sflush_r+0xda>
 80033ea:	bf00      	nop
 80033ec:	20400001 	.word	0x20400001

080033f0 <_fflush_r>:
 80033f0:	b538      	push	{r3, r4, r5, lr}
 80033f2:	690b      	ldr	r3, [r1, #16]
 80033f4:	4605      	mov	r5, r0
 80033f6:	460c      	mov	r4, r1
 80033f8:	b913      	cbnz	r3, 8003400 <_fflush_r+0x10>
 80033fa:	2500      	movs	r5, #0
 80033fc:	4628      	mov	r0, r5
 80033fe:	bd38      	pop	{r3, r4, r5, pc}
 8003400:	b118      	cbz	r0, 800340a <_fflush_r+0x1a>
 8003402:	6983      	ldr	r3, [r0, #24]
 8003404:	b90b      	cbnz	r3, 800340a <_fflush_r+0x1a>
 8003406:	f000 f887 	bl	8003518 <__sinit>
 800340a:	4b14      	ldr	r3, [pc, #80]	; (800345c <_fflush_r+0x6c>)
 800340c:	429c      	cmp	r4, r3
 800340e:	d11b      	bne.n	8003448 <_fflush_r+0x58>
 8003410:	686c      	ldr	r4, [r5, #4]
 8003412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0ef      	beq.n	80033fa <_fflush_r+0xa>
 800341a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800341c:	07d0      	lsls	r0, r2, #31
 800341e:	d404      	bmi.n	800342a <_fflush_r+0x3a>
 8003420:	0599      	lsls	r1, r3, #22
 8003422:	d402      	bmi.n	800342a <_fflush_r+0x3a>
 8003424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003426:	f000 f915 	bl	8003654 <__retarget_lock_acquire_recursive>
 800342a:	4628      	mov	r0, r5
 800342c:	4621      	mov	r1, r4
 800342e:	f7ff ff59 	bl	80032e4 <__sflush_r>
 8003432:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003434:	07da      	lsls	r2, r3, #31
 8003436:	4605      	mov	r5, r0
 8003438:	d4e0      	bmi.n	80033fc <_fflush_r+0xc>
 800343a:	89a3      	ldrh	r3, [r4, #12]
 800343c:	059b      	lsls	r3, r3, #22
 800343e:	d4dd      	bmi.n	80033fc <_fflush_r+0xc>
 8003440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003442:	f000 f908 	bl	8003656 <__retarget_lock_release_recursive>
 8003446:	e7d9      	b.n	80033fc <_fflush_r+0xc>
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <_fflush_r+0x70>)
 800344a:	429c      	cmp	r4, r3
 800344c:	d101      	bne.n	8003452 <_fflush_r+0x62>
 800344e:	68ac      	ldr	r4, [r5, #8]
 8003450:	e7df      	b.n	8003412 <_fflush_r+0x22>
 8003452:	4b04      	ldr	r3, [pc, #16]	; (8003464 <_fflush_r+0x74>)
 8003454:	429c      	cmp	r4, r3
 8003456:	bf08      	it	eq
 8003458:	68ec      	ldreq	r4, [r5, #12]
 800345a:	e7da      	b.n	8003412 <_fflush_r+0x22>
 800345c:	080081b4 	.word	0x080081b4
 8003460:	080081d4 	.word	0x080081d4
 8003464:	08008194 	.word	0x08008194

08003468 <std>:
 8003468:	2300      	movs	r3, #0
 800346a:	b510      	push	{r4, lr}
 800346c:	4604      	mov	r4, r0
 800346e:	e9c0 3300 	strd	r3, r3, [r0]
 8003472:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003476:	6083      	str	r3, [r0, #8]
 8003478:	8181      	strh	r1, [r0, #12]
 800347a:	6643      	str	r3, [r0, #100]	; 0x64
 800347c:	81c2      	strh	r2, [r0, #14]
 800347e:	6183      	str	r3, [r0, #24]
 8003480:	4619      	mov	r1, r3
 8003482:	2208      	movs	r2, #8
 8003484:	305c      	adds	r0, #92	; 0x5c
 8003486:	f7ff fa0b 	bl	80028a0 <memset>
 800348a:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <std+0x38>)
 800348c:	6263      	str	r3, [r4, #36]	; 0x24
 800348e:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <std+0x3c>)
 8003490:	62a3      	str	r3, [r4, #40]	; 0x28
 8003492:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <std+0x40>)
 8003494:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003496:	4b05      	ldr	r3, [pc, #20]	; (80034ac <std+0x44>)
 8003498:	6224      	str	r4, [r4, #32]
 800349a:	6323      	str	r3, [r4, #48]	; 0x30
 800349c:	bd10      	pop	{r4, pc}
 800349e:	bf00      	nop
 80034a0:	080037a9 	.word	0x080037a9
 80034a4:	080037cb 	.word	0x080037cb
 80034a8:	08003803 	.word	0x08003803
 80034ac:	08003827 	.word	0x08003827

080034b0 <_cleanup_r>:
 80034b0:	4901      	ldr	r1, [pc, #4]	; (80034b8 <_cleanup_r+0x8>)
 80034b2:	f000 b8af 	b.w	8003614 <_fwalk_reent>
 80034b6:	bf00      	nop
 80034b8:	080033f1 	.word	0x080033f1

080034bc <__sfmoreglue>:
 80034bc:	b570      	push	{r4, r5, r6, lr}
 80034be:	1e4a      	subs	r2, r1, #1
 80034c0:	2568      	movs	r5, #104	; 0x68
 80034c2:	4355      	muls	r5, r2
 80034c4:	460e      	mov	r6, r1
 80034c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80034ca:	f7ff fa41 	bl	8002950 <_malloc_r>
 80034ce:	4604      	mov	r4, r0
 80034d0:	b140      	cbz	r0, 80034e4 <__sfmoreglue+0x28>
 80034d2:	2100      	movs	r1, #0
 80034d4:	e9c0 1600 	strd	r1, r6, [r0]
 80034d8:	300c      	adds	r0, #12
 80034da:	60a0      	str	r0, [r4, #8]
 80034dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80034e0:	f7ff f9de 	bl	80028a0 <memset>
 80034e4:	4620      	mov	r0, r4
 80034e6:	bd70      	pop	{r4, r5, r6, pc}

080034e8 <__sfp_lock_acquire>:
 80034e8:	4801      	ldr	r0, [pc, #4]	; (80034f0 <__sfp_lock_acquire+0x8>)
 80034ea:	f000 b8b3 	b.w	8003654 <__retarget_lock_acquire_recursive>
 80034ee:	bf00      	nop
 80034f0:	200005a8 	.word	0x200005a8

080034f4 <__sfp_lock_release>:
 80034f4:	4801      	ldr	r0, [pc, #4]	; (80034fc <__sfp_lock_release+0x8>)
 80034f6:	f000 b8ae 	b.w	8003656 <__retarget_lock_release_recursive>
 80034fa:	bf00      	nop
 80034fc:	200005a8 	.word	0x200005a8

08003500 <__sinit_lock_acquire>:
 8003500:	4801      	ldr	r0, [pc, #4]	; (8003508 <__sinit_lock_acquire+0x8>)
 8003502:	f000 b8a7 	b.w	8003654 <__retarget_lock_acquire_recursive>
 8003506:	bf00      	nop
 8003508:	200005a3 	.word	0x200005a3

0800350c <__sinit_lock_release>:
 800350c:	4801      	ldr	r0, [pc, #4]	; (8003514 <__sinit_lock_release+0x8>)
 800350e:	f000 b8a2 	b.w	8003656 <__retarget_lock_release_recursive>
 8003512:	bf00      	nop
 8003514:	200005a3 	.word	0x200005a3

08003518 <__sinit>:
 8003518:	b510      	push	{r4, lr}
 800351a:	4604      	mov	r4, r0
 800351c:	f7ff fff0 	bl	8003500 <__sinit_lock_acquire>
 8003520:	69a3      	ldr	r3, [r4, #24]
 8003522:	b11b      	cbz	r3, 800352c <__sinit+0x14>
 8003524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003528:	f7ff bff0 	b.w	800350c <__sinit_lock_release>
 800352c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003530:	6523      	str	r3, [r4, #80]	; 0x50
 8003532:	4b13      	ldr	r3, [pc, #76]	; (8003580 <__sinit+0x68>)
 8003534:	4a13      	ldr	r2, [pc, #76]	; (8003584 <__sinit+0x6c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	62a2      	str	r2, [r4, #40]	; 0x28
 800353a:	42a3      	cmp	r3, r4
 800353c:	bf04      	itt	eq
 800353e:	2301      	moveq	r3, #1
 8003540:	61a3      	streq	r3, [r4, #24]
 8003542:	4620      	mov	r0, r4
 8003544:	f000 f820 	bl	8003588 <__sfp>
 8003548:	6060      	str	r0, [r4, #4]
 800354a:	4620      	mov	r0, r4
 800354c:	f000 f81c 	bl	8003588 <__sfp>
 8003550:	60a0      	str	r0, [r4, #8]
 8003552:	4620      	mov	r0, r4
 8003554:	f000 f818 	bl	8003588 <__sfp>
 8003558:	2200      	movs	r2, #0
 800355a:	60e0      	str	r0, [r4, #12]
 800355c:	2104      	movs	r1, #4
 800355e:	6860      	ldr	r0, [r4, #4]
 8003560:	f7ff ff82 	bl	8003468 <std>
 8003564:	68a0      	ldr	r0, [r4, #8]
 8003566:	2201      	movs	r2, #1
 8003568:	2109      	movs	r1, #9
 800356a:	f7ff ff7d 	bl	8003468 <std>
 800356e:	68e0      	ldr	r0, [r4, #12]
 8003570:	2202      	movs	r2, #2
 8003572:	2112      	movs	r1, #18
 8003574:	f7ff ff78 	bl	8003468 <std>
 8003578:	2301      	movs	r3, #1
 800357a:	61a3      	str	r3, [r4, #24]
 800357c:	e7d2      	b.n	8003524 <__sinit+0xc>
 800357e:	bf00      	nop
 8003580:	080080a8 	.word	0x080080a8
 8003584:	080034b1 	.word	0x080034b1

08003588 <__sfp>:
 8003588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358a:	4607      	mov	r7, r0
 800358c:	f7ff ffac 	bl	80034e8 <__sfp_lock_acquire>
 8003590:	4b1e      	ldr	r3, [pc, #120]	; (800360c <__sfp+0x84>)
 8003592:	681e      	ldr	r6, [r3, #0]
 8003594:	69b3      	ldr	r3, [r6, #24]
 8003596:	b913      	cbnz	r3, 800359e <__sfp+0x16>
 8003598:	4630      	mov	r0, r6
 800359a:	f7ff ffbd 	bl	8003518 <__sinit>
 800359e:	3648      	adds	r6, #72	; 0x48
 80035a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035a4:	3b01      	subs	r3, #1
 80035a6:	d503      	bpl.n	80035b0 <__sfp+0x28>
 80035a8:	6833      	ldr	r3, [r6, #0]
 80035aa:	b30b      	cbz	r3, 80035f0 <__sfp+0x68>
 80035ac:	6836      	ldr	r6, [r6, #0]
 80035ae:	e7f7      	b.n	80035a0 <__sfp+0x18>
 80035b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035b4:	b9d5      	cbnz	r5, 80035ec <__sfp+0x64>
 80035b6:	4b16      	ldr	r3, [pc, #88]	; (8003610 <__sfp+0x88>)
 80035b8:	60e3      	str	r3, [r4, #12]
 80035ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80035be:	6665      	str	r5, [r4, #100]	; 0x64
 80035c0:	f000 f847 	bl	8003652 <__retarget_lock_init_recursive>
 80035c4:	f7ff ff96 	bl	80034f4 <__sfp_lock_release>
 80035c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80035cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80035d0:	6025      	str	r5, [r4, #0]
 80035d2:	61a5      	str	r5, [r4, #24]
 80035d4:	2208      	movs	r2, #8
 80035d6:	4629      	mov	r1, r5
 80035d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035dc:	f7ff f960 	bl	80028a0 <memset>
 80035e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80035e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80035e8:	4620      	mov	r0, r4
 80035ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035ec:	3468      	adds	r4, #104	; 0x68
 80035ee:	e7d9      	b.n	80035a4 <__sfp+0x1c>
 80035f0:	2104      	movs	r1, #4
 80035f2:	4638      	mov	r0, r7
 80035f4:	f7ff ff62 	bl	80034bc <__sfmoreglue>
 80035f8:	4604      	mov	r4, r0
 80035fa:	6030      	str	r0, [r6, #0]
 80035fc:	2800      	cmp	r0, #0
 80035fe:	d1d5      	bne.n	80035ac <__sfp+0x24>
 8003600:	f7ff ff78 	bl	80034f4 <__sfp_lock_release>
 8003604:	230c      	movs	r3, #12
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	e7ee      	b.n	80035e8 <__sfp+0x60>
 800360a:	bf00      	nop
 800360c:	080080a8 	.word	0x080080a8
 8003610:	ffff0001 	.word	0xffff0001

08003614 <_fwalk_reent>:
 8003614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003618:	4606      	mov	r6, r0
 800361a:	4688      	mov	r8, r1
 800361c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003620:	2700      	movs	r7, #0
 8003622:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003626:	f1b9 0901 	subs.w	r9, r9, #1
 800362a:	d505      	bpl.n	8003638 <_fwalk_reent+0x24>
 800362c:	6824      	ldr	r4, [r4, #0]
 800362e:	2c00      	cmp	r4, #0
 8003630:	d1f7      	bne.n	8003622 <_fwalk_reent+0xe>
 8003632:	4638      	mov	r0, r7
 8003634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003638:	89ab      	ldrh	r3, [r5, #12]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d907      	bls.n	800364e <_fwalk_reent+0x3a>
 800363e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003642:	3301      	adds	r3, #1
 8003644:	d003      	beq.n	800364e <_fwalk_reent+0x3a>
 8003646:	4629      	mov	r1, r5
 8003648:	4630      	mov	r0, r6
 800364a:	47c0      	blx	r8
 800364c:	4307      	orrs	r7, r0
 800364e:	3568      	adds	r5, #104	; 0x68
 8003650:	e7e9      	b.n	8003626 <_fwalk_reent+0x12>

08003652 <__retarget_lock_init_recursive>:
 8003652:	4770      	bx	lr

08003654 <__retarget_lock_acquire_recursive>:
 8003654:	4770      	bx	lr

08003656 <__retarget_lock_release_recursive>:
 8003656:	4770      	bx	lr

08003658 <__swhatbuf_r>:
 8003658:	b570      	push	{r4, r5, r6, lr}
 800365a:	460e      	mov	r6, r1
 800365c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003660:	2900      	cmp	r1, #0
 8003662:	b096      	sub	sp, #88	; 0x58
 8003664:	4614      	mov	r4, r2
 8003666:	461d      	mov	r5, r3
 8003668:	da07      	bge.n	800367a <__swhatbuf_r+0x22>
 800366a:	2300      	movs	r3, #0
 800366c:	602b      	str	r3, [r5, #0]
 800366e:	89b3      	ldrh	r3, [r6, #12]
 8003670:	061a      	lsls	r2, r3, #24
 8003672:	d410      	bmi.n	8003696 <__swhatbuf_r+0x3e>
 8003674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003678:	e00e      	b.n	8003698 <__swhatbuf_r+0x40>
 800367a:	466a      	mov	r2, sp
 800367c:	f000 f8fa 	bl	8003874 <_fstat_r>
 8003680:	2800      	cmp	r0, #0
 8003682:	dbf2      	blt.n	800366a <__swhatbuf_r+0x12>
 8003684:	9a01      	ldr	r2, [sp, #4]
 8003686:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800368a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800368e:	425a      	negs	r2, r3
 8003690:	415a      	adcs	r2, r3
 8003692:	602a      	str	r2, [r5, #0]
 8003694:	e7ee      	b.n	8003674 <__swhatbuf_r+0x1c>
 8003696:	2340      	movs	r3, #64	; 0x40
 8003698:	2000      	movs	r0, #0
 800369a:	6023      	str	r3, [r4, #0]
 800369c:	b016      	add	sp, #88	; 0x58
 800369e:	bd70      	pop	{r4, r5, r6, pc}

080036a0 <__smakebuf_r>:
 80036a0:	898b      	ldrh	r3, [r1, #12]
 80036a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036a4:	079d      	lsls	r5, r3, #30
 80036a6:	4606      	mov	r6, r0
 80036a8:	460c      	mov	r4, r1
 80036aa:	d507      	bpl.n	80036bc <__smakebuf_r+0x1c>
 80036ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036b0:	6023      	str	r3, [r4, #0]
 80036b2:	6123      	str	r3, [r4, #16]
 80036b4:	2301      	movs	r3, #1
 80036b6:	6163      	str	r3, [r4, #20]
 80036b8:	b002      	add	sp, #8
 80036ba:	bd70      	pop	{r4, r5, r6, pc}
 80036bc:	ab01      	add	r3, sp, #4
 80036be:	466a      	mov	r2, sp
 80036c0:	f7ff ffca 	bl	8003658 <__swhatbuf_r>
 80036c4:	9900      	ldr	r1, [sp, #0]
 80036c6:	4605      	mov	r5, r0
 80036c8:	4630      	mov	r0, r6
 80036ca:	f7ff f941 	bl	8002950 <_malloc_r>
 80036ce:	b948      	cbnz	r0, 80036e4 <__smakebuf_r+0x44>
 80036d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036d4:	059a      	lsls	r2, r3, #22
 80036d6:	d4ef      	bmi.n	80036b8 <__smakebuf_r+0x18>
 80036d8:	f023 0303 	bic.w	r3, r3, #3
 80036dc:	f043 0302 	orr.w	r3, r3, #2
 80036e0:	81a3      	strh	r3, [r4, #12]
 80036e2:	e7e3      	b.n	80036ac <__smakebuf_r+0xc>
 80036e4:	4b0d      	ldr	r3, [pc, #52]	; (800371c <__smakebuf_r+0x7c>)
 80036e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80036e8:	89a3      	ldrh	r3, [r4, #12]
 80036ea:	6020      	str	r0, [r4, #0]
 80036ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f0:	81a3      	strh	r3, [r4, #12]
 80036f2:	9b00      	ldr	r3, [sp, #0]
 80036f4:	6163      	str	r3, [r4, #20]
 80036f6:	9b01      	ldr	r3, [sp, #4]
 80036f8:	6120      	str	r0, [r4, #16]
 80036fa:	b15b      	cbz	r3, 8003714 <__smakebuf_r+0x74>
 80036fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003700:	4630      	mov	r0, r6
 8003702:	f000 f8c9 	bl	8003898 <_isatty_r>
 8003706:	b128      	cbz	r0, 8003714 <__smakebuf_r+0x74>
 8003708:	89a3      	ldrh	r3, [r4, #12]
 800370a:	f023 0303 	bic.w	r3, r3, #3
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	81a3      	strh	r3, [r4, #12]
 8003714:	89a0      	ldrh	r0, [r4, #12]
 8003716:	4305      	orrs	r5, r0
 8003718:	81a5      	strh	r5, [r4, #12]
 800371a:	e7cd      	b.n	80036b8 <__smakebuf_r+0x18>
 800371c:	080034b1 	.word	0x080034b1

08003720 <_raise_r>:
 8003720:	291f      	cmp	r1, #31
 8003722:	b538      	push	{r3, r4, r5, lr}
 8003724:	4604      	mov	r4, r0
 8003726:	460d      	mov	r5, r1
 8003728:	d904      	bls.n	8003734 <_raise_r+0x14>
 800372a:	2316      	movs	r3, #22
 800372c:	6003      	str	r3, [r0, #0]
 800372e:	f04f 30ff 	mov.w	r0, #4294967295
 8003732:	bd38      	pop	{r3, r4, r5, pc}
 8003734:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003736:	b112      	cbz	r2, 800373e <_raise_r+0x1e>
 8003738:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800373c:	b94b      	cbnz	r3, 8003752 <_raise_r+0x32>
 800373e:	4620      	mov	r0, r4
 8003740:	f000 f830 	bl	80037a4 <_getpid_r>
 8003744:	462a      	mov	r2, r5
 8003746:	4601      	mov	r1, r0
 8003748:	4620      	mov	r0, r4
 800374a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800374e:	f000 b817 	b.w	8003780 <_kill_r>
 8003752:	2b01      	cmp	r3, #1
 8003754:	d00a      	beq.n	800376c <_raise_r+0x4c>
 8003756:	1c59      	adds	r1, r3, #1
 8003758:	d103      	bne.n	8003762 <_raise_r+0x42>
 800375a:	2316      	movs	r3, #22
 800375c:	6003      	str	r3, [r0, #0]
 800375e:	2001      	movs	r0, #1
 8003760:	e7e7      	b.n	8003732 <_raise_r+0x12>
 8003762:	2400      	movs	r4, #0
 8003764:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003768:	4628      	mov	r0, r5
 800376a:	4798      	blx	r3
 800376c:	2000      	movs	r0, #0
 800376e:	e7e0      	b.n	8003732 <_raise_r+0x12>

08003770 <raise>:
 8003770:	4b02      	ldr	r3, [pc, #8]	; (800377c <raise+0xc>)
 8003772:	4601      	mov	r1, r0
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	f7ff bfd3 	b.w	8003720 <_raise_r>
 800377a:	bf00      	nop
 800377c:	20000084 	.word	0x20000084

08003780 <_kill_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	4d07      	ldr	r5, [pc, #28]	; (80037a0 <_kill_r+0x20>)
 8003784:	2300      	movs	r3, #0
 8003786:	4604      	mov	r4, r0
 8003788:	4608      	mov	r0, r1
 800378a:	4611      	mov	r1, r2
 800378c:	602b      	str	r3, [r5, #0]
 800378e:	f7fd fe5f 	bl	8001450 <_kill>
 8003792:	1c43      	adds	r3, r0, #1
 8003794:	d102      	bne.n	800379c <_kill_r+0x1c>
 8003796:	682b      	ldr	r3, [r5, #0]
 8003798:	b103      	cbz	r3, 800379c <_kill_r+0x1c>
 800379a:	6023      	str	r3, [r4, #0]
 800379c:	bd38      	pop	{r3, r4, r5, pc}
 800379e:	bf00      	nop
 80037a0:	2000059c 	.word	0x2000059c

080037a4 <_getpid_r>:
 80037a4:	f7fd be52 	b.w	800144c <_getpid>

080037a8 <__sread>:
 80037a8:	b510      	push	{r4, lr}
 80037aa:	460c      	mov	r4, r1
 80037ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037b0:	f000 f894 	bl	80038dc <_read_r>
 80037b4:	2800      	cmp	r0, #0
 80037b6:	bfab      	itete	ge
 80037b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80037ba:	89a3      	ldrhlt	r3, [r4, #12]
 80037bc:	181b      	addge	r3, r3, r0
 80037be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80037c2:	bfac      	ite	ge
 80037c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80037c6:	81a3      	strhlt	r3, [r4, #12]
 80037c8:	bd10      	pop	{r4, pc}

080037ca <__swrite>:
 80037ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037ce:	461f      	mov	r7, r3
 80037d0:	898b      	ldrh	r3, [r1, #12]
 80037d2:	05db      	lsls	r3, r3, #23
 80037d4:	4605      	mov	r5, r0
 80037d6:	460c      	mov	r4, r1
 80037d8:	4616      	mov	r6, r2
 80037da:	d505      	bpl.n	80037e8 <__swrite+0x1e>
 80037dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037e0:	2302      	movs	r3, #2
 80037e2:	2200      	movs	r2, #0
 80037e4:	f000 f868 	bl	80038b8 <_lseek_r>
 80037e8:	89a3      	ldrh	r3, [r4, #12]
 80037ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037f2:	81a3      	strh	r3, [r4, #12]
 80037f4:	4632      	mov	r2, r6
 80037f6:	463b      	mov	r3, r7
 80037f8:	4628      	mov	r0, r5
 80037fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037fe:	f000 b817 	b.w	8003830 <_write_r>

08003802 <__sseek>:
 8003802:	b510      	push	{r4, lr}
 8003804:	460c      	mov	r4, r1
 8003806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800380a:	f000 f855 	bl	80038b8 <_lseek_r>
 800380e:	1c43      	adds	r3, r0, #1
 8003810:	89a3      	ldrh	r3, [r4, #12]
 8003812:	bf15      	itete	ne
 8003814:	6560      	strne	r0, [r4, #84]	; 0x54
 8003816:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800381a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800381e:	81a3      	strheq	r3, [r4, #12]
 8003820:	bf18      	it	ne
 8003822:	81a3      	strhne	r3, [r4, #12]
 8003824:	bd10      	pop	{r4, pc}

08003826 <__sclose>:
 8003826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800382a:	f000 b813 	b.w	8003854 <_close_r>
	...

08003830 <_write_r>:
 8003830:	b538      	push	{r3, r4, r5, lr}
 8003832:	4d07      	ldr	r5, [pc, #28]	; (8003850 <_write_r+0x20>)
 8003834:	4604      	mov	r4, r0
 8003836:	4608      	mov	r0, r1
 8003838:	4611      	mov	r1, r2
 800383a:	2200      	movs	r2, #0
 800383c:	602a      	str	r2, [r5, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	f7fd fe24 	bl	800148c <_write>
 8003844:	1c43      	adds	r3, r0, #1
 8003846:	d102      	bne.n	800384e <_write_r+0x1e>
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	b103      	cbz	r3, 800384e <_write_r+0x1e>
 800384c:	6023      	str	r3, [r4, #0]
 800384e:	bd38      	pop	{r3, r4, r5, pc}
 8003850:	2000059c 	.word	0x2000059c

08003854 <_close_r>:
 8003854:	b538      	push	{r3, r4, r5, lr}
 8003856:	4d06      	ldr	r5, [pc, #24]	; (8003870 <_close_r+0x1c>)
 8003858:	2300      	movs	r3, #0
 800385a:	4604      	mov	r4, r0
 800385c:	4608      	mov	r0, r1
 800385e:	602b      	str	r3, [r5, #0]
 8003860:	f7fd fe22 	bl	80014a8 <_close>
 8003864:	1c43      	adds	r3, r0, #1
 8003866:	d102      	bne.n	800386e <_close_r+0x1a>
 8003868:	682b      	ldr	r3, [r5, #0]
 800386a:	b103      	cbz	r3, 800386e <_close_r+0x1a>
 800386c:	6023      	str	r3, [r4, #0]
 800386e:	bd38      	pop	{r3, r4, r5, pc}
 8003870:	2000059c 	.word	0x2000059c

08003874 <_fstat_r>:
 8003874:	b538      	push	{r3, r4, r5, lr}
 8003876:	4d07      	ldr	r5, [pc, #28]	; (8003894 <_fstat_r+0x20>)
 8003878:	2300      	movs	r3, #0
 800387a:	4604      	mov	r4, r0
 800387c:	4608      	mov	r0, r1
 800387e:	4611      	mov	r1, r2
 8003880:	602b      	str	r3, [r5, #0]
 8003882:	f7fd fe14 	bl	80014ae <_fstat>
 8003886:	1c43      	adds	r3, r0, #1
 8003888:	d102      	bne.n	8003890 <_fstat_r+0x1c>
 800388a:	682b      	ldr	r3, [r5, #0]
 800388c:	b103      	cbz	r3, 8003890 <_fstat_r+0x1c>
 800388e:	6023      	str	r3, [r4, #0]
 8003890:	bd38      	pop	{r3, r4, r5, pc}
 8003892:	bf00      	nop
 8003894:	2000059c 	.word	0x2000059c

08003898 <_isatty_r>:
 8003898:	b538      	push	{r3, r4, r5, lr}
 800389a:	4d06      	ldr	r5, [pc, #24]	; (80038b4 <_isatty_r+0x1c>)
 800389c:	2300      	movs	r3, #0
 800389e:	4604      	mov	r4, r0
 80038a0:	4608      	mov	r0, r1
 80038a2:	602b      	str	r3, [r5, #0]
 80038a4:	f7fd fe08 	bl	80014b8 <_isatty>
 80038a8:	1c43      	adds	r3, r0, #1
 80038aa:	d102      	bne.n	80038b2 <_isatty_r+0x1a>
 80038ac:	682b      	ldr	r3, [r5, #0]
 80038ae:	b103      	cbz	r3, 80038b2 <_isatty_r+0x1a>
 80038b0:	6023      	str	r3, [r4, #0]
 80038b2:	bd38      	pop	{r3, r4, r5, pc}
 80038b4:	2000059c 	.word	0x2000059c

080038b8 <_lseek_r>:
 80038b8:	b538      	push	{r3, r4, r5, lr}
 80038ba:	4d07      	ldr	r5, [pc, #28]	; (80038d8 <_lseek_r+0x20>)
 80038bc:	4604      	mov	r4, r0
 80038be:	4608      	mov	r0, r1
 80038c0:	4611      	mov	r1, r2
 80038c2:	2200      	movs	r2, #0
 80038c4:	602a      	str	r2, [r5, #0]
 80038c6:	461a      	mov	r2, r3
 80038c8:	f7fd fdf8 	bl	80014bc <_lseek>
 80038cc:	1c43      	adds	r3, r0, #1
 80038ce:	d102      	bne.n	80038d6 <_lseek_r+0x1e>
 80038d0:	682b      	ldr	r3, [r5, #0]
 80038d2:	b103      	cbz	r3, 80038d6 <_lseek_r+0x1e>
 80038d4:	6023      	str	r3, [r4, #0]
 80038d6:	bd38      	pop	{r3, r4, r5, pc}
 80038d8:	2000059c 	.word	0x2000059c

080038dc <_read_r>:
 80038dc:	b538      	push	{r3, r4, r5, lr}
 80038de:	4d07      	ldr	r5, [pc, #28]	; (80038fc <_read_r+0x20>)
 80038e0:	4604      	mov	r4, r0
 80038e2:	4608      	mov	r0, r1
 80038e4:	4611      	mov	r1, r2
 80038e6:	2200      	movs	r2, #0
 80038e8:	602a      	str	r2, [r5, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	f7fd fdbe 	bl	800146c <_read>
 80038f0:	1c43      	adds	r3, r0, #1
 80038f2:	d102      	bne.n	80038fa <_read_r+0x1e>
 80038f4:	682b      	ldr	r3, [r5, #0]
 80038f6:	b103      	cbz	r3, 80038fa <_read_r+0x1e>
 80038f8:	6023      	str	r3, [r4, #0]
 80038fa:	bd38      	pop	{r3, r4, r5, pc}
 80038fc:	2000059c 	.word	0x2000059c

08003900 <_init>:
 8003900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003902:	bf00      	nop
 8003904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003906:	bc08      	pop	{r3}
 8003908:	469e      	mov	lr, r3
 800390a:	4770      	bx	lr

0800390c <_fini>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	bf00      	nop
 8003910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003912:	bc08      	pop	{r3}
 8003914:	469e      	mov	lr, r3
 8003916:	4770      	bx	lr
